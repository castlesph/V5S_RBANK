/*******************************************************************************

*******************************************************************************/

#include <string.h>
#include <stdio.h>
#include <stdlib.h>
#include <ctosapi.h>
#include <EMVAPLib.h>
#include <EMVLib.h>
#include <emv_cl.h>
#include <vwdleapi.h>

#include <sys/stat.h>   
#include "..\Includes\POSTypedef.h"
#include "..\FileModule\myFileFunc.h"

#include "..\Includes\msg.h"
#include "..\Includes\CTOSInput.h"
#include "..\ui\display.h"

#include "..\Debug\Debug.h"

#include "..\Includes\CTOSInput.h"

#include "..\comm\v5Comm.h"
#include "..\Accum\Accum.h"
#include "..\DataBase\DataBaseFunc.h"
#include "..\POWRFAIL\POSPOWRFAIL.h"

#include "..\Includes\POSMain.h"
#include "..\Includes\POSTrans.h"
#include "..\Includes\POSHost.h"
#include "..\Includes\POSSale.h"
#include "..\Comm\V5Comm.h"
#include "..\debug\debug.h"
#include "..\Includes\Wub_lib.h"
#include "..\Includes\CardUtil.h"
#include "..\Debug\Debug.h"
#include "..\Database\DatabaseFunc.h"
#include "..\Includes\myEZLib.h"
#include "..\ApTrans\MultiShareEMV.h"
#include "..\Includes\MultiApLib.h"
#include "..\Includes\V5IsoFunc.h"
#include "..\Ctls\POSCtls.h"
#include "..\Ctls\PosWave.h"
#include "..\Aptrans\MultiAptrans.h"

// patrck fix code 20141208
extern EMVCL_RC_DATA_ANALYZE stRCDataAnalyze;

extern BOOL fManualSettle;
extern BOOL fAUTOManualSettle;

int inFallbackToMSR = FAIL;
static char szBaseAmount[6+1];

BOOL fECRTxnFlg = 0;

//issue:218
extern BOOL fEntryCardfromIDLE;
extern BOOL fIdleInsert;
//issue218

extern BOOL fBINVer;
extern BOOL fGPRSConnectOK;

extern int isPredial;
extern int inReversalType;
extern BOOL fRouteToSpecificHost;

extern BOOL fnGlobalOrigHostEnable;
extern int inHostOrigNumber;



extern BOOL fInstApp; //BDO: Parameterized manual key entry for installment --jzg

extern char szFuncTitleName [21 + 1]; //aaronnino for BDOCLG ver 9.0 fix on issue #0093 Have a function title for function keys shorcut 3 of 6

extern BOOL fIdleSwipe;//aaronnino for BDOCLG ver 9.0 fix on issue #00059 Card entry is recognized even on non Card Entry Prompt or non Idle Screen display 7 of 8

//Display Issuer logo: Clear the display first, then re-display trans title -- jzg
extern void displayAppbmpDataEx(unsigned int x,unsigned int y, const char *path);

/* BDO: For ECR, variable -- sidumili */
BOOL fECRBuildSendOK = FALSE; /* For ECR -- sidumili */
/* BDO: For ECR, variable -- sidumili */

void vdSetECRTransactionFlg(BOOL flg)
{
    fECRTxnFlg = flg;
}

BOOL fGetECRTransactionFlg(void)
{
    return fECRTxnFlg;
}

extern int isdigit ( int c );


USHORT shCTOS_GetNum(IN  USHORT usY, IN  USHORT usLeftRight, OUT BYTE *baBuf, OUT  USHORT *usStrLen, USHORT usMinLen, USHORT usMaxLen, USHORT usByPassAllow, USHORT usTimeOutMS)
{
    
    BYTE    bDisplayStr[MAX_CHAR_PER_LINE+1];
    BYTE    bKey = 0x00;
    BYTE    bInputStrData[128];
    USHORT  usInputStrLen;

    usInputStrLen = 0;
    memset(bInputStrData, 0x00, sizeof(bInputStrData));
    
    if(usTimeOutMS > 0)
        CTOS_TimeOutSet (TIMER_ID_1 , usTimeOutMS);

    vdDebug_LogPrintf("start [%d] data[%s]", strlen(baBuf), baBuf);
    if(strlen(baBuf) > 0 )
    {
        memset(bDisplayStr, 0x00, sizeof(bDisplayStr));
        memset(bDisplayStr, 0x20, usMaxLen*2);
        usInputStrLen = strlen(baBuf);
        strcpy(bInputStrData, baBuf);
        if(0x01 == usLeftRight)
        {
            strcpy(&bDisplayStr[(usMaxLen-strlen(bInputStrData))*2], bInputStrData);
            CTOS_LCDTPrintXY(MAX_CHAR_PER_LINE - usMaxLen*2, usY, bDisplayStr);
        }
        else
        {
            memcpy(bDisplayStr, bInputStrData, strlen(bInputStrData));
            CTOS_LCDTPrintXY(1, usY, bDisplayStr);
        }
    }
    
    while(1)
    {
//        vduiLightOn(); // patrick remark for flash light always
        if(CTOS_TimeOutCheck(TIMER_ID_1 )  == d_YES)
        {
            *usStrLen = 0;
            baBuf[0] = 0x00;
            return d_KBD_CANCEL ;
        }
        
        CTOS_KBDHit(&bKey);

        switch(bKey)
        {
        case d_KBD_DOT:
            break;
        case d_KBD_CLEAR:
            if (usInputStrLen)
            {
                usInputStrLen--;
                bInputStrData[usInputStrLen] = 0x00;
                
                memset(bDisplayStr, 0x00, sizeof(bDisplayStr));
                memset(bDisplayStr, 0x20, usMaxLen*2);
                if(0x01 == usLeftRight)
                {
                    strcpy(&bDisplayStr[(usMaxLen-strlen(bInputStrData))*2], bInputStrData);
                    CTOS_LCDTPrintXY(MAX_CHAR_PER_LINE - usMaxLen*2, usY, bDisplayStr);
                }
                else
                {
                    memcpy(bDisplayStr, bInputStrData, strlen(bInputStrData));
                    CTOS_LCDTPrintXY(1, usY, bDisplayStr);
                }
            }
            break;
        case d_KBD_CANCEL:
            *usStrLen = 0;
            baBuf[0] = 0x00;
            return d_KBD_CANCEL ;
        case '1':
        case '2':
        case '3':
        case '4':
        case '5':
        case '6':
        case '7':
        case '8':
        case '9':
        case '0':
            if (usInputStrLen < usMaxLen )
            {
                bInputStrData[usInputStrLen++] = bKey;

                memset(bDisplayStr, 0x00, sizeof(bDisplayStr));
                memset(bDisplayStr, 0x20, usMaxLen*2);
                if(0x01 == usLeftRight)
                {
                    strcpy(&bDisplayStr[(usMaxLen-strlen(bInputStrData))*2], bInputStrData);
                    CTOS_LCDTPrintXY(MAX_CHAR_PER_LINE - usMaxLen*2, usY, bDisplayStr);
                }
                else
                {
                    memcpy(bDisplayStr, bInputStrData, strlen(bInputStrData));
                    CTOS_LCDTPrintXY(1, usY, bDisplayStr);
                }
            }
            break;
        case d_KBD_ENTER:
            if(usInputStrLen >= usMinLen && usInputStrLen <= usMaxLen)
            {   
                *usStrLen = usInputStrLen;
                strcpy(baBuf, bInputStrData);
                return *usStrLen;
            }
            else if(usByPassAllow && 0 == usInputStrLen)
            {   
                *usStrLen = usInputStrLen;
                baBuf[0] = 0x00;
                return *usStrLen;
            }
            break;
        default :
            break;
        }
    }

    return 0;
}


USHORT shCTOS_GetExpDate(IN  USHORT usY, IN  USHORT usLeftRight, OUT BYTE *baBuf, OUT  USHORT *usStrLen, USHORT usMinLen, USHORT usMaxLen, USHORT usTimeOutMS)
{
    
    BYTE    bDisplayStr[MAX_CHAR_PER_LINE+1];
    BYTE    bKey = 0x00;
    BYTE    bInputStrData[20];
    BYTE    bInputFormatStr[20];
    USHORT  usInputStrLen;

    usInputStrLen = 0;
    memset(bInputStrData, 0x00, sizeof(bInputStrData));
    
    if(usTimeOutMS > 0)
        CTOS_TimeOutSet (TIMER_ID_1 , usTimeOutMS);
    
    vduiLightOn();
    while(1)
    {
        if(CTOS_TimeOutCheck(TIMER_ID_1 )  == d_YES)
        {
            *usStrLen = 0;
            baBuf[0] = 0x00;
            return d_KBD_CANCEL ;
        }
        
        CTOS_KBDHit(&bKey);

        switch(bKey)
        {
        case d_KBD_DOT:
            break;
        case d_KBD_CLEAR:
            if (usInputStrLen)
            {
                usInputStrLen--;
                bInputStrData[usInputStrLen] = 0x00;

                memset(bInputFormatStr, 0x00, sizeof(bInputFormatStr));
                if(usInputStrLen >= 2)
                {
                    memcpy(bInputFormatStr, bInputStrData, 2);
                    strcat(bInputFormatStr, "/");
                    if(usInputStrLen > 2)
                        strcat(bInputFormatStr, &bInputStrData[2]);
                }
                else
                {
                    strcpy(bInputFormatStr, bInputStrData);
                }

                memset(bDisplayStr, 0x00, sizeof(bDisplayStr));
                memset(bDisplayStr, 0x20, (usMaxLen+1)*2);
                
                if(0x01 == usLeftRight)
                {
                    strcpy(&bDisplayStr[(usMaxLen+1-strlen(bInputFormatStr))*2], bInputFormatStr);
                    CTOS_LCDTPrintXY(MAX_CHAR_PER_LINE - (usMaxLen+1)*2, usY, bDisplayStr);
                }
                else
                {
                    memcpy(bDisplayStr, bInputFormatStr, strlen(bInputFormatStr));
                    CTOS_LCDTPrintXY(1, usY, bDisplayStr);
                }
            }
            break;
        case d_KBD_CANCEL:
            *usStrLen = 0;
            baBuf[0] = 0x00;
            return d_KBD_CANCEL ;
        case '1':
        case '2':
        case '3':
        case '4':
        case '5':
        case '6':
        case '7':
        case '8':
        case '9':
        case '0':
            if (usInputStrLen < usMaxLen )
            {
                bInputStrData[usInputStrLen++] = bKey;

                memset(bInputFormatStr, 0x00, sizeof(bInputFormatStr));
                if(usInputStrLen >= 2)
                {
                    memcpy(bInputFormatStr, bInputStrData, 2);
                    strcat(bInputFormatStr, "/");
                    if(usInputStrLen > 2)
                        strcat(bInputFormatStr, &bInputStrData[2]);
                }
                else
                {
                    strcpy(bInputFormatStr, bInputStrData);
                }

                memset(bDisplayStr, 0x00, sizeof(bDisplayStr));
                memset(bDisplayStr, 0x20, (usMaxLen+1)*2);
                if(0x01 == usLeftRight)
                {
                    strcpy(&bDisplayStr[(usMaxLen+1-strlen(bInputFormatStr))*2], bInputFormatStr);
                    CTOS_LCDTPrintXY(MAX_CHAR_PER_LINE - (usMaxLen+1)*2, usY, bDisplayStr);
                }
                else
                {
                    memcpy(bDisplayStr, bInputFormatStr, strlen(bInputFormatStr));
                    CTOS_LCDTPrintXY(1, usY, bDisplayStr);
                }
            }
            break;
        case d_KBD_ENTER:
            if(usInputStrLen >= usMinLen && usInputStrLen <= usMaxLen)
            {   
                *usStrLen = usInputStrLen;
                strcpy(baBuf, bInputStrData);
                return *usStrLen;
            }
            break;
        default :
            break;
        }
    }

    return 0;
}

USHORT getExpDate( OUT BYTE *baBuf)
{
    BYTE    szMonth[3];    
    USHORT  usRet;
    USHORT  usLens;
    USHORT  usMinLen = 4;
    USHORT  usMaxLen = 4;
    USHORT usInputLine = 8;
    
    while(1)
    {
        //usRet = shCTOS_GetExpDate(usInputLine, 0x01, baBuf, &usLens, usMinLen, usMaxLen, d_INPUT_TIMEOUT);
        usRet = shCTOS_GetExpDate(usInputLine, 0x01, baBuf, &usLens, usMinLen, usMaxLen, inGetIdleTimeOut(FALSE)); /*BDO: Parameterized idle timeout --sidumili*/
        if (usRet == d_KBD_CANCEL )
            return (d_EDM_USER_CANCEL);
        memset(szMonth, 0x00, sizeof(szMonth));
        memcpy(szMonth, baBuf, 2);
        if(atol(szMonth) > 12 || 0 == atol(szMonth))
        {
            baBuf[0] = 0x00;
            clearLine(8);
            vdDisplayErrorMsg(1, 8, "INVALID FORMAT"); 
            clearLine(8);
            continue;
        }
        else
        {
            return (d_OK);
        }
    }
}

USHORT getCardNO(OUT BYTE *baBuf)
{
    USHORT usRet;
    USHORT usLens;
    USHORT usMinLen = 14;
    USHORT usMaxLen = 19;
    USHORT usInputLine = 8;
    
    while(1)
    {
        //usRet = shCTOS_GetNum(usInputLine, 0x01, baBuf, &usLens, usMinLen, usMaxLen, 0, d_INPUT_TIMEOUT);
        usRet = shCTOS_GetNum(usInputLine, 0x01, baBuf, &usLens, usMinLen, usMaxLen, 0, inGetIdleTimeOut(FALSE)); /*BDO: Parameterized idle timeout --sidumili*/
        if (usRet == d_KBD_CANCEL )
            return (d_EDM_USER_CANCEL);
        if (usRet >= usMinLen && usRet <= usMaxLen)
        {
            return (d_OK);       
        }

        baBuf[0] = 0x00;
    }
}
    

unsigned char WaitKey(short Sec)
{
    unsigned char c;
    long mlsec;
    
    mlsec=Sec*100;
    BOOL isKey;
    CTOS_TimeOutSet(TIMER_ID_3,mlsec);
    while(1)//loop for time out
    {
        CTOS_KBDInKey(&isKey);
        if (isKey){ //If isKey is TRUE, represent key be pressed //
            
            vduiLightOn();
            CTOS_KBDGet(&c);
            return c;   
        }
        else if (CTOS_TimeOutCheck(TIMER_ID_3) == d_YES)
        {      
            return d_KBD_CANCEL;
        }
    }
}


void vduiApiAmount(unsigned char *ou, unsigned char *ascamt, unsigned char len)
{
    /*~~~~~~~~~~~~~~~~~~~~~~~*/
    unsigned int    ii, jj, tt;
    unsigned char   ch;
    unsigned char   aa;
    unsigned char   buf[3];
    /*~~~~~~~~~~~~~~~~~~~~~~~*/

    jj = 0;
    tt = 0;
    ii = 0;
    
    
    ou[jj++] = strCST.szCurSymbol[0];
    ou[jj++] = strCST.szCurSymbol[1];
    ou[jj++] = strCST.szCurSymbol[2];
    
    for(ii = 0; ii < len; ii++)
    {
        ch = ascamt[ii];
        if((tt == 0) && (ch == 'C'))
        {
            tt = 1;
        }
        else if((tt == 0) && (ch == 'D'))
        {
            tt = 1;
            ou[jj++] = '-';
        }
        else if(ch<0x30 && ch>0x39 )
        {
            break;
        }
    }


    len = ii;
    aa = 0;
    for(ii = tt; (ii + 3) < len; ii++)
    {
        ch = ascamt[ii];
        if((ch == '0') && (aa == 0))
        {
            continue;
        }

        if(ch>0x29 && ch<0x40 )//if(isdigit(ch) /* && (ch !='0') */ )
        {
            aa = 1;
            ou[jj++] = ch;
        }
    }

    tt = ii;
    len = len - ii;
    buf[0] = '0', buf[1] = '0', buf[2] = '0';
    for(ii = 0; ii < len; ii++)
    {
        buf[3 - len + ii] = ascamt[tt++];
    }

    ou[jj++] = buf[0];
    ou[jj++] = '.';
    ou[jj++] = buf[1];
    ou[jj++] = buf[2];
    ou[jj++] = '\0';
}

void vduiApiPoint(unsigned char *ou, unsigned char *ascamt, unsigned char len)
{
    /*~~~~~~~~~~~~~~~~~~~~~~~*/
    unsigned int    ii, jj, tt;
    unsigned char   ch;
    unsigned char   aa;
    unsigned char   buf[3];
    /*~~~~~~~~~~~~~~~~~~~~~~~*/

    jj = 0;
    tt = 0;

    ou[jj++] = 'P';
    ou[jj++] = 'T';
    ou[jj++] = 'S';
    ou[jj++] = ' ';
    for(ii = 0; ii < len; ii++)
    {
        ch = ascamt[ii];
        if((tt == 0) && (ch == 'C'))
        {
            tt = 1;
        }
        else if((tt == 0) && (ch == 'D'))
        {
            tt = 1;
            ou[jj++] = '-';
        }
        else if(ch<0x30 && ch>0x39 )
        {
            break;
        }
    }


    len = ii;
    aa = 0;
    for(ii = tt; (ii + 3) < len; ii++)
    {
        ch = ascamt[ii];
        if((ch == '0') && (aa == 0))
        {
            continue;
        }

        if(ch>0x29 && ch<0x40 )
        {
            aa = 1;
            ou[jj++] = ch;
        }
    }

    tt = ii;
    len = len - ii;
    buf[0] = '0', buf[1] = '0', buf[2] = '0';
    for(ii = 0; ii < len; ii++)
    {
        buf[3 - len + ii] = ascamt[tt++];
    }

    ou[jj++] = buf[0];
    ou[jj++] = '.';
    ou[jj++] = buf[1];
    ou[jj++] = buf[2];
    ou[jj++] = '\0';
}

//mode  1=amount , 2=string, 3=IP  4=password, 5=Point
unsigned char struiApiGetStringSub
(
    unsigned char   *strDisplay,
    short   x,
    short   y,
    unsigned char   *ou,
    unsigned char   mode,
    short   minlen,
    short   maxlen
)
{
    
    unsigned char srDestIP[MAX_CHAR_PER_LINE+1];
    unsigned char amtdis[MAX_CHAR_PER_LINE+1];
    unsigned char c;
    int n;
    int i;
    
    memset(srDestIP,0x00,sizeof(srDestIP));
    n= 0;   

    vduiClearBelow(y);

    if(mode == MODE_AMOUNT)
    {
        vduiClearBelow(8);
        vduiApiAmount(amtdis, srDestIP, n);                     
        CTOS_LCDTPrintXY(MAX_CHAR_PER_LINE-strlen(amtdis)*2,8,amtdis);  
        
    }
    else if(mode == MODE_POINT)
    {
        vduiClearBelow(8);
        vduiApiPoint(amtdis, srDestIP, n);                      
        CTOS_LCDTPrintXY(MAX_CHAR_PER_LINE-strlen(amtdis)*2,8,amtdis);  
        
    }
    
    while(1)
    {
        
        CTOS_LCDTPrintXY(x,y,strDisplay);   
        c=WaitKey(30);//CTOS_KBDGet(&c);
        vduiLightOn();
        
        if (c == d_KBD_ENTER)
        {
            if((n>=minlen) && (n<=maxlen))
            {
                ou[n]=0;
                memcpy(ou,srDestIP,n+1);    
                if(mode==MODE_FOODITEM && atoi(ou)==0)
                {
                    return d_KBD_CANCEL;
                }
                
                if(mode==MODE_AMOUNT && atoi(ou)==0)
                {
                    i = atoi(ou);
                    memset(srDestIP,0x00,sizeof(srDestIP));
                    n=0;
                    vduiWarningSound();
                }
                else
                    return d_KBD_ENTER;
            }
            
        }       
        else if((c == d_KBD_CANCEL) && (n==0))          
        {
            memset(srDestIP,0x00,sizeof(srDestIP));         
            return d_KBD_CANCEL;
        }           

        else
        {
            if (c==d_KBD_CLEAR)
            {   
                if(n>0) 
                {
                    n--;
                    srDestIP[n]='\0';                   
                }       
            }
            else if((c == d_KBD_CANCEL))            
            {
                memset(srDestIP,0x00,sizeof(srDestIP));
                n=0;                
            }   
            else if (((c == d_KBD_DOT) & (mode==MODE_IPADDRESS)) || ((c == d_KBD_DOWN) & (mode==MODE_IPADDRESS)))
            {
                srDestIP[n]='.';
                n++;    
            }
            else if (c == d_KBD_DOT || c == d_KBD_F3  || c == d_KBD_F4 || c == d_KBD_00) 
            {
                ;
            }
            else if(c == d_KBD_UP || c == d_KBD_DOWN)
            {
                return c;
            }
            else if(n<maxlen)
            {
                srDestIP[n]=c;
                n++;    
            }
            else
            {

            }

            if(mode == MODE_AMOUNT)
            {
                vduiClearBelow(8);
                vduiApiAmount(amtdis, srDestIP, n);                     
                CTOS_LCDTPrintXY(MAX_CHAR_PER_LINE-strlen(amtdis)*2,8,amtdis);  
                
            }
            else if(mode == MODE_POINT)
            {
                vduiClearBelow(8);
                vduiApiPoint(amtdis, srDestIP, n);                      
                CTOS_LCDTPrintXY(MAX_CHAR_PER_LINE-strlen(amtdis)*2,8,amtdis);  
                
            }
            else if(mode == MODE_PASSWORD)
            {
                for(i=0;i<n;i++)
                    amtdis[i]='*';
                amtdis[n]=0;
                vduiClearBelow(8);
                CTOS_LCDTPrintXY(MAX_CHAR_PER_LINE-n*2,8,amtdis);                       
            }
            else
            {   
                vduiClearBelow(8);
                CTOS_LCDTPrintXY(MAX_CHAR_PER_LINE-n*2,8,srDestIP);                     
            }
        }
        
    }

}

void vdCTOSS_GetMemoryStatus(char *Funname)
{
    ULONG ulUsedDiskSize = 0;
    ULONG ulTotalDiskSize = 0;
    ULONG ulUsedRamSize = 0;
    ULONG ulTotalRamSize = 0;

    ULONG ulAvailableRamSize = 0;
    ULONG ulAvailDiskSize = 0;
    
    UCHAR szUsedDiskSize[50];
    UCHAR szTotalDiskSize[50];
    UCHAR szUsedRamSize[50];
    UCHAR szTotalRamSize[50];
    
    UCHAR szAvailableRamSize[50];
    UCHAR szAvailableDiskSize[50];

    memset(szUsedDiskSize,0,sizeof(szUsedDiskSize));
    memset(szTotalDiskSize,0,sizeof(szTotalDiskSize));
    memset(szUsedRamSize,0,sizeof(szUsedRamSize));
    memset(szTotalRamSize,0,sizeof(szTotalRamSize));
    memset(szAvailableRamSize,0,sizeof(szAvailableRamSize));
    memset(szAvailableDiskSize,0,sizeof(szAvailableDiskSize));
    
    CTOS_SystemMemoryStatus( &ulUsedDiskSize , &ulTotalDiskSize, &ulUsedRamSize, &ulTotalRamSize );
    ulAvailableRamSize = ulTotalRamSize - ulUsedRamSize;
    ulAvailDiskSize = ulTotalDiskSize - ulUsedDiskSize;
    
    sprintf(szTotalDiskSize,"%s:%ld","Total disk",ulTotalDiskSize); 
    sprintf(szUsedDiskSize,"%s:%ld","Used   disk",ulUsedDiskSize);
    sprintf(szAvailableDiskSize,"%s:%ld","Avail disk",ulAvailDiskSize);
    
    sprintf(szTotalRamSize,"%s:%ld","Total RAM",ulTotalRamSize);    
    sprintf(szUsedRamSize,"%s:%ld","Used   RAM",ulUsedRamSize);
    sprintf(szAvailableRamSize,"%s:%ld","Avail RAM",ulAvailableRamSize);
    vdDebug_LogPrintf("[%s][%ld],[%ld][%ld][%ld]",Funname,ulUsedDiskSize,ulTotalRamSize,ulUsedRamSize,ulAvailableRamSize);

    CTOS_LCDTClearDisplay();
    
    CTOS_LCDTPrintXY(1, 1, szTotalDiskSize);
    CTOS_LCDTPrintXY(1, 2, szUsedDiskSize);
    CTOS_LCDTPrintXY(1, 3, szAvailableDiskSize);
    
    CTOS_LCDTPrintXY(1, 5, szTotalRamSize);
    CTOS_LCDTPrintXY(1, 6, szUsedRamSize);
    CTOS_LCDTPrintXY(1, 7, szAvailableRamSize);
    WaitKey(60);
    
}

int inCTOSS_CheckMemoryStatus()
{
#define SAFE_LIMIT_SIZE 5000

    ULONG ulUsedDiskSize = 0;
    ULONG ulTotalDiskSize = 0;
    ULONG ulUsedRamSize = 0;
    ULONG ulTotalRamSize = 0;

    ULONG ulAvailableRamSize = 0;
    ULONG ulAvailDiskSize = 0;
    
    UCHAR szUsedDiskSize[50];
    UCHAR szTotalDiskSize[50];
    UCHAR szUsedRamSize[50];
    UCHAR szTotalRamSize[50];
    
    UCHAR szAvailableRamSize[50];
    UCHAR szAvailableDiskSize[50];
    
    if (inMultiAP_CheckSubAPStatus() == d_OK)
        return d_OK;

    memset(szUsedDiskSize,0,sizeof(szUsedDiskSize));
    memset(szTotalDiskSize,0,sizeof(szTotalDiskSize));
    memset(szUsedRamSize,0,sizeof(szUsedRamSize));
    memset(szTotalRamSize,0,sizeof(szTotalRamSize));
    memset(szAvailableRamSize,0,sizeof(szAvailableRamSize));
    memset(szAvailableDiskSize,0,sizeof(szAvailableDiskSize));
    
    CTOS_SystemMemoryStatus( &ulUsedDiskSize , &ulTotalDiskSize, &ulUsedRamSize, &ulTotalRamSize );
    vdDebug_LogPrintf("[%ld],[%ld][%ld][%ld]",ulUsedDiskSize,ulTotalDiskSize,ulUsedRamSize,ulTotalRamSize);
    ulAvailableRamSize = ulTotalRamSize - ulUsedRamSize;
    ulAvailDiskSize = ulTotalDiskSize - ulUsedDiskSize;
    
    sprintf(szTotalDiskSize,"%s:%ld","Total disk",ulTotalDiskSize); 
    sprintf(szUsedDiskSize,"%s:%ld","Used   disk",ulUsedDiskSize);
    sprintf(szAvailableDiskSize,"%s:%ld","Avail disk",ulAvailDiskSize);
    
    sprintf(szTotalRamSize,"%s:%ld","Total RAM",ulTotalRamSize);    
    sprintf(szUsedRamSize,"%s:%ld","Used   RAM",ulUsedRamSize);
    sprintf(szAvailableRamSize,"%s:%ld","Avail RAM",ulAvailableRamSize);
    vdDebug_LogPrintf("ulAvailDiskSize[%ld],ulAvailableRamSize[%ld]",ulAvailDiskSize,ulAvailableRamSize);

    if (ulAvailDiskSize < SAFE_LIMIT_SIZE)
    {
        CTOS_LCDTClearDisplay();
        CTOS_LCDTPrintXY(1, 7, "Settle  soon");
        vdDisplayErrorMsg(1, 8,  "Insufficient Memory");
        return FAIL;
    }

    if (ulAvailableRamSize < SAFE_LIMIT_SIZE)
    {
        CTOS_LCDTClearDisplay();
        vdSetErrorMessage("Insufficient RAM");
        return FAIL;
    }
    
    return d_OK;
    
}

void vdCTOS_SyncHostDateTime()
{
    CTOS_RTC SetRTC;
    char szDate[4+1];
    char szTime[6+1];
    char szBuf[2+1];
    
    if(srTransRec.byOffline == CN_TRUE)
        return;
    CTOS_RTCGet(&SetRTC);
    vdDebug_LogPrintf("sys year[%02x],Date[%02x][%02x]time[%02x][%02x][%02x]",SetRTC.bYear,SetRTC.bMonth,SetRTC.bDay,SetRTC.bHour,SetRTC.bMinute,SetRTC.bSecond);
    
    vdDebug_LogPrintf("year[%02X],time[%02x:%02x:%02x]date[%02x][%02x]",SetRTC.bYear,srTransRec.szTime[0],srTransRec.szTime[1],srTransRec.szTime[2],srTransRec.szDate[0],srTransRec.szDate[1]);

    memset(szDate,0,sizeof(szDate));
    memset(szTime,0,sizeof(szTime));
    
    wub_hex_2_str(srTransRec.szDate, szDate, 2);
    wub_hex_2_str(srTransRec.szTime, szTime, 3);
    if((strlen(szDate)<=0) ||(strlen(szTime)<=0))
        return;
    sprintf(szBuf,"%02x",(unsigned int)atol(szDate)%100);
    wub_str_2_hex(szBuf, &(SetRTC.bDay), 2);

    sprintf(szBuf,"%02x",(unsigned int)atol(szDate)/100);
    wub_str_2_hex(szBuf, &(SetRTC.bMonth), 2);

    sprintf(szBuf,"%02x",(unsigned int)atol(szTime)/10000);
    wub_str_2_hex(szBuf, &(SetRTC.bHour), 2);

    sprintf(szBuf,"%02x",(unsigned int)atol(szTime)%10000/100);
    wub_str_2_hex(szBuf, &(SetRTC.bMinute), 2);

    sprintf(szBuf,"%02x",(unsigned int)atol(szTime)%100);
    wub_str_2_hex(szBuf, &(SetRTC.bSecond), 2);
    
    //Host date & time synchronization fix -- jzg 
    CTOS_RTCSet(&SetRTC);

    vdDebug_LogPrintf("set year[%02x],Date[%02x][%02x]time[%02x][%02x][%02x]",SetRTC.bYear,SetRTC.bMonth,SetRTC.bDay,SetRTC.bHour,SetRTC.bMinute,SetRTC.bSecond);
    
    return;
}

int file_exist (char *filename)
{
  struct stat buffer;   
  return (stat (filename, &buffer) == 0);
}



void vdCTOS_TxnsBeginInit(void)
{
    BYTE bEntryMode = 0;
	int inRet = d_NO;

    /*albert - do not prompt swipe/insert/etc... card*/
    if(srTransRec.byEntryMode == CARD_ENTRY_MSR || srTransRec.byEntryMode == CARD_ENTRY_ICC)
	    bEntryMode = srTransRec.byEntryMode;    	

    if(d_OK == inCTOS_ValidFirstIdleKey())
        bEntryMode = srTransRec.byEntryMode;
    
    memset( &srTransRec, 0x00, sizeof(TRANS_DATA_TABLE));

	//gcitra
	//inCLearTablesStructure();
	//gcitra

	//1128
	inFallbackToMSR = FAIL;

    if(0 != bEntryMode)
        srTransRec.byEntryMode = bEntryMode;

    vdSetErrorMessage("");
	vdCTOSS_SetWaveTransType(0);

    vdDebug_LogPrintf("vdCTOS_TxnsBeginInit check if main app");
//add for ECR only MianAP get the ECR command, if Sub AP will cannot error
	//if (inMultiAP_CheckMainAPStatus() == d_OK)
	if (inMultiAP_CheckSubAPStatus() != d_OK)//only 1 APP or main APP
	{
	    vdDebug_LogPrintf("vdCTOS_TxnsBeginInit check ECR on?[%d]", strTCT.fECR);
		if ((strTCT.fECR) &&  (fECRTxnFlg == 1))//glad0129 - only check if ECR triggered
	    {
	        vdDebug_LogPrintf("vdCTOS_TxnsBeginInit check Database exist");
	    	if (file_exist (DB_MULTIAP))
	    	{
	    	    vdDebug_LogPrintf("vdCTOS_TxnsBeginInit Read ECR Data");
	    		inRet = inCTOS_MultiAPGetData();
                vdDebug_LogPrintf("vdCTOS_TxnsBeginInit Read ECR Data ret[%d]", inRet);
	    		if(d_OK != inRet)
	    			return ;
	    	}
	    }

	}
}

void vdCTOS_TransEndReset(void)
{
    USHORT usTk1Len, usTk2Len, usTk3Len;
    BYTE szTk1Buf[TRACK_I_BYTES], szTk2Buf[TRACK_II_BYTES_50], szTk3Buf[TRACK_III_BYTES];
    char szErrMsg[30+1], szErrMsg1[30+1];
    
    vdDebug_LogPrintf("vdCTOS_TransEndReset ECR?[%d]", fGetECRTransactionFlg());
	//CTOS_LCDTClearDisplay();
	// patrick fix code 20141209
	clearLine(1);
	vduiClearBelow(2);
	vdSetATPBinRouteFlag(0);

	memset(&stRCDataAnalyze,0x00,sizeof(EMVCL_RC_DATA_ANALYZE));

    memset(szErrMsg,0x00,sizeof(szErrMsg));
    if (inGetErrorMessage(szErrMsg) > 0)
    {
        vdDisplayErrorMsg(1, 8, szErrMsg);
    }

    
    if(CARD_ENTRY_ICC == srTransRec.byEntryMode)
        vdRemoveCard();
    else
        CTOS_MSRRead(szTk1Buf, &usTk1Len, szTk2Buf, &usTk2Len, szTk3Buf, &usTk3Len);

    //if(!fGetECRTransactionFlg())
    //{
        memset( &srTransRec, 0x00, sizeof(TRANS_DATA_TABLE));
    //}
    
    CTOS_KBDBufFlush();

    inCTLOS_Updatepowrfail(PFR_IDLE_STATE);
    vdSetErrorMessage("");
	vdCTOSS_SetWaveTransType(0);

	//gcitra
	inCLearTablesStructure();
	//1128	
	inFallbackToMSR = FAIL;
	//gcitra

	//inMultiAP_Database_BatchDelete();
			//if(d_OK != bret)
			//{
			//	vdSetErrorMessage("MultiAP BatchDelete ERR");
			//}

	fBINVer = FALSE;

		//06112015
		fCommAlreadyOPen = FALSE; 		
		isPredial=0;
		//06112015

//enhance ecr
	//vdSetECRTransactionFlg(0);

		fManualSettle = FALSE;
		fAUTOManualSettle = FALSE;

//reset SMAC Flag
	fSMACTRAN = VS_FALSE;
    fAdviceTras = VS_FALSE;
	fnGlobalOrigHostEnable = 0;

	inReversalType =0;

    return;
}

void vdCTOS_SetTransEntryMode(BYTE bEntryMode)
{
    srTransRec.byEntryMode = bEntryMode;
}

void vdCTOS_SetTransType(BYTE bTxnType)
{
    srTransRec.byTransType = bTxnType;

    if (bTxnType == SALE)
			srTransRec.fOnlineSALE = CN_TRUE;
		else
			srTransRec.fOnlineSALE = CN_FALSE;
		
    inCTLOS_Updatepowrfail(PFR_IDLE_STATE);
}


short shCTOS_SetMagstripCardTrackData(BYTE* baTk1Buf, USHORT usTk1Len, BYTE* baTk2Buf, USHORT usTk2Len, BYTE* baTk3Buf, USHORT usTk3Len) //Invalid card reading fix -- jzg
{


	short shRet = d_OK;
	//int inTrack1AnalysisResult;

	memcpy(srTransRec.szTrack1Data, &baTk1Buf[1], (usTk1Len -3));
	srTransRec.usTrack1Len = (usTk1Len - 3);// REMOVE %, ? AND LRC


  if (usTk2Len > 40)
		usTk2Len = 40;		

	memcpy(srTransRec.szTrack2Data, &baTk2Buf[1], (usTk2Len - 3));
	srTransRec.usTrack2Len = (usTk2Len - 3);// REMOVE %, ? AND LRC

	memcpy(srTransRec.szTrack3Data, baTk3Buf, usTk3Len);
	srTransRec.usTrack3Len = usTk3Len;

	vdCTOS_SetTransEntryMode(CARD_ENTRY_MSR);

	//if (usTk1Len >= 20)
	//	vdAnalysisTrack1(&baTk1Buf[1], usTk1Len); 

	//if (usTk2Len >= 20)
	//	shRet = shAnalysisTrack2(&baTk2Buf[1], usTk2Len); //Invalid card reading fix -- jzg




	//remove later -- jzg
	vdDebug_LogPrintf("JEFF::TK1 = [%d][%s]", usTk1Len, baTk1Buf);
	//inTrack1AnalysisResult = 

	vdAnalysisTrack1(&baTk1Buf[1], usTk1Len); 

	//remove later -- jzg
	vdDebug_LogPrintf("JEFF::TK2 = [%d][%s]", usTk2Len, baTk2Buf);
	if (usTk2Len >= 20)
	{
		shRet = shAnalysisTrack2(&baTk2Buf[1], usTk2Len); //Invalid card reading fix -- jzg

		vdDebug_LogPrintf("shAnalysisTrack2 shRet[%d]", shRet);

		
		if(shRet != d_OK){
			//if (inTrack1AnalysisResult == INVALID_CARD)
				return INVALID_CARD;
			//else
			//	d_OK;
		}
	}
	else
	{
		vdDebug_LogPrintf("JEFF::T2 INVALID! [%d]", usTk2Len);
		//if (inTrack1AnalysisResult == INVALID_CARD)
			return INVALID_CARD;
		//else
			//return d_OK;
	}

		

	return shRet;
}

void vdCTOS_ResetMagstripCardData(void)
{
    memset(srTransRec.szTrack1Data, 0x00, sizeof(srTransRec.szTrack1Data));
    srTransRec.usTrack1Len=0;

    memset(srTransRec.szTrack2Data, 0x00, sizeof(srTransRec.szTrack2Data));
    srTransRec.usTrack2Len=0;

    memset(srTransRec.szTrack3Data, 0x00, sizeof(srTransRec.szTrack3Data));
    srTransRec.usTrack3Len=0;

    memset(srTransRec.szCardholderName, 0x00, sizeof(srTransRec.szCardholderName));

    memset(srTransRec.szPAN, 0x00, sizeof(srTransRec.szPAN));
    srTransRec.byPanLen = 0;
    memset(srTransRec.szExpireDate, 0x00, sizeof(srTransRec.szExpireDate));
    memset(srTransRec.szServiceCode, 0x00, sizeof(srTransRec.szServiceCode));

    srTransRec.byEntryMode = 0;
}

int inCTOS_CheckEMVFallbackTimeAllow(char* szStartTime, char* szEndTime, int inAllowTime)
{
    char szTempBuf[20];
    int inHH1, inHH2, inMM1, inMM2, inSS1, inSS2, inGap;

    if ((strlen(szStartTime) == 0) || (strlen(szStartTime) == 0)) 
        return (d_OK);

    if(0 == atoi(szStartTime))
        return (d_OK);

    memset(szTempBuf, 0, sizeof(szTempBuf));
    memcpy(szTempBuf, &szStartTime[0], 2);
    inHH1 = atoi(szTempBuf);

    memset(szTempBuf, 0, sizeof(szTempBuf));
    memcpy(szTempBuf, &szStartTime[2], 2);
    inMM1 = atoi(szTempBuf);

    memset(szTempBuf, 0, sizeof(szTempBuf));
    memcpy(szTempBuf, &szStartTime[4], 2);
    inSS1 = atoi(szTempBuf);

    memset(szTempBuf, 0, sizeof(szTempBuf));
    memcpy(szTempBuf, &szEndTime[0], 2);
    inHH2 = atoi(szTempBuf);

    memset(szTempBuf, 0, sizeof(szTempBuf));
    memcpy(szTempBuf, &szEndTime[2], 2);
    inMM2 = atoi(szTempBuf);

    memset(szTempBuf, 0, sizeof(szTempBuf));
    memcpy(szTempBuf, &szEndTime[4], 2);
    inSS2 = atoi(szTempBuf);

    inGap = ((inHH2*3600)+(inMM2*60)+inSS2) - ((inHH1*3600)+(inMM1*60)+inSS1);

    if (inGap < 0 )
        return (d_OK);

    if(inGap > inAllowTime)
        return (d_NO);

    return d_OK;;

}


int inCTOS_CheckEMVFallback(void)
{
    BYTE szFallbackStartTime[20];
    BYTE szCurrentTime[20];
    int inRet;
    CTOS_RTC SetRTC;
    
    if (strCDT.fChkServiceCode)
    {
        if(((srTransRec.szServiceCode[0] == '2') || (srTransRec.szServiceCode[0] == '6'))
            && (CARD_ENTRY_ICC != srTransRec.byEntryMode))
        {
            if(inFallbackToMSR == SUCCESS)
            {
                CTOS_RTCGet(&SetRTC);
                sprintf(szCurrentTime,"%02d%02d%02d",SetRTC.bHour,SetRTC.bMinute,SetRTC.bSecond);
                inRet = inCTOS_CheckEMVFallbackTimeAllow(strTCT.szFallbackTime, szCurrentTime, strTCT.inFallbackTimeGap);

                inFallbackToMSR = FAIL;
                memset(strTCT.szFallbackTime,0x00,sizeof(strTCT.szFallbackTime));
                
                if(d_OK != inRet)
                    return FAIL;
                else
                	{
                    vdCTOS_SetTransEntryMode(CARD_ENTRY_FALLBACK);
                	}
            }
            else
                return FAIL;
        }
    }

    return d_OK;;
}

int inCTOS_CheckIssuerEnable(void)
{
    int inEnable = 0;

    inEnable = strIIT.inCheckHost;
    vdDebug_LogPrintf("inCTOS_CheckIssuerEnable: [%d]", inEnable);

    if(0 == inEnable)
    {
       vdSetErrorMessage("TRANS NOT ALLWD");
       return(ST_ERROR);
    }
    else
        return(ST_SUCCESS);
}


int inCTOS_CheckTranAllowd(void)
{
    int inEnable = 0;
    
    if (inMultiAP_CheckSubAPStatus() == d_OK)
        return d_OK;

    inEnable = strPIT.fTxnEnable;
    vdDebug_LogPrintf("inCTOS_CheckTranAllowd: [%d]", inEnable);
    
    if(0 == inEnable)
    {
       vdSetErrorMessage("TRANS NOT ALLWD");
       return(ST_ERROR);
    }
    else
        return(ST_SUCCESS);
}

int inCTOS_CheckMustSettle(void)
{
    int inEnable = 0;

    inEnable = strMMT[0].fMustSettFlag;
    
    if(1 == inEnable) 
    {
       vdSetErrorMessage("MUST SETTLE");
       return(ST_ERROR);
    }
    else
        return(ST_SUCCESS);
}

void vdCTOS_FormatPAN(char *szFmt,char* szInPAN,char* szOutPAN)
{
    char szCurrentPAN[20];
    int inFmtIdx = 0;
    int inPANIdx = 0;
    int inFmtPANSize;
    
    inFmtPANSize = strlen(szFmt);
    if (strlen(szFmt) == 0) 
    {
      strncpy(szOutPAN,szInPAN,inFmtPANSize);
      return;
    }

    memset(szCurrentPAN, 0x00, sizeof(szCurrentPAN));
    memcpy(szCurrentPAN,szInPAN,strlen(szInPAN));

    while(szFmt[inFmtIdx]!= 0x00)
    {
      if(szFmt[inFmtIdx] == 'N' || szFmt[inFmtIdx] == 'n')
      {
          szOutPAN[inFmtIdx] = szCurrentPAN[inPANIdx]; 
          inFmtIdx++;
          inPANIdx++;
      }
      else if (szFmt[inFmtIdx] == 'X' || szFmt[inFmtIdx] == 'x' ||szFmt[inFmtIdx] == '*')   
      {
                     
          memcpy(&szOutPAN[inFmtIdx],&szFmt[inFmtIdx],1);
          inFmtIdx++;
          inPANIdx++;
      }
      else if (!isdigit(szFmt[inFmtIdx]))
      {
          szOutPAN[inFmtIdx] = szFmt[inFmtIdx];
          inFmtIdx++;
      }
    }

    //while(szCurrentPAN[inPANIdx]!= 0x00)
    //{
    // szOutPAN[inFmtIdx] = szCurrentPAN[inPANIdx]; 
    // inFmtIdx++;
    // inPANIdx++;
    //}

    return;
}

//0721
void vdCTOS_FormatPAN2(char *szFmt,char* szInPAN,char* szOutPAN)
{
    char szCurrentPAN[20];
    int inFmtIdx = 0;
    int inPANIdx = 0;
    int inFmtPANSize;
		int inPANless4;

		int i=0;
    
    inFmtPANSize = strlen(szInPAN);
		
		inPANless4 = inFmtPANSize - 4;
		

		
    if (strlen(szFmt) == 0) 
    {
      strncpy(szOutPAN,szInPAN,inFmtPANSize);
      return;
    }

    memset(szCurrentPAN, 0x00, sizeof(szCurrentPAN));
    memcpy(szCurrentPAN,szInPAN,strlen(szInPAN));

    while(i<=inFmtPANSize)
    {
      
		  if (i >= inPANless4){

	 
        if (szFmt[inFmtIdx] == ' '){
          szOutPAN[inFmtIdx] = szFmt[inFmtIdx];
          inFmtIdx++;
				}else{		
					szOutPAN[inFmtIdx] = szCurrentPAN[inPANIdx]; ; 
					inFmtIdx++;
					inPANIdx++;
					i++;
				}
				continue;

		  }
				
       
      if(szFmt[inFmtIdx] == 'N' || szFmt[inFmtIdx] == 'n')
      {
          szOutPAN[inFmtIdx] = szCurrentPAN[inPANIdx]; 
          inFmtIdx++;
          inPANIdx++;
					i++;
      }
      else if (szFmt[inFmtIdx] == 'X' || szFmt[inFmtIdx] == 'x' ||szFmt[inFmtIdx] == '*')   
      {
                     
          memcpy(&szOutPAN[inFmtIdx],&szFmt[inFmtIdx],1);
          inFmtIdx++;
          inPANIdx++;
					i++;
      }
      else if (!isdigit(szFmt[inFmtIdx]))
      {
          szOutPAN[inFmtIdx] = szFmt[inFmtIdx];
          inFmtIdx++;
      }
    }

    //while(szCurrentPAN[inPANIdx]!= 0x00)
    //{
    // szOutPAN[inFmtIdx] = szCurrentPAN[inPANIdx]; 
    // inFmtIdx++;
    // inPANIdx++;
    //}

    return;
}


//0721

void vdCTOS_FormatAmount(char *szFmt,char* szInAmt,char* szOutAmt)
{
    char szCurrentAmt[20];
    char szBuf[20];
    char szFinalFmt[20];
    int inFmtIdx = 0;
    int inTotaActNum = 0;
    int inPadNum = 0;
    int inignore = 0;
    int inAmtIdx = 0;
    int inFmtAmtSize;
    
    inFmtAmtSize = strlen(szFmt);
    if (strlen(szFmt) == 0) 
    {
      strncpy(szOutAmt,szInAmt,inFmtAmtSize);
      return;
    }

    inFmtIdx = 0;
    while(szFmt[inFmtIdx]!= 0x00)
    {
        if(szFmt[inFmtIdx] == 'n')
            inPadNum ++;

        if(szFmt[inFmtIdx] == 'N' || szFmt[inFmtIdx] == 'n')
            inTotaActNum ++;

        inFmtIdx ++;
    }

    inFmtIdx = 0;
    while(0x30 == szInAmt[inFmtIdx])
    {
        inFmtIdx ++;
    }

    memset(szCurrentAmt, 0x00, sizeof(szCurrentAmt));
    strcpy(szCurrentAmt,&szInAmt[inFmtIdx]);

    if(inPadNum > strlen(szCurrentAmt))
    {
        memset(szBuf, 0x00, sizeof(szBuf));
        memset(szBuf, 0x30, inPadNum-strlen(szCurrentAmt));
        strcat(szBuf, szCurrentAmt);

        strcpy(szCurrentAmt, szBuf);
        strcpy(szFinalFmt, szFmt);
    }

    if(inTotaActNum > strlen(szCurrentAmt))
    {
        inFmtIdx = 0;
        while(szFmt[inFmtIdx]!= 0x00)
        {
            if(szFmt[inFmtIdx] == 'N' || szFmt[inFmtIdx] == 'n')
                inignore ++;

            inFmtIdx ++;
            
            if((inignore >= (inTotaActNum - strlen(szCurrentAmt))) && (szFmt[inFmtIdx] == 'N' || szFmt[inFmtIdx] == 'n'))
                break;
        }

        strcpy(szFinalFmt, &szFmt[inFmtIdx]);
    }

    inFmtIdx = 0;
    inAmtIdx = 0;
    while(szFinalFmt[inFmtIdx]!= 0x00)
    {
      if(szFinalFmt[inFmtIdx] == 'N' || szFinalFmt[inFmtIdx] == 'n')
      {
          szOutAmt[inFmtIdx] = szCurrentAmt[inAmtIdx]; 
          inFmtIdx++;
          inAmtIdx++;
      }
      else if ((szFinalFmt[inFmtIdx]) == ' ' || (szFinalFmt[inFmtIdx]) == ',' || (szFinalFmt[inFmtIdx]) == '.')
      {
          szOutAmt[inFmtIdx] = szFinalFmt[inFmtIdx];
          inFmtIdx++;
      }
      else
      {
        inFmtIdx ++ ;
      }
    }

    szOutAmt[inFmtIdx] = 0x00;

    return;
}


int inGetIssuerRecord(int inIssuerNumber) 
{
    int inRec = 1;
    do 
    {
        //if (inIITRead(inRec) != d_OK) 
 				if (inIITRead(inIssuerNumber) != d_OK)        
        {
            return(d_NO);
        }
        inRec++;
    } while (inIssuerNumber != strIIT.inIssuerNumber);

    return(d_OK);
}



#if 0
int inCTOS_DisplayCardTitle(USHORT usCardTypeLine, USHORT usPANLine)
{
    char szStr[50 + 1]; 
    USHORT EMVtagLen;
    BYTE   EMVtagVal[64];
    BYTE szTemp1[30+1];
	//gcitra
    unsigned char key;


	CTOS_LCDTClearDisplay();
	vdDispTransTitle(srTransRec.byTransType);
	

   // CTOS_LCDTClearDisplay();
	//gcitra

    memset(szStr,0x00,sizeof(szStr));
    memset(EMVtagVal,0x00,sizeof(EMVtagVal));
  
    if (srTransRec.byEntryMode == CARD_ENTRY_ICC)
    {    
        EMVtagLen = 0;
        
        if(EMVtagLen > 0)
        {
            sprintf(szStr, "%s", EMVtagVal);
            vdDebug_LogPrintf("Card label(str): %s",szStr);       
        }
    }

    if(0 == strlen(szStr))
    {
        sprintf(szStr, "%s", strCDT.szCardLabel);
        vdDebug_LogPrintf("Card label: %s",strCDT.szCardLabel);
    }
        
    memset(szTemp1,0,sizeof(szTemp1));
    vdCTOS_FormatPAN(strIIT.szPANFormat, srTransRec.szPAN, szTemp1);

    if(0>= usCardTypeLine || 0 >= usPANLine)
    {
        usCardTypeLine = 3;
        usPANLine = 4;
    }

	//gcitra
	
    CTOS_LCDTPrintXY(1, usCardTypeLine, szStr);
  	//setLCDPrint27(usCardTypeLine, DISPLAY_POSITION_RIGHT, szStr);
    CTOS_LCDTPrintXY(1, usPANLine, szTemp1);



    //gcitra-add PAN confirmation
	if (strTCT.fConfirmPAN){
		key=WaitKey(15);

		if(key != d_KBD_ENTER)
			return d_NO;		
	}
	//gcitra
    
    return(d_OK);
}
#endif

int inCTOS_DisplayCardTitle(USHORT usCardTypeLine, USHORT usPANLine)
{
    char szStr[50 + 1]; 
    USHORT EMVtagLen;
    BYTE   EMVtagVal[64];
    BYTE szTemp1[30+1];

		BYTE szPAN1[20+1];
		BYTE szPAN2[20+1];
		int inRemaining=0;

		
    BYTE szTitle[16+1];


	//gcitra-0806
		if (inMultiAP_CheckSubAPStatus() == d_OK)
		   return d_OK;
	//gcitra-0806	



 

	CTOS_LCDTClearDisplay();

	
	//1102
#if 0
	if (srTransRec.byTransType != BIN_VER){ //aaa temp tatanong ko kay glads ito
		vdDebug_LogPrintf("Issuer logo = [%s]", strIIT.szIssuerLogo);
		if ((strCDT.HDTid != 5) && (strCDT.fFleetCard != TRUE)) /* BDOCLG-00319: Revised no logo for fleet cards -- jzg */
			displayAppbmpDataEx(1,1, strIIT.szIssuerLogo);
	
	}
#endif
	//1102 




  memset(szTitle, 0x00, sizeof(szTitle));
	szGetTransTitle(srTransRec.byTransType, szTitle);

//issue-00399 - Fix overlapping display for installment
	if ((fInstApp == TRUE) && (srTransRec.byTransType == SALE))
		strcpy(szTitle, "INSTALL");
//end 


#if 1

    memset(szStr,0x00,sizeof(szStr));
    memset(EMVtagVal,0x00,sizeof(EMVtagVal));

	//Display Issuer logo: Clear the display first, then re-display trans title - start -- jzg
	//CTOS_LCDTClearDisplay(); 
	//DispTransTitle(srTransRec.byTransType);


	/* BDO-00141: Used setLCDPrint instead of setLCDPrint27 to avoid garbage display - start -- jzg */	
	//setLCDPrint27(1, DISPLAY_POSITION_RIGHT, strCDT.szCardLabel);
	//setLCDPrint27(2, DISPLAY_POSITION_RIGHT, szTitle);

	if (srTransRec.byTransType != BIN_VER){ //aaa temp tatanong ko kay glads ito
		vdDebug_LogPrintf("Issuer logo = [%s]", strIIT.szIssuerLogo);
		if ((strCDT.HDTid != 5) && (strCDT.fFleetCard != TRUE)) /* BDOCLG-00319: Revised no logo for fleet cards -- jzg */
			displayAppbmpDataEx(1,1, strIIT.szIssuerLogo);
	
	}
	
	CTOS_LCDTPrintAligned(1, strCDT.szCardLabel, d_LCD_ALIGNRIGHT);
	CTOS_LCDTPrintAligned(2, szTitle, d_LCD_ALIGNRIGHT);

	//Display Issuer logo: Clear the display first, then re-display trans title - end -- jzg
  
    if (srTransRec.byEntryMode == CARD_ENTRY_ICC)
    {    
        EMVtagLen = 0;
        
        if(EMVtagLen > 0)
        {
            sprintf(szStr, "%s", EMVtagVal);
            vdDebug_LogPrintf("Card label(str): %s",szStr);       
        }
    }

/*
    if(0 == strlen(szStr))
    {
        //1102
        if (srTransRec.byTransType != BIN_VER){
        	sprintf(szStr, "%s", strCDT.szCardLabel);
        	vdDebug_LogPrintf("Card label: %s",strCDT.szCardLabel);
        }
		//1102
    }
*/
    strcpy(szStr,"PAN:");
    memset(szTemp1,0,sizeof(szTemp1));
	if (strTCT.fMaskPanDisplay == TRUE){
    	//vdCTOS_FormatPAN(strIIT.szPANFormat, srTransRec.szPAN, szTemp1);
    	strcpy(szTemp1, srTransRec.szPAN);	
		cardMasking(szTemp1, 3);		
	}else{ 	
		vdCTOS_FormatPAN2(strTCT.DisplayPANFormat, srTransRec.szPAN, szTemp1);
	}	


//	displayAppbmpDataEx(140, 35, "mc.bmp"); 

    if(0>= usCardTypeLine || 0 >= usPANLine)
    {
        usCardTypeLine = 5;
        usPANLine = 6;
    }
	//Display Issuer logo: Clear the display first, then re-display trans title - end -- jzg
    
    CTOS_LCDTPrintXY(1, usCardTypeLine, szStr);

//0721
    if (strlen(szTemp1) > 20){
			memset(szPAN1, 0x00, sizeof(szPAN1));
			memset(szPAN2, 0x00, sizeof(szPAN2));
			inRemaining = strlen(szTemp1) - 20;

			memcpy(szPAN1, szTemp1, 20);
			memcpy(szPAN2, &szTemp1[20], inRemaining);
			
    	//CTOS_LCDTPrintXY(1, usPANLine, szPAN1);
			
			setLCDPrint(7, DISPLAY_POSITION_RIGHT, szPAN1); /* BDO-00141: Used setLCDPrint instead of setLCDPrint27 to avoid garbage display -- jzg */	
    	CTOS_LCDTPrintXY(1, 8, szPAN2);

    }else
    	//CTOS_LCDTPrintXY(1, usPANLine, szTemp1);
    	
		setLCDPrint(7, DISPLAY_POSITION_RIGHT, szTemp1); /* BDO-00141: Used setLCDPrint instead of setLCDPrint27 to avoid garbage display -- jzg */
//0721
#endif    
    return(d_OK);
}


short inCTOS_LoadCDTIndex(void)
{
	signed int inRetVal;
    short   shStatus;
    int  i=0, selectedRDTIndex;
    BYTE    shSuitableRDTIndex[10];
    int inIssuer = 0;
    int inNumberOfMatches = 0;
    int inRecNumArray[4];
    char szChoiceMsg[20 + 1];
    int    inCardLen, j;
    int inMaxCDTid = 0;
    int inFindRecordNum=0;
             
             
    memset(szChoiceMsg, 0x00, sizeof(szChoiceMsg));
 
    CTOS_LCDTClearDisplay();
	//gcitra-0728
    //CTOS_LCDTPrintXY(1, 8, "Checking Card... ");
	//gcitra-0728
 
    inCDTReadMulti(srTransRec.szPAN, &inFindRecordNum);
    if(inFindRecordNum == 0)
    {
    	vdDebug_LogPrintf("Not find in CDT");
        vdSetErrorMessage("CARD NOT SUPPORTED");
        return INVALID_CARD;
    }

		//BDO PHASE 2: [Fix for manual entry] -- glady
    #if 0
    for(j=0;j<inFindRecordNum;j++)
    {
    	//if (!(strTCT.fDebitFlag == VS_FALSE && strMCDT[j].inType == DEBIT_CARD) && !(!strMCDT[j].fManEntry && srTransRec.byEntryMode == CARD_ENTRY_MANUAL))
		if (!(strTCT.fDebitFlag == VS_FALSE && strMCDT[j].inType == DEBIT_CARD) && !(strMCDT[j].fManEntry && srTransRec.byEntryMode == CARD_ENTRY_MANUAL)) //BDO: should get correct record during manual entry -- jzg
    	{
        	if ((strMCDT[j].inType == DEBIT_CARD) || (strMCDT[j].inType == EBT_CARD) || (strMCDT[j].IITid != inIssuer))
      		{
            	if (strMCDT[j].inType != DEBIT_CARD && strMCDT[j].inType != EBT_CARD)
        			inIssuer = strMCDT[j].IITid;
 
        		inRecNumArray[inNumberOfMatches++] = strMCDT[j].CDTid;
				
        		if(inNumberOfMatches > 0)
              		break;
 
                if (inNumberOfMatches > 1)
                    szChoiceMsg[strlen(szChoiceMsg)] = '~';
 
          		switch (strMCDT[j].inType)
          		{
                    case DEBIT_CARD:
              			break;
            		case EBT_CARD:
              			break;
            		case PURCHASE_CARD:
              			break;
            		default:                   
              			break;
          		}
 
          		if (inNumberOfMatches > 3)
              		break;
			}
      	}
    }
		#endif

		inNumberOfMatches = 1;
		inRecNumArray[0] = strMCDT[0].CDTid;
		//BDO PHASE 2: [Fix for manual entry] -- glady

    if (inNumberOfMatches == 1)
    {
        inRetVal = inRecNumArray[0];
    }
    else if (inNumberOfMatches > 1)
    {
        CTOS_LCDTClearDisplay();

				/* BDO CLG: Fleet card support - start -- jzg */
				//if(srTransRec.fFleetCard == TRUE)
				//	vdDispTransTitle(FLEET_SALE);
				//else
				/* BDO CLG: Fleet card support - end -- jzg */	
	        vdDispTransTitle(srTransRec.byTransType);
    }
 
    if (inRetVal >= 0)
    {
        inCDTRead(inRetVal);
        srTransRec.CDTid = inRetVal;// save the current CDT that is loaded
 
        /* Get the CDT also for card labels */
        inGetIssuerRecord(strCDT.IITid);
    }
    else
    {
        vdDebug_LogPrintf("Not find in CDT");
        vdSetErrorMessage("CARD NOT SUPPORTED");
        return INVALID_CARD;
    }

		//-----------------------------------------------------
		vdDebug_LogPrintf("LOAD CDT INDEX [START]");
		vdDebug_LogPrintf("strCDT.CDTid[%d]", strCDT.CDTid);
		vdDebug_LogPrintf("strCDT.HDTid[%d]", strCDT.HDTid);
		vdDebug_LogPrintf("strCDT.IITid[%d]", strCDT.IITid);
		vdDebug_LogPrintf("strCDT.szPANLo[%s]", strCDT.szPANLo);
		vdDebug_LogPrintf("strCDT.szPANHi[%s]", strCDT.szPANHi);
		vdDebug_LogPrintf("strCDT.szCardLabel[%s]", strCDT.szCardLabel);
		vdDebug_LogPrintf("strCDT.fManEntry[%d]", strCDT.fManEntry);
		vdDebug_LogPrintf("strCDT.inType[%d]", strCDT.inType);
		
		vdDebug_LogPrintf("strCDT.fPANCatchAll[%d]", strCDT.fPANCatchAll);
		vdDebug_LogPrintf("LOAD CDT INDEX [END  ]");
		//-----------------------------------------------------

    /* Check for proper card length */
    inCardLen = strlen(srTransRec.szPAN);

	vdDebug_LogPrintf("card len gcitra [%d]- %d-%d",inCardLen, strCDT.inMinPANDigit, strCDT.inMaxPANDigit);
    if ((inCardLen < strCDT.inMinPANDigit) ||
       (inCardLen > strCDT.inMaxPANDigit))
    {
        vdDebug_LogPrintf("BAD CARD LEN");
        vdSetErrorMessage("BAD CARD LEN");
        return INVALID_CARD;
    }
		
    if (strCDT.fluhnCheck == VS_TRUE)   /* Check Luhn */
    {
        if (chk_luhn(srTransRec.szPAN))
        {
            vdDisplayErrorMsg(1, 8, "INVALID LUHN");
            return INVALID_CARD;
        }
    }
 
 
    if (strTCT.fDebitFlag != DEBIT && strCDT.inType == DEBIT_CARD )
    {
        vdDisplayErrorMsg(1, 8, "READ CARD FAILED");
        return INVALID_CARD;
    }
 
    if(strCDT.fExpDtReqd)
    {
        if(shChk_ExpireDate() != d_OK)
        {
            vdDisplayErrorMsg(1, 8, "CARD EXPIRED");
            return CARD_EXPIRED;
        }
    }
   
    //for save Accum file
    srTransRec.IITid= strCDT.IITid;
    srTransRec.HDTid = strCDT.HDTid;
    srTransRec.inCardType = strCDT.inType;

	srTransRec.fFleetCard = strCDT.fFleetCard; // BDO CLG: Fleet card support -- jzg

	/* BDO CLG: Fleet card support - start -- jzg */
	//if(srTransRec.fFleetCard == TRUE)
	//{
	//	if(strCDT.fFleetCard != TRUE)
	//	{
    //    	vdDebug_LogPrintf("NOT FLEET CARD!");
    //    	vdSetErrorMessage("CARD NOT SUPPORTED");
	//		return INVALID_CARD;
	//	}
	//}
	/* BDO CLG: Fleet card support - end -- jzg */
 
    CTOS_LCDTClearDisplay();
//    CTOS_LCDTPrintXY(1, 8, "                   "); 
    return d_OK;
}


int inCTOS_EMVCardReadProcess (void)
{
    short shResult = 0;
    USHORT usMsgFailedResult = 0;

		CTOS_LCDTClearDisplay();

     
    vdDebug_LogPrintf("-------shCT0S_EMVInitialize1---[%d]--",shResult); 
    shResult = shCTOS_EMVAppSelectedProcess();
    
    vdDebug_LogPrintf("-------shCT0S_EMVInitialize---[%d]--",shResult); 

    if(shResult == EMV_CHIP_FAILED)
    {
        usMsgFailedResult = MSG_TRANS_ERROR;
        return usMsgFailedResult;
    }
    else if(shResult == EMV_USER_ABORT)
    {
        usMsgFailedResult = MSG_USER_CANCEL;
        return usMsgFailedResult;
    }
    else if(shResult == EMV_TRANS_NOT_ALLOWED)
		{	
			usMsgFailedResult = EMV_TRANS_NOT_ALLOWED;
			return usMsgFailedResult;
    }

    shCTOS_EMVGetChipDataReady();

    return (d_OK);
}


int inCTOS_ManualEntryProcess (BYTE *szPAN)
{
    USHORT  usMaxLen = 19;
    BYTE    szTempBuf[10];
    BYTE    bDisplayStr[MAX_CHAR_PER_LINE+1];
		char    szTitle[20+1];

    //CTOS_LCDTClearDisplay();
    vdDispTransTitle(srTransRec.byTransType);
#if 1
	if ((srTransRec.byTransType == BALANCE_INQUIRY) || (srTransRec.byTransType == SMAC_BALANCE))
		{			
		CTOS_LCDTPrintXY(1, 3, "Swipe/Cancel");
	}
	else
    {
       szGetTransTitle(srTransRec.byTransType,szTitle);
       vdDebug_LogPrintf("AAA - szTitle[%s] fInstApp[%d]", szTitle, fInstApp);
       if ((srTransRec.byTransType == SALE) || (srTransRec.byTransType == CASH_ADVANCE))
       {
          if(fInstApp==FALSE)
          {
             CTOS_LCDTPrintXY(1, 3, "SWIPE/INSERT/ENTER");
             CTOS_LCDTPrintXY(1, 4, "TAP CARD"); //aaronnino for BDOCLG ver 9.0 fix on issue #00125 Incorrect terminal display 
          }
          else
          {
             CTOS_LCDTPrintXY(1, 3, "SWIPE/INSERT/ENTER");
             CTOS_LCDTPrintXY(1, 4, "CANCEL"); 
          }
       }
    }
	#endif
    // patrick add code 20141209	   
    szPAN[0] = chGetFirstIdleKey();

    if(getCardNO(szPAN) != d_OK)
    {
        return USER_ABORT;
    }

    CTOS_LCDTClearDisplay();
    vdDispTransTitle(srTransRec.byTransType);
    setLCDPrint(4, DISPLAY_POSITION_LEFT, "CARD NO: ");
    memset(bDisplayStr, 0x00, sizeof(bDisplayStr));
    memset(bDisplayStr, 0x20, usMaxLen*2);
    strcpy(&bDisplayStr[(usMaxLen-strlen(szPAN))*2], szPAN);
    CTOS_LCDTPrintXY(MAX_CHAR_PER_LINE-usMaxLen*2, 5, bDisplayStr);
    setLCDPrint(7, DISPLAY_POSITION_LEFT, "EXPIRY DATE(MM/YY):");
    
    memset(szTempBuf,0,sizeof(szTempBuf));
    if(getExpDate(szTempBuf) != d_OK)
    {
        return USER_ABORT;
    }
    wub_str_2_hex(szTempBuf, &srTransRec.szExpireDate[1], 2);
    wub_str_2_hex(&szTempBuf[2], srTransRec.szExpireDate, 2);
    CTOS_KBDBufFlush ();

    vdCTOS_SetTransEntryMode(CARD_ENTRY_MANUAL);
    return d_OK;
}


#if 1
int inCTOS_GetCardFields(void)
{
    USHORT EMVtagLen;
    BYTE   EMVtagVal[64];
    BYTE byKeyBuf;
    BYTE bySC_status;
    BYTE byMSR_status;
    BYTE szTempBuf[10];
    USHORT usTk1Len, usTk2Len, usTk3Len;
    BYTE szTk1Buf[TRACK_I_BYTES], szTk2Buf[TRACK_II_BYTES_50], szTk3Buf[TRACK_III_BYTES];
    usTk1Len = TRACK_I_BYTES ;
    usTk2Len = TRACK_II_BYTES_50 ;
    usTk3Len = TRACK_III_BYTES ;
    int  usResult;

	CTOS_RTC SetRTC;

	//0826
	int inChipTries=0;
	int inEntryMode=0;	
	/*
	1= insert only
	2= swipe only
	0= will accept al
	*/
	
	#define INSERT_ONLY 1
	#define SWIPE_ONLY  2
	#define READ_ALL 0
	//0826

	short shReturn = d_OK; //Invalid card reading fix -- jzg

	/* BDO CLG: MOTO setup -- jzg */
	int inMOTOResult;

	DebugAddSTR("inCTOS_GetCardFields","Processing...",20);

	/* BDO CLG: MOTO setup - start -- jzg */
	if (strTCT.fMOTO == 1)
	{
		
		CTOS_LCDTClearDisplay();

		//issue#00159
		if(srTransRec.byTransType == BIN_VER)
		{
			vdDisplayErrorMsg(1, 8, "TRANS NOT ALLWD");
			//CTOS_KBDBufFlush();
			return USER_ABORT;
		}
		//issue00159
		 
		vdDispTransTitle(srTransRec.byTransType);
		//CTOS_TimeOutSet (TIMER_ID_1 , GET_CARD_DATA_TIMEOUT_VALUE);
		CTOS_TimeOutSet (TIMER_ID_1 , inGetIdleTimeOut(FALSE)); /*BDO: Parameterized idle timeout --sidumili*/
		
		while (1)
		{
			CTOS_LCDTPrintXY(1, 3, "Enter/Cancel");
			
			if(CTOS_TimeOutCheck(TIMER_ID_1) == d_YES)
			{
				return READ_CARD_TIMEOUT ;
			}
			
			CTOS_KBDInKey(&byKeyBuf);
			if(byKeyBuf)
			{
				CTOS_KBDGet(&byKeyBuf);
				switch(byKeyBuf)
				{
					case d_KBD_0:
					case d_KBD_1:
					case d_KBD_2:
					case d_KBD_3: 	
					case d_KBD_4:
					case d_KBD_5:
					case d_KBD_6:
					case d_KBD_7:
					case d_KBD_8:
					case d_KBD_9:
					case d_KBD_CANCEL:
						if (byKeyBuf == d_KBD_CANCEL)
						{
							CTOS_KBDBufFlush();
							return USER_ABORT;
						}
					 
						memset(srTransRec.szPAN, 0x00, sizeof(srTransRec.szPAN));
						
						vdSetFirstIdleKey(byKeyBuf);
						vdDebug_LogPrintf("szPAN2[%s]", srTransRec.szPAN);
							 
						//get the card number and ger Expire Date
						if (d_OK != inCTOS_ManualEntryProcess(srTransRec.szPAN))
						{
							vdSetFirstIdleKey(0x00);
							CTOS_KBDBufFlush ();
							return USER_ABORT;
						}
						
						inMOTOResult = inCTOS_LoadCDTIndex();
						//Load the CDT table
						if (d_OK != inMOTOResult)
						{
							CTOS_KBDBufFlush();
							return USER_ABORT;
						}

                        
						strcpy(srTransRec.szCardLable, strIIT.szIssuerLabel);
						//issue#-00159
						#if 0
						if(strCDT.fManEntry == FALSE)
						{
							vdDisplayErrorMsg(1, 8, "MKE NOT ALLWD");
							CTOS_KBDBufFlush();
							return USER_ABORT;
						}
						#endif
						//issue00159
						
						return d_OK; //BDO-00160: To properly exit the function if there's a valid entry -- jzg
						break;
				}
			}
		}
		
		return d_OK;
		
	}
	/* BDO CLG: MOTO setup - end -- jzg */

		if (fIdleInsert == TRUE){
		
				CTOS_SCStatus(d_SC_USER, &bySC_status);
				if (!(bySC_status & d_MK_SC_PRESENT)){
					fEntryCardfromIDLE = FALSE;
					fIdleInsert=FALSE;
					srTransRec.byEntryMode = 0;
				}
		}
	
	
    if (inMultiAP_CheckSubAPStatus() == d_OK)
        return d_OK;
	
	//gcitra-0806
	CTOS_LCDTClearDisplay();
	//gcitra-0806

	// patrick fix code 20141222 case 179
	if (fEntryCardfromIDLE != TRUE)
		byMSR_status = CTOS_MSRRead(szTk1Buf, &usTk1Len, szTk2Buf, &usTk2Len, szTk3Buf, &usTk3Len);

	if(fIdleSwipe != TRUE) //aaronnino for BDOCLG ver 9.0 fix on issue #00059 Card entry is recognized even on non Card Entry Prompt or non Idle Screen display 8 of 8
	 	byMSR_status = CTOS_MSRRead(szTk1Buf, &usTk1Len, szTk2Buf, &usTk2Len, szTk3Buf, &usTk3Len);


 SWIPE_AGAIN:

    if(d_OK != inCTOS_ValidFirstIdleKey())
    {
				
        CTOS_LCDTClearDisplay();

				/* BDO CLG: Fleet card support - start -- jzg */
				//if(srTransRec.fFleetCard == TRUE)
				//	vdDispTransTitle(FLEET_SALE);
				//else
				/* BDO CLG: Fleet card support - end -- jzg */				
        	vdDispTransTitle(srTransRec.byTransType);
				
        //gcitra-0728
        //inCTOS_DisplayIdleBMP();
        //gcitra-0728
    }
// patrick ECR 20140516 start
    if (strTCT.fECR) // tct
    {
    	if (memcmp(srTransRec.szBaseAmount, "\x00\x00\x00\x00\x00\x00", 6) != 0)
    	{
    		char szDisplayBuf[30] = {0};
    		BYTE szTemp1[30+1] = {0};
			BYTE szTemp2[30+1] = {0};

			// sidumili: Issue#:000076 [check transaction maximum amount]
			if (inCTOS_ValidateTrxnAmount()!= d_OK){
				return(d_NO);
			}
				
			CTOS_LCDTPrintXY(1, 7, "AMOUNT:");
    		memset(szDisplayBuf, 0x00, sizeof(szDisplayBuf));
    		//wub_hex_2_str(srTransRec.szBaseAmount, szTemp1, AMT_BCD_SIZE);
    		wub_hex_2_str(srTransRec.szBaseAmount, szTemp1, 6);  /*BDO: Display the amount properly via ecr -- sidumili*/
			vdCTOS_FormatAmount("NN,NNN,NNN,NNn.nn", szTemp1, szTemp2);
			sprintf(szDisplayBuf, "%s %s", strCST.szCurSymbol, szTemp2);
    		CTOS_LCDTPrintXY(1, 8, szDisplayBuf);
			
    	}
    }
// patrick ECR 20140516 end
    //CTOS_TimeOutSet (TIMER_ID_1 , GET_CARD_DATA_TIMEOUT_VALUE);
    CTOS_TimeOutSet (TIMER_ID_1 , inGetIdleTimeOut(FALSE)); /*BDO: Parameterized idle timeout --sidumili*/

    CTOS_LCDTClearDisplay();
	//vdMyEZLib_Printf("srTransRec.byEntryMode: (%02x)", srTransRec.byEntryMode);	

	/* BDO CLG: Fleet card support - start -- jzg */
	//if(srTransRec.fFleetCard == TRUE)
	//	vdDispTransTitle(FLEET_SALE);
	//else
	/* BDO CLG: Fleet card support - end -- jzg */	
		vdDispTransTitle(srTransRec.byTransType);

	if (!fBINVer)
    //if(srTransRec.byEntryMode != CARD_ENTRY_MSR && srTransRec.byEntryMode != CARD_ENTRY_ICC)
    //{        
        //vdDispTransTitle(srTransRec.byTransType);
				if (inEntryMode  == SWIPE_ONLY){	
        		CTOS_LCDTPrintXY(1, 3, "PLEASE SWIPE");
        		CTOS_LCDTPrintXY(1, 4, "CUSTOMER CARD");
				}else{	
				    					
				/* Issue# 000113 - start -- jzg */
					if (inFallbackToMSR != SUCCESS)
					{				  							
					//BDO: Parameterized manual key entry for installment - start --jzg
					//if((fInstApp == TRUE) && (strTCT.fEnableInstMKE == FALSE))
              			if (strTCT.fEnableManualKeyEntry == FALSE) //aaronnino for BDOCLG ver 9.0 fix on issue #0061 Manual Entry should not be allowed for BIN Check transactions 6 of 7
              			{
							 CTOS_LCDTPrintXY(1, 3, "SWIPE/INSERT/ENTER");
							 CTOS_LCDTPrintXY(1, 4, "CANCEL"); //aaronnino for BDOCLG ver 9.0 fix on issue #00126 Incorrect terminal display
              			}
						else
						{
						  
							if (srTransRec.byTransType == BALANCE_INQUIRY){			
								CTOS_LCDTPrintXY(1, 3, "SWIPE/CANCEL");
							}else{
		        		  		CTOS_LCDTPrintXY(1, 3, "SWIPE/INSERT/ENTER");
	        			  		CTOS_LCDTPrintXY(1, 4, "CANCEL");
							}
						}
					}
					/* Issue# 000113 - end -- jzg */
				}
		//}	



//0826
	INSERT_AGAIN:
//0826

	
    while (1)
    {
	    
        if(CTOS_TimeOutCheck(TIMER_ID_1 )  == d_YES){
			fTimeOutFlag = TRUE; /*BDO: Flag for timeout --sidumili*/
            return READ_CARD_TIMEOUT ;
        }
				
				/*sidumili: Issue#: 000086*/
				//enhance ecr - removed
				//if ((strTCT.fECR) &&(fECRTxnFlg)){
				//vdSetErrorMessage("ECR TIMEOUT");
				//}
				//enhance ecr - removed

        CTOS_KBDInKey(&byKeyBuf);

//gcitra-removed - remove part where card entry is allowed during IDLE mode


                 // patrick add code 20141209
        if (byKeyBuf)
        {								
						CTOS_KBDGet(&byKeyBuf);        
						switch(byKeyBuf)
						{
							case d_KBD_0:
							case d_KBD_1:
							case d_KBD_2:
							case d_KBD_3:        
							case d_KBD_4:
							case d_KBD_5:
							case d_KBD_6:
							case d_KBD_7:
							case d_KBD_8:
							case d_KBD_9:	

							//fEnableBinVerMKE = MKE for BIN VER
							if(srTransRec.byTransType == BIN_VER){
								if (strTCT.fEnableBinVerMKE == FALSE) 
								{
									vdDisplayErrorMsgResp2(" ", " ", "MKE NOT ALLOWED");
									CTOS_KBDBufFlush();
									return USER_ABORT;
								}
							}						    		
							//fEnableInstMKE = MKE General flag for installment
							else if (fInstApp == TRUE){	
								if (strTCT.fEnableInstMKE == FALSE) 
								{
									vdDisplayErrorMsgResp2(" ", " ", "MKE NOT ALLOWED");
									CTOS_KBDBufFlush();
									return USER_ABORT;
								}
							//fEnableManualKeyEntry - Flag for all other hosts
							}else{
								if (strTCT.fEnableManualKeyEntry == FALSE) 
								{
									vdDisplayErrorMsgResp2(" ", " ", "MKE NOT ALLOWED");
									CTOS_KBDBufFlush();
									return USER_ABORT;
								}
							}
								
							case d_KBD_CANCEL:

								//gcitra-0728 
								if (byKeyBuf == d_KBD_CANCEL)
								{
									CTOS_KBDBufFlush();
									return USER_ABORT;
								}
								//gcitra-0728

								vdSetFirstIdleKey(byKeyBuf);
								memset(srTransRec.szPAN, 0x00, sizeof(srTransRec.szPAN));

								//get the card number and ger Expire Date
								if (d_OK != inCTOS_ManualEntryProcess(srTransRec.szPAN))
								{
									//gcitra - remove part where card entry is allowed during IDLE mode
									//vdSetFirstIdleKey(0x00);
									//gcitra
									CTOS_KBDBufFlush();
									//vdSetErrorMessage("Get Card Fail M");
									return USER_ABORT;
								}

								//Load the CDT table
								if (d_OK != inCTOS_LoadCDTIndex())
								{
									CTOS_KBDBufFlush();
									return USER_ABORT;
								}

								if(fInstApp != TRUE)
									if(strCDT.fManEntry == FALSE) 
									{
										vdDisplayErrorMsgResp2(" ", " ", "MKE NOT ALLOWED");
										CTOS_KBDBufFlush();
										return USER_ABORT;
									}

								break;                        
						}
        }

//gcitra
//0826

        if (inEntryMode != SWIPE_ONLY){
//INSERT_AGAIN:

			if (inEntryMode == INSERT_ONLY){
				byMSR_status = CTOS_MSRRead(szTk1Buf, &usTk1Len, szTk2Buf, &usTk2Len, szTk3Buf, &usTk3Len);
				vdCTOS_ResetMagstripCardData();

				/* BDO CLG: Fleet card support - start -- jzg */
				//if(srTransRec.fFleetCard == TRUE)
				//	vdDispTransTitle(FLEET_SALE);
				//else
				/* BDO CLG: Fleet card support - end -- jzg */	
					vdDispTransTitle(srTransRec.byTransType);
				
				CTOS_LCDTPrintXY(1, 4, "PLEASE INSERT CARD/");
				CTOS_LCDTPrintXY(1, 5, "CANCEL");
			}
//0826

        	CTOS_SCStatus(d_SC_USER, &bySC_status);
        	if(bySC_status & d_MK_SC_PRESENT)
        	{
        	    //1010
        	    CTOS_LCDTPrintXY(1,8,"");
				//1010
				//CTOS_Delay(2000);
         
            	vdCTOS_SetTransEntryMode(CARD_ENTRY_ICC);
            
            	//vdDebug_LogPrintf("--EMV flow----" );
            	//if (d_OK != inCTOS_EMVCardReadProcess ())
							shReturn = inCTOS_EMVCardReadProcess();

							if (shReturn != d_OK)
							{
							
									if (shReturn==EMV_TRANS_NOT_ALLOWED){
										vduiClearBelow(2);
										vdCTOS_ResetMagstripCardData();
										vdRemoveCard();
										inEntryMode = SWIPE_ONLY; 			
										vdCTOS_SetTransEntryMode(CARD_ENTRY_FALLBACK);
										vduiClearBelow(2);
										goto SWIPE_AGAIN;  
									}

                	if(inFallbackToMSR == SUCCESS)
                	{
                    vdCTOS_ResetMagstripCardData();
										//0826
                    //vdDisplayErrorMsg(1, 8, "PLS SWIPE CARD");    
                    //goto SWIPE_AGAIN;          
										vduiClearBelow(2);
										vdRemoveCard();
										clearLine(7);
										inChipTries= inChipTries+1;
										if (inChipTries < 3){
												inEntryMode = INSERT_ONLY; 
                    		goto INSERT_AGAIN;
										}else{ 
												inEntryMode = SWIPE_ONLY;
												//1125
												vdCTOS_SetTransEntryMode(CARD_ENTRY_FALLBACK);
												//1125
												goto SWIPE_AGAIN;  
										}
						//0826
                	}else{
                    	//vdSetErrorMessage("Get Card Fail C");
                    	return USER_ABORT;
                }
            }

			//0826
			inEntryMode = READ_ALL;
			//0826
			
            vdDebug_LogPrintf("--EMV Read succ----" );
            //Load the CDT table
            if (d_OK != inCTOS_LoadCDTIndex())
            {
               CTOS_KBDBufFlush();			
               return USER_ABORT;
            }
            
            break;
        }


		//0826
		if (inEntryMode == INSERT_ONLY) 
			goto INSERT_AGAIN;


        }
		//0826

        //for Idle swipe card

			if (fBINVer)
				break;

        if (strlen(srTransRec.szPAN) > 0)
         {
            
            vdDebug_LogPrintf("GLADTEST PAN" );
             
             if (d_OK != inCTOS_LoadCDTIndex())
             {
                 CTOS_KBDBufFlush();
                 //vdSetErrorMessage("Get Card Fail");
                 return USER_ABORT;
             }

             if(d_OK != inCTOS_CheckEMVFallback())
             {
                vdCTOS_ResetMagstripCardData();
                vdDisplayErrorMsg(1, 8, "PLS INSERT CARD"); 

				//issue#11
				vduiClearBelow(2);
				inEntryMode = INSERT_ONLY; 
				goto INSERT_AGAIN; 
                //goto SWIPE_AGAIN;
                //issue#11

             }
                     
             break;
          
         }


        byMSR_status = CTOS_MSRRead(szTk1Buf, &usTk1Len, szTk2Buf, &usTk2Len, szTk3Buf, &usTk3Len);

				/* BDOCLG-00187: Return to idle if card is incorrectly swipe at idle screen - start -- jzg */
				if((byMSR_status != d_OK) && (fEntryCardfromIDLE == TRUE) && (inEntryMode == READ_ALL))
				{
					inCTOSS_CLMCancelTransaction();
					vdDisplayErrorMsg(1, 8, "CARD READ ERROR");
					return USER_ABORT;
				}
				/* BDOCLG-00187: Return to idle if card is incorrectly swipe at idle screen - end -- jzg */
		
		//gcitra
        //if((byMSR_status == d_OK ) && (usTk2Len > 35))
        if(byMSR_status == d_OK )
		//gcitra
        { 
        		//Invalid card reading fix - start -- jzg
            shReturn = shCTOS_SetMagstripCardTrackData(szTk1Buf, usTk1Len, szTk2Buf, usTk2Len, szTk3Buf, usTk3Len); 

						vdDebug_LogPrintf("shCTOS_SetMagstripCardTrackData 2 = [%d]", shReturn);

						if (shReturn == INVALID_CARD)
						{
							CTOS_KBDBufFlush();
							vdDisplayErrorMsg(1, 8, "INVALID CARD"); 
							return INVALID_CARD;
						}
        		//Invalid card reading fix - end -- jzg

						if(inFallbackToMSR == SUCCESS)
						{
							vdCTOS_SetTransEntryMode(CARD_ENTRY_FALLBACK);
						}

            if (d_OK != inCTOS_LoadCDTIndex())
             {
                 CTOS_KBDBufFlush();
                 return USER_ABORT;
             }
            
            if(d_OK != inCTOS_CheckEMVFallback())
             {
                vdCTOS_ResetMagstripCardData();
                vdDisplayErrorMsg(1, 8, "PLS INSERT CARD"); 

				//issue#11
				vduiClearBelow(2);
				inEntryMode = INSERT_ONLY; 
				goto INSERT_AGAIN; 
                //goto SWIPE_AGAIN;
                //issue#11

             }
                 
            break;
        }
				else //aaronnino for BDOCLG ver 9.0 fix on issue #00187 Terminal cannot re-swipe card if 1st attempt is swiped improperly from idle menu A. SCENARIO start 
								{
									 if(fIdleSwipe == TRUE)
										{
												vdSetErrorMessage("READ CARD ERROR");
												return ST_ERROR;
										}
								}
						//aaronnino for BDOCLG ver 9.0 fix on issue #00187 Terminal cannot re-swipe card if 1st attempt is swiped improperly from idle menu  A. SCENARIO end

       }

	

    if (srTransRec.byEntryMode == CARD_ENTRY_ICC)
    {    
        EMVtagLen = 0;
        if(EMVtagLen > 0)
        {
            sprintf(srTransRec.szCardLable, "%s", EMVtagVal);
        }
        else
        {
            strcpy(srTransRec.szCardLable, strIIT.szIssuerLabel);
        }
    }
    else
    {
        strcpy(srTransRec.szCardLable, strIIT.szIssuerLabel);
    }
    srTransRec.IITid = strIIT.inIssuerNumber;
    
    vdDebug_LogPrintf("srTransRec.byTransType[%d]srTransRec.IITid[%d]", srTransRec.byTransType, srTransRec.IITid);
    return d_OK;
}

#endif




int inCTOS_WaveGetCardFields(void)
{
    USHORT EMVtagLen;
    BYTE   EMVtagVal[64];
    BYTE byKeyBuf;
    BYTE bySC_status;
    BYTE byMSR_status;
    BYTE szTempBuf[10];
    USHORT usTk1Len, usTk2Len, usTk3Len;
    BYTE szTk1Buf[TRACK_I_BYTES], szTk2Buf[TRACK_II_BYTES_50], szTk3Buf[TRACK_III_BYTES];
    usTk1Len = TRACK_I_BYTES ;
    usTk2Len = TRACK_II_BYTES_50 ;
    usTk3Len = TRACK_III_BYTES ;
    int  usResult;
	ULONG ulAPRtn;
	BYTE temp[64];
	char szTotalAmount[AMT_ASC_SIZE+1];
        int inchipswiped = 0; //aaalcantara issue number 000113 1 of 3
	EMVCL_RC_DATA_EX stRCDataEx;
	BYTE szOtherAmt[12+1],szTransType[2+1],szCatgCode[3+1],szCurrCode[3+1];

	CTOS_RTC SetRTC;

	BYTE szBaseAmt[30+1] = {0};
	//0826
	int inChipTries=0;
	int inEntryMode=0;	
	/*
	1= insert only
	2= swipe only
	0= will accept al
	*/

	//CTLS: Pass the correct amount to inCTOSS_CLMInitTransaction - start -- jzg
    char szBaseAmount[20] = {0};
    char szTipAmount[20] = {0};
	//CTLS: Pass the correct amount to inCTOSS_CLMInitTransaction - end -- jzg
	
#define INSERT_ONLY 1
#define SWIPE_ONLY	2
#define READ_ALL 0
	//0826

	short shReturn = d_OK; //Invalid card reading fix -- jzg


	/* CTLS: Added szMaxCTLSAmount to check CTLS max txn amount during runtime - start -- jzg */
	BOOL fMaxCTLSAmt = FALSE;
	long amt1 = 0;
	long amt2 = 0;
	/* CTLS: Added szMaxCTLSAmount to check CTLS max txn amount during runtime - end -- jzg */


	/* BDO CLG: MOTO setup -- jzg */
	int inMOTOResult;


 	vdDebug_LogPrintf("inCTOS_WaveGetCardFields......... %d-%d ", srTransRec.byEntryMode,fEntryCardfromIDLE);


	/* BDO CLG: MOTO setup - start -- jzg */
	if (strTCT.fMOTO == 1)
	{
		
		CTOS_LCDTClearDisplay();
		 
		vdDispTransTitle(srTransRec.byTransType);
				//CTOS_TimeOutSet (TIMER_ID_1 , GET_CARD_DATA_TIMEOUT_VALUE);
				CTOS_TimeOutSet (TIMER_ID_1 , inGetIdleTimeOut(FALSE)); /*BDO: Parameterized idle timeout --sidumili*/
		
		while (1)
		{
			
			CTOS_LCDTPrintXY(1, 3, "Enter/Cancel");
			
			if(CTOS_TimeOutCheck(TIMER_ID_1 )  == d_YES)
			{
				fTimeOutFlag = TRUE; /*BDO: Flag for timeout --sidumili*/
				return READ_CARD_TIMEOUT ;
			}
			
			CTOS_KBDInKey(&byKeyBuf);
			if (byKeyBuf)
			{
				CTOS_KBDGet(&byKeyBuf);
				switch(byKeyBuf)
				{
					case d_KBD_0:
					case d_KBD_1:
					case d_KBD_2:
					case d_KBD_3: 	
					case d_KBD_4:
					case d_KBD_5:
					case d_KBD_6:
					case d_KBD_7:
					case d_KBD_8:
					case d_KBD_9:
					case d_KBD_CANCEL:
						if (byKeyBuf == d_KBD_CANCEL)
						{
							CTOS_KBDBufFlush();
							return USER_ABORT;
						}
					 
						memset(srTransRec.szPAN, 0x00, sizeof(srTransRec.szPAN));
						
						vdSetFirstIdleKey(byKeyBuf);
						vdDebug_LogPrintf("szPAN2[%s]", srTransRec.szPAN);
							 
						//get the card number and ger Expire Date
						if (d_OK != inCTOS_ManualEntryProcess(srTransRec.szPAN))
						{
							vdSetFirstIdleKey(0x00);
							CTOS_KBDBufFlush ();
							return USER_ABORT;
						}
						
						inMOTOResult = inCTOS_LoadCDTIndex();
						//Load the CDT table
						if (d_OK != inMOTOResult)
						{
							CTOS_KBDBufFlush();
							return USER_ABORT;
						}
						
						if(strCDT.fManEntry == FALSE)
						{
							vdDisplayErrorMsgResp2(" ", " ", "MKE NOT ALLOWED");
							CTOS_KBDBufFlush();
							return USER_ABORT;
						}

						
						strcpy(srTransRec.szCardLable, strIIT.szIssuerLabel);
						
						if(inMOTOResult == d_OK)
							return d_OK;
						
						break;
				}
			}
		}
		
		return d_OK;
		
	}
	/* BDO CLG: MOTO setup - end -- jzg */


	if (fIdleInsert == TRUE){

		 	CTOS_SCStatus(d_SC_USER, &bySC_status);
			if (!(bySC_status & d_MK_SC_PRESENT)){
				fEntryCardfromIDLE = FALSE;
				fIdleInsert=FALSE;
				srTransRec.byEntryMode = 0;
			}
	}

	


	 inEntryMode = READ_ALL;


	 //gcitra
	 CTOS_LCDTClearDisplay();
	 //gcitra
  
     if (inMultiAP_CheckSubAPStatus() == d_OK)
        return d_OK;

	CTOS_LCDTClearDisplay();

 // patrick fix code 20141222 case 179
  	if (fEntryCardfromIDLE != TRUE)
	 		byMSR_status = CTOS_MSRRead(szTk1Buf, &usTk1Len, szTk2Buf, &usTk2Len, szTk3Buf, &usTk3Len);

	
 SWIPE_AGAIN:
EntryOfStartTrans:

    if(d_OK != inCTOS_ValidFirstIdleKey())
    {
        //CTOS_LCDTClearDisplay();
        vdDispTransTitle(srTransRec.byTransType);
        //gcitra-0728
        //inCTOS_DisplayIdleBMP();
        //gcitra-0728
    }

	memset(&stRCDataEx,0x00,sizeof(EMVCL_RC_DATA_EX));
	memset(szOtherAmt,0x00,sizeof(szOtherAmt));
	memset(szTransType,0x00,sizeof(szTransType));
	memset(szCatgCode,0x00,sizeof(szCatgCode));
	memset(szCurrCode,0x00,sizeof(szCurrCode));
	memset(temp,0x00,sizeof(temp));
	memset(szTotalAmount,0x00,sizeof(szTotalAmount));

//gcitra
#if 0
	CTOS_LCDTClearDisplay();
	vdDispTransTitle(srTransRec.byTransType);
	CTOS_LCDTPrintXY(1, 3, "    Present Card   ");
	wub_hex_2_str(srTransRec.szTotalAmount, szTotalAmount, 6);
	sprintf(temp, " Amount: %lu.%02lu", atol(szTotalAmount)/100, atol(szTotalAmount)%100);
	CTOS_LCDTPrintXY(1, 4, temp);
#endif

	//CTLS: Pass the correct amount to inCTOSS_CLMInitTransaction - start -- jzg
    memset(szBaseAmount, 0x00, sizeof(szBaseAmount));
    memset(szTipAmount, 0x00, sizeof(szTipAmount));
    wub_hex_2_str(srTransRec.szTipAmount, szTipAmount, 6);
    wub_hex_2_str(srTransRec.szBaseAmount, szBaseAmount, 6);
	// patrick fix code 20141216
    sprintf(szTotalAmount, "%012.0f", atof(szBaseAmount) + atof(szTipAmount));
    wub_str_2_hex(szTotalAmount, srTransRec.szTotalAmount, 12);
//	wub_hex_2_str(srTransRec.szTotalAmount, szTotalAmount, 6); //CTLS - Fix for CTLS reader not accepting PayPass Cards  -- jzg
	//CTLS: Pass the correct amount to inCTOSS_CLMInitTransaction - end -- jzg

	if (srTransRec.byTransType == REFUND)
		szTransType[0] = 0x20;
	//CTLS - Fix for CTLS reader not accepting PayPass Cards - start  -- jzg
	sprintf(szCatgCode, "%04d", atoi(strCST.szCurCode));
	strcpy(szCurrCode, szCatgCode);
	//CTLS - Fix for CTLS reader not accepting PayPass Cards  - end -- jzg


	/* BDO: Revised amount comparison to accomodate large values - start -- jzg */
	if (strcmp(szTotalAmount, strTCT.szMaxCTLSAmount) >= 0)
		fMaxCTLSAmt = TRUE;
	else
		fMaxCTLSAmt = FALSE;
	/* BDO: Revised amount comparison to accomodate large values - end -- jzg */


	/* CTLS: Added szMaxCTLSAmount to check CTLS max txn amount during runtime - start -- jzg */
	if ((inEntryMode == READ_ALL) && (!fMaxCTLSAmt))
//	if(CTLS_V3_SHARECTLS != inCTOSS_GetCtlsMode() && CTLS_V3_INT_SHARECTLS != inCTOSS_GetCtlsMode() && 1 != chGetIdleEventSC_MSR())	
	if(CTLS_V3_SHARECTLS != inCTOSS_GetCtlsMode() && CTLS_V3_INT_SHARECTLS != inCTOSS_GetCtlsMode()) 
	{
		ulAPRtn = inCTOSS_CLMInitTransaction(szTotalAmount,szOtherAmt,szTransType,szCatgCode,szCurrCode);
		if(ulAPRtn != d_EMVCL_NO_ERROR)
		{
			vdSetErrorMessage("CTLS InitTrans Fail!");
			return d_NO;
		}


		
	}
	/* CTLS: Added szMaxCTLSAmount to check CTLS max txn amount during runtime - end -- jzg */	

	
    //CTOS_TimeOutSet (TIMER_ID_1 , GET_CARD_DATA_TIMEOUT_VALUE);
    CTOS_TimeOutSet (TIMER_ID_1 , inGetIdleTimeOut(FALSE)); /*BDO: Parameterized idle timeout --sidumili*/

	//gcitra-0728
	vdDispTransTitle(srTransRec.byTransType);

	if (!fBINVer)	
		if (inEntryMode  == SWIPE_ONLY)
		{	
			CTOS_LCDTPrintXY(1, 3, "Please Swipe");
			CTOS_LCDTPrintXY(1, 4, "Customer Card");
		}
		//aaalcantara issue number 000113 2 of 3 START
		else if (inchipswiped == 1)
		{              
			CTOS_LCDTPrintXY(1, 3, "              ");
			CTOS_LCDTPrintXY(1, 4, "              ");
			inchipswiped = 0;
		}
		//aaalcantara issue number 000113 2 of 3 END
		else
		{	
			#if 0 
			//issue:218
			if (fEntryCardfromIDLE != TRUE)
			{
				CTOS_LCDTPrintXY(1, 3, "SWIPE/INSERT/ENTER");
				CTOS_LCDTPrintXY(1, 4, "TAP CARD"); //aaronnino for BDOCLG ver 9.0 fix on issue #00125 Incorrect terminal display 
			}
			#else
			  /// -- do nothing
			  // SHARLS_CTLS already display this message  -- sidumili.
			#endif
		}
	//gcitra-0728


	//0826
		INSERT_AGAIN:
	//0826

	
    while (1)
    {
        if(CTOS_TimeOutCheck(TIMER_ID_1 )  == d_YES)
        {
        	fTimeOutFlag = TRUE; /*BDO: Flag for timeout --sidumili*/
        	if(CTLS_V3_SHARECTLS != inCTOSS_GetCtlsMode() && CTLS_V3_INT_SHARECTLS != inCTOSS_GetCtlsMode() && CTLS_V3_INT_SHARECTLS != inCTOSS_GetCtlsMode())
        	inCTOSS_CLMCancelTransaction();
            return READ_CARD_TIMEOUT ;
        }

        CTOS_KBDInKey(&byKeyBuf);
                 // patrick add code 20141209
        if (byKeyBuf)
        {
            CTOS_KBDGet(&byKeyBuf);
                         switch(byKeyBuf)
                         {
                                  case d_KBD_0:
                                  case d_KBD_1:
                                  case d_KBD_2:
                                  case d_KBD_3:        
                                  case d_KBD_4:
                                  case d_KBD_5:
                                  case d_KBD_6:
                                  case d_KBD_7:
                                  case d_KBD_8:
                                  case d_KBD_9:
								  //fEnableBinVerMKE = MKE for BIN VER
								  if(srTransRec.byTransType == BIN_VER){
										if (strTCT.fEnableBinVerMKE == FALSE) 
										{
											vdDisplayErrorMsg(1, 8, "MKE NOT ALLWD");
											CTOS_KBDBufFlush();
											return USER_ABORT;
										}
								  } 								  
								  //fEnableInstMKE = MKE General flag for installment
								  else if (fInstApp == TRUE){ 
										if (strTCT.fEnableInstMKE == FALSE) 
										{
											vdDisplayErrorMsg(1, 8, "MKE NOT ALLWD");
											CTOS_KBDBufFlush();
											return USER_ABORT;
								  }
								  //fEnableManualKeyEntry - Flag for all other hosts
								  }
                  else if(inFallbackToMSR == SUCCESS) //aaronnino for BDOCLG ver 9.0 fix on issue #00487 Able to press keypad for MKE upon re-inserting card for fallback transactions
                  	{
                  	   	vdDisplayErrorMsg(1, 8, "MKE NOT ALLWD");
											  CTOS_KBDBufFlush();
											  return USER_ABORT;
                  	}
									else{
										if (strTCT.fEnableManualKeyEntry == FALSE) 
										{
											vdDisplayErrorMsg(1, 8, "MKE NOT ALLWD");
											CTOS_KBDBufFlush();
											return USER_ABORT;
										}
								  }

                                  case d_KBD_CANCEL:
			                 	 if(CTLS_V3_SHARECTLS != inCTOSS_GetCtlsMode() && CTLS_V3_INT_SHARECTLS != inCTOSS_GetCtlsMode())
                                  inCTOSS_CLMCancelTransaction();
                                 
                                  //gcitra-0728 
                                  if (byKeyBuf == d_KBD_CANCEL){
                                          CTOS_KBDBufFlush();
                                          return USER_ABORT;
                                  }
                                  //gcitra-0728
 
                                  vdSetFirstIdleKey(byKeyBuf);
                                 
                                  memset(srTransRec.szPAN, 0x00, sizeof(srTransRec.szPAN));
                                  //gcitra
                                  //if(d_OK == inCTOS_ValidFirstIdleKey())
                                  //       srTransRec.szPAN[0] = chGetFirstIdleKey();
                                  //gcitra
                                 
                                  vdDebug_LogPrintf("szPAN[%s]", srTransRec.szPAN);
                                  //get the card number and ger Expire Date
                                  if (d_OK != inCTOS_ManualEntryProcess(srTransRec.szPAN))
                                  {
                                          vdSetFirstIdleKey(0x00);
                                          CTOS_KBDBufFlush ();
                                          //vdSetErrorMessage("Get Card Fail M");
                                          return USER_ABORT;
                                  }
                        
                                  //Load the CDT table
                                  if (d_OK != inCTOS_LoadCDTIndex())
                                  {
                                                                   //gcitra-120214
                                                                   CTOS_KBDBufFlush();
                                                                   return USER_ABORT;
                                                                   //gcitra-120214
                                  }

										if(strCDT.fManEntry == FALSE)
										{
											vdDisplayErrorMsg(1, 8, "MKE NOT ALLWD");
											CTOS_KBDBufFlush();
											return USER_ABORT;
										}                                 
										
                                  break;
                         }
        }


        if (inEntryMode != SWIPE_ONLY){
//INSERT_AGAIN:

			if (inEntryMode == INSERT_ONLY){
				byMSR_status = CTOS_MSRRead(szTk1Buf, &usTk1Len, szTk2Buf, &usTk2Len, szTk3Buf, &usTk3Len);
				vdCTOS_ResetMagstripCardData();
				vdDispTransTitle(srTransRec.byTransType);
				CTOS_LCDTPrintXY(1, 4, "PLEASE INSERT CARD/");
				CTOS_LCDTPrintXY(1, 5, "CANCEL");
			}
//0826
	
        CTOS_SCStatus(d_SC_USER, &bySC_status);
        if(bySC_status & d_MK_SC_PRESENT)
        {
        	inCTOSS_CLMCancelTransaction();
					clearLine(8);
            vdCTOS_SetTransEntryMode(CARD_ENTRY_ICC);
            
            //vdDebug_LogPrintf("--EMV flow----" );
            shReturn = inCTOS_EMVCardReadProcess();
            //if (d_OK != inCTOS_EMVCardReadProcess ())	
            if (shReturn != d_OK)
            {

							if (shReturn == EMV_TRANS_NOT_ALLOWED){
								  vduiClearBelow(2);
									vdCTOS_ResetMagstripCardData();
								  vdRemoveCard();
									inEntryMode = SWIPE_ONLY;				
									vdCTOS_SetTransEntryMode(CARD_ENTRY_FALLBACK);
									vduiClearBelow(2);
									goto SWIPE_AGAIN;  
							}
							 
							if(inFallbackToMSR == SUCCESS)
							{
								vdCTOS_ResetMagstripCardData();
								//0826
								//vdDisplayErrorMsg(1, 8, "PLS SWIPE CARD");	
								//goto SWIPE_AGAIN; 		 
								vduiClearBelow(2);
								vdRemoveCard();
								clearLine(7);
								inChipTries= inChipTries+1;
								if (inChipTries < 3){
									inEntryMode = INSERT_ONLY; 
									goto INSERT_AGAIN;
							 }else{ 
									inEntryMode = SWIPE_ONLY;				

									//1125
									vdCTOS_SetTransEntryMode(CARD_ENTRY_FALLBACK);
									//1125
									goto SWIPE_AGAIN;  
							  }
								//0826
						}else{
							//vdSetErrorMessage("Get Card Fail C");
								return USER_ABORT;
					}	
         }
            //vdDebug_LogPrintf("--EMV Read succ----" );
            //Load the CDT table
            if (d_OK != inCTOS_LoadCDTIndex())
            {
                CTOS_KBDBufFlush();
                return USER_ABORT;
            }
            
            break;
    }

		
		if (inEntryMode == INSERT_ONLY) 
			goto INSERT_AGAIN;
		}
		
        //for Idle swipe card
        if (strlen(srTransRec.szPAN) > 0)
         {
         	if(CTLS_V3_SHARECTLS != inCTOSS_GetCtlsMode() && CTLS_V3_INT_SHARECTLS != inCTOSS_GetCtlsMode())
         	inCTOSS_CLMCancelTransaction();
             if (d_OK != inCTOS_LoadCDTIndex())
             {
                 CTOS_KBDBufFlush();
                 //vdSetErrorMessage("Get Card Fail");
                 return USER_ABORT;
             }

             if(d_OK != inCTOS_CheckEMVFallback())
             {
                vdCTOS_ResetMagstripCardData();
                vdDisplayErrorMsg(1, 8, "PLS INSERT CARD"); 

				//issue#11
				vduiClearBelow(2);
				inEntryMode = INSERT_ONLY; 
				goto INSERT_AGAIN; 
                //goto SWIPE_AGAIN;
                //issue#11

             }
                     
             break;
         
         }
        
        byMSR_status = CTOS_MSRRead(szTk1Buf, &usTk1Len, szTk2Buf, &usTk2Len, szTk3Buf, &usTk3Len);

		/* BDOCLG-00187: Return to idle if card is incorrectly swipe at idle screen - start -- jzg */
		if((byMSR_status != d_OK) && (fEntryCardfromIDLE == TRUE) && (inEntryMode == READ_ALL))
		{
			inCTOSS_CLMCancelTransaction();
			vdDisplayErrorMsg(1, 8, "CARD READ ERROR");
			return USER_ABORT;
		}
		/* BDOCLG-00187: Return to idle if card is incorrectly swipe at idle screen - end -- jzg */

		//gcitra
        //if((byMSR_status == d_OK ) && (usTk2Len > 35))
        if(byMSR_status == d_OK )
		//gcitra

		//if((byMSR_status == d_OK ) && (usTk2Len > 35))
        {
        	if(CTLS_V3_SHARECTLS != inCTOSS_GetCtlsMode() && CTLS_V3_INT_SHARECTLS != inCTOSS_GetCtlsMode())
        	inCTOSS_CLMCancelTransaction();

					//Invalid card reading fix - start -- jzg
					shReturn = shCTOS_SetMagstripCardTrackData(szTk1Buf, usTk1Len, szTk2Buf, usTk2Len, szTk3Buf, usTk3Len); 
					
					vdDebug_LogPrintf("shCTOS_SetMagstripCardTrackData 2 = [%d]", shReturn);
					
					if (shReturn == INVALID_CARD)
					{
									CTOS_KBDBufFlush();
									vdDisplayErrorMsg(1, 8, "READ CARD FAILED"); 
									return INVALID_CARD;
					}
					//Invalid card reading fix - end -- jzg

            //1125			
			if(inFallbackToMSR == SUCCESS){
				vdCTOS_SetTransEntryMode(CARD_ENTRY_FALLBACK);
        	}
			//1125

            if (d_OK != inCTOS_LoadCDTIndex())
             {
                 CTOS_KBDBufFlush();
                 return USER_ABORT;
             }
            
            if(d_OK != inCTOS_CheckEMVFallback())
             {
                vdCTOS_ResetMagstripCardData();
                vdDisplayErrorMsg(1, 8, "PLS INSERT CARD"); 
                inchipswiped = 1; //aaalcantara issue number 000113 3 of  3
                
				//issue#11
				vduiClearBelow(2);
				inEntryMode = INSERT_ONLY; 
				goto INSERT_AGAIN; 
                //goto SWIPE_AGAIN;
                //issue#11

             }
                
            break;
        }

		if(inEntryMode == SWIPE_ONLY){
           //inCTOSS_CLMCancelTransaction();
		   goto SWIPE_AGAIN;  
		}

		/* CTLS: Added szMaxCTLSAmount to check CTLS max txn amount during runtime - start -- jzg */
//		if(!fMaxCTLSAmt)
		if(CTLS_V3_SHARECTLS != inCTOSS_GetCtlsMode() && CTLS_V3_INT_SHARECTLS != inCTOSS_GetCtlsMode())
		{				
			ulAPRtn = inCTOSS_CLMPollTransaction(&stRCDataEx, 5);

		// V3 contactless reader
//		EMVCL_StopIdleLEDBehavior(NULL);
//		EMVCL_SetLED(0x0F, 0x08);

// patrick test code 20141230 start
#define d_EMVCL_RC_SEE_PHONE		0xA00000AF
// patrick test code 20141230 end		

			if(ulAPRtn == d_EMVCL_RC_DEK_SIGNAL)
			{
				vdDebug_LogPrintf("DEK Signal Data[%d][%s]", stRCDataEx.usChipDataLen,stRCDataEx.baChipData);
			}
			//EMV: Added error message handling "PLEASE SEE PHONE" - start -- jzg
			else if(ulAPRtn == d_EMVCL_RC_SEE_PHONE)
			{
				vdDisplayErrorMsg(1, 8, "PLEASE SEE PHONE");
				CTOS_Delay(3000);
				vdDisplayErrorMsg(1, 8, "                ");
				goto SWIPE_AGAIN;
			}
			//EMV: Added error message handling "PLEASE SEE PHONE" - end -- jzg
			else if(ulAPRtn == d_EMVCL_TX_CANCEL)
			{
				vdDisplayErrorMsg(1, 8, "USER CANCEL");
				return USER_ABORT;
			}
			else if(ulAPRtn == d_EMVCL_RX_TIMEOUT)
			{
				if(CTLS_V3_SHARECTLS != inCTOSS_GetCtlsMode() && CTLS_V3_INT_SHARECTLS != inCTOSS_GetCtlsMode())
	        		inCTOSS_CLMCancelTransaction();

				CTOS_Beep();
			    CTOS_Delay(50);
			    CTOS_Beep();
				CTOS_Delay(50);
				vdDisplayErrorMsg(1, 8, "TIMEOUT");
				fTimeOutFlag = TRUE; /*BDO: Flag for timeout --sidumili*/
				return USER_ABORT;
			}
      else if((ulAPRtn == d_EMVCL_RC_NO_AP_FOUND) || (ulAPRtn == d_EMVCL_RSP_ID_ERROR))
			{
				if(CTLS_V3_SHARECTLS != inCTOSS_GetCtlsMode() && CTLS_V3_INT_SHARECTLS != inCTOSS_GetCtlsMode())
					inCTOSS_CLMCancelTransaction();

				CTOS_Beep();
				CTOS_Delay(50);
				CTOS_Beep();
				CTOS_Delay(50);
				CTOS_LCDTClearDisplay();
				setLCDPrint(3, DISPLAY_POSITION_CENTER, "CTLS TRANSACTION");
				setLCDPrint(4, DISPLAY_POSITION_CENTER, "LIMIT EXCEEDED PLS");
				setLCDPrint(5, DISPLAY_POSITION_CENTER, "SWIPE/ INSERT CARD");
				CTOS_Delay(1500);

				return USER_ABORT;
			}
			else if(ulAPRtn != d_EMVCL_PENDING)
			{
				CTOS_Beep();
			    CTOS_Delay(50);
			    CTOS_Beep();
				CTOS_Delay(50);
			    CTOS_Beep();
				vdCTOS_SetTransEntryMode(CARD_ENTRY_WAVE);
				break;
			}
		}
		else
		{
			memset(szTransType,0x00,sizeof(szTransType));
			strcpy(szOtherAmt,"000000000000");
			if (srTransRec.byTransType == REFUND)
				strcpy(szTransType,"20");
			else
				strcpy(szTransType,"00");
			ulAPRtn = usCTOSS_CtlsV3Trans(szTotalAmount,szOtherAmt,szTransType,szCatgCode,szCurrCode,&stRCDataEx);
      CTOS_LCDTClearDisplay();
      CTOS_Beep();
      CTOS_Delay(50);
      CTOS_Beep();
      CTOS_Delay(50);
      CTOS_Beep();
			if(ulAPRtn == d_OK)
			{
				vdCTOS_SetTransEntryMode(CARD_ENTRY_WAVE);
				ulAPRtn = d_EMVCL_RC_DATA;
				break;
			}
			if (ulAPRtn == d_NO)
			{
				memset(temp,0x00,sizeof(temp));
				inCTOSS_GetEnvDB("CTLSRESP", temp);
				ulAPRtn = atof(temp);
				vdDebug_LogPrintf("CTLSRESP[%s],ulAPRtn=[%x]", temp,ulAPRtn);

				/*BDO: Timeout --sidumili*/
				if (ulAPRtn == d_EMVCL_RC_NO_CARD) 
				{
					fTimeOutFlag = TRUE; /*BDO: Flag for timeout --sidumili*/
				}
				/*BDO: Timeout --sidumili*/

				/*BDO: Separate error for CTLS read card error --sidumili*/
				if (ulAPRtn == d_EMVCL_RC_FAILURE){

					memset(szBaseAmt, 0x00, sizeof(szBaseAmt));
					wub_hex_2_str(srTransRec.szBaseAmount, szBaseAmt, AMT_BCD_SIZE);

					vdDebug_LogPrintf("CTLS TEST %s - %s",szBaseAmt,strTCT.szCTLSLimit);

					vdDebug_LogPrintf("CTLS TEST2 %f - %f",atof(szBaseAmt),atof(strTCT.szCTLSLimit));

					//temporary fix
					
					
					if (atof(szBaseAmt) > atof(strTCT.szCTLSLimit)){
						setLCDPrint(3, DISPLAY_POSITION_CENTER, "CTLS TRANSACTION");
						setLCDPrint(4, DISPLAY_POSITION_CENTER, "LIMIT EXCEEDED PLS");
						setLCDPrint(5, DISPLAY_POSITION_CENTER, "SWIPE/ INSERT CARD");
						CTOS_Delay(1500);

					}else{

					//end temporary fix
					setLCDPrint(5, DISPLAY_POSITION_CENTER, "CLTS READ CARD ERROR");
					CTOS_Delay(1500);
					}
				}
				/*BDO: Separate error for CTLS read card error --sidumili*/
				
				if(ulAPRtn == d_EMVCL_RC_EXCEED_OR_EQUAL_CL_TX_LIMIT)
				{
					setLCDPrint(3, DISPLAY_POSITION_CENTER, "CTLS TRANSACTION");
					setLCDPrint(4, DISPLAY_POSITION_CENTER, "LIMIT EXCEEDED PLS");
					setLCDPrint(5, DISPLAY_POSITION_CENTER, "SWIPE/ INSERT CARD");
					CTOS_Delay(1500);
				}
				return USER_ABORT;
			}

       


        if(srTransRec.byEntryMode == CARD_ENTRY_WAVE)
        {
            if (ulAPRtn == d_MORE_PROCESSING || ulAPRtn == d_CTLS_EVENT)
                return (inCTOS_GetCardFields());
        }
		}

	}

	/* CTLS: Added szMaxCTLSAmount to check CTLS max txn amount during runtime -- jzg */
	if ((srTransRec.byEntryMode == CARD_ENTRY_WAVE) && (!fMaxCTLSAmt))
	{


    // add to still continue with mag stripe once ctls card was read partially
    if((ulAPRtn == d_EMVCL_RC_DDA_AUTH_FAILURE) || (ulAPRtn == d_EMVCL_RC_FAILURE))
			goto SWIPE_AGAIN;
    

	
		if(ulAPRtn != d_EMVCL_RC_DATA)
		{
			vdCTOSS_WaveCheckRtCode(ulAPRtn);
			if(CTLS_V3_SHARECTLS != inCTOSS_GetCtlsMode() && CTLS_V3_INT_SHARECTLS != inCTOSS_GetCtlsMode())
        		inCTOSS_CLMCancelTransaction();

			return d_NO;
		}

		if(CTLS_V3_SHARECTLS != inCTOSS_GetCtlsMode() && CTLS_V3_INT_SHARECTLS != inCTOSS_GetCtlsMode())
		{
			if (d_OK != inCTOSS_WaveAnalyzeTransaction(&stRCDataEx))
			{
				inCTOSS_CLMCancelTransaction();
				return d_NO;
			}
		}
		else
		{
			if (d_OK != inCTOSS_V3AnalyzeTransaction(&stRCDataEx))
				return d_NO;
		}

		//Load the CDT table
    if (d_OK != inCTOS_LoadCDTIndex())
    {
        	if(CTLS_V3_SHARECTLS != inCTOSS_GetCtlsMode() && CTLS_V3_INT_SHARECTLS != inCTOSS_GetCtlsMode())
       inCTOSS_CLMCancelTransaction();
       CTOS_KBDBufFlush();
       return USER_ABORT;
     }

		 vdDebug_LogPrintf("GLADY TEST %d", strCDT.CDTid);
				  


		 //check if CARD is DEBIT CARD - must Swipe AGAIN if card entry is CTLS
		 if (strCDT.HDTid == 5 && strCDT.fPANCatchAll == TRUE){
		 	inCTOSS_CLMCancelTransaction();
		 	vdCTOS_ResetMagstripCardData();	
			vdDisplayErrorMsg(1, 8, "PLS SWIPE CARD"); 
			inEntryMode = SWIPE_ONLY;
			vduiClearBelow(2);
			memset(&stRCDataAnalyze,0x00,sizeof(EMVCL_RC_DATA_ANALYZE));		
			srTransRec.byUploaded = CN_FALSE;
			srTransRec.byOffline = CN_TRUE;
			if (srTransRec.byTransType == SALE_OFFLINE){
				vdCTOS_SetTransType(SALE);
				vdDispTransTitle(SALE);
			}
			 goto SWIPE_AGAIN;
		 }
		 //end

		 //Chekck if CARD is PAYPASS MAG and compare with Floor Limit
		 vdDebug_LogPrintf("**** inCTOSS_WaveAnalyzeTransaction 2 ****");
		 
		 if (srTransRec.bWaveSID == d_VW_SID_PAYPASS_MAG_STRIPE){
				 
		  	if (fAmountLessThanFloorLimit() == d_OK)
					srTransRec.bWaveSCVMAnalysis = d_CVM_REQUIRED_NONE;
				else
					srTransRec.bWaveSCVMAnalysis = d_CVM_REQUIRED_SIGNATURE;
				vdDebug_LogPrintf("stRCDataAnalyze.bCVMAnalysis 2 %d %x",srTransRec.bWaveSCVMAnalysis, srTransRec.bWaveSCVMAnalysis);
		 }


		if(CTLS_V3_SHARECTLS != inCTOSS_GetCtlsMode() && CTLS_V3_INT_SHARECTLS != inCTOSS_GetCtlsMode())
		 
		 inCTOSS_CLMCancelTransaction();
	}

    if (srTransRec.byEntryMode == CARD_ENTRY_ICC)
    {    
        EMVtagLen = 0;
        if(EMVtagLen > 0)
        {
            sprintf(srTransRec.szCardLable, "%s", EMVtagVal);
        }
        else
        {
            strcpy(srTransRec.szCardLable, strIIT.szIssuerLabel);
        }
    }
    else
    {
        strcpy(srTransRec.szCardLable, strIIT.szIssuerLabel);
    }
    srTransRec.IITid = strIIT.inIssuerNumber;
    
    vdDebug_LogPrintf("srTransRec.byTransType[%d]srTransRec.IITid[%d]", srTransRec.byTransType, srTransRec.IITid);
    return d_OK;
}

int inCTOS_PreConnect(void)
{
    int inRetVal;
    
    srTransRec.usTerminalCommunicationMode = strCPT.inCommunicationMode;

		if ((fBINVer == VS_TRUE) && ((srTransRec.usTerminalCommunicationMode == GPRS_MODE) || (srTransRec.usTerminalCommunicationMode == ETHERNET_MODE) || (srTransRec.usTerminalCommunicationMode == WIFI_MODE)))		
				return(d_OK);
		
		

		
		//if ((srTransRec.usTerminalCommunicationMode == GPRS_MODE) && (fGPRSConnectOK != TRUE)){
		//	vdSetErrorMessage("GPRS NOT ESTABLISHED");	
    //  return(d_NO);
		//}
		
    
    vdDebug_LogPrintf("strCPT.inCommunicationMode[%d]",strCPT.inCommunicationMode);


    if (inCTOS_InitComm(srTransRec.usTerminalCommunicationMode) != d_OK) 
    {
        //vdSetErrorMessage("COMM INIT ERR");
        vdDisplayErrorMsgResp2(" ", " ", "COMM INIT ERR");
				vdSetErrorMessage("");
        return(d_NO);
    }


		if(VS_TRUE == strTCT.fDemo)
		return(d_OK);
	
    inRetVal = inCTOS_CheckInitComm(srTransRec.usTerminalCommunicationMode); 

		if (inRetVal != d_OK)
    {
    	if (srTransRec.usTerminalCommunicationMode == GPRS_MODE)
          {
			 vdDisplayErrorMsgResp2(" ", "GPRS Problem","Please Call");
			 vdSetErrorMessage("");
          }
		//wifi-mod2
		else if (srTransRec.usTerminalCommunicationMode == WIFI_MODE)		
        {
			vdDisplayErrorMsgResp2(" ", "WIFI Problem","Please Call");
			vdSetErrorMessage("");
        }
		//wifi-mod2

      else
        {
           vdDisplayErrorMsgResp2(" ", " ", "COMM INIT ERR");
           vdSetErrorMessage("");
        }
      return(d_NO);
		}

				
	
    if (CN_FALSE == srTransRec.byOffline)
    {   
        inRetVal = srCommFuncPoint.inCheckComm(&srTransRec);        
				//for improve transaction speed
    }

    return(d_OK);
}


int inCTOS_PreConnect2(void)
{
    int inRetVal;
    
    //srTransRec.usTerminalCommunicationMode = strCPT.inCommunicationMode; 
    
    vdDebug_LogPrintf("strCPT.inCommunicationMode[%d]",strCPT.inCommunicationMode);


    if (inCTOS_InitComm(srTransRec.usTerminalCommunicationMode) != d_OK) 
    {
        //vdSetErrorMessage("COMM INIT ERR");
        vdDisplayErrorMsgResp2(" ", " ", "COMM INIT ERR");
				vdSetErrorMessage("");
        return(d_NO);
    }
    inCTOS_CheckInitComm(srTransRec.usTerminalCommunicationMode); 
	

    if (CN_FALSE == srTransRec.byOffline)
    {   
        inRetVal = inModem_CheckComm2(&srTransRec);        

    }

    return(d_OK);
}

extern isPredial;
int inModem_CheckComm2(TRANS_DATA_TABLE *srTransPara)
{

  int shRet;
	
	vdDebug_LogPrintf("byTransType=[%d],szPriTxnPhoneNumber=[%s],szPriSettlePhoneNumber=[%s]",srTransPara->byTransType,strCPT.szPriTxnPhoneNumber,strCPT.szPriSettlePhoneNumber);

	if ((srTransPara->byTransType == SETTLE) || (srTransPara->byTransType == CLS_BATCH))
	{
		if(strlen(strCPT.szSecSettlePhoneNumber)>0)
		{
			memset(srModemRec.strRemotePhoneNum,0x00,sizeof(srModemRec.strRemotePhoneNum));
			sprintf(srModemRec.strRemotePhoneNum,"%s%s",strTCT.szPabx,strCPT.szSecSettlePhoneNumber);
		}
	}
	/*BDO: Separate dialing number for BIN Ver - start -- jzg */
	else if (srTransPara->byTransType == BIN_VER)
	{
		inBVTRead(1);
		memset(srModemRec.strRemotePhoneNum,0x00,sizeof(srModemRec.strRemotePhoneNum));
		sprintf(srModemRec.strRemotePhoneNum,"%s%s",strTCT.szPabx,strBVT.szBINVerSecNum);
	}
	/*BDO: Separate dialing number for BIN Ver - end -- jzg */
	else
	{
		if(strlen(strCPT.szSecTxnPhoneNumber)>0)
		{
			memset(srModemRec.strRemotePhoneNum,0x00,sizeof(srModemRec.strRemotePhoneNum));
			sprintf(srModemRec.strRemotePhoneNum,"%s%s",strTCT.szPabx,strCPT.szSecTxnPhoneNumber);
		}
	}

	vdDebug_LogPrintf("default phone num =[%s],fPreDial[%d]",srModemRec.strRemotePhoneNum,strCPT.fPreDial);
	isPredial = 0;
	
	if (strCPT.fPreDial == TRUE)
	{
    	shRet = CTOS_ModemDialup((BYTE *)srModemRec.strRemotePhoneNum,strlen(srModemRec.strRemotePhoneNum));
	
 		isPredial = 1;	
		
		vdDebug_LogPrintf("inModem_CheckComm2 - isPredial = %d",isPredial);
 	}

	return ST_SUCCESS;
}



int inCTOS_CheckAndSelectMutipleMID(void)
{
#define ITEMS_PER_PAGE          4

    char szMMT[50];
    char szDisplay[50];
    int inNumOfRecords = 0;
    short shCount = 0;
    short shTotalPageNum;
    short shCurrentPageNum;
    short shLastPageItems = 0;
    short shPageItems = 0;
    short shLoop;
    short shFalshMenu = 1;
     BYTE isUP = FALSE, isDOWN = FALSE;
	 BYTE bHeaderAttr = 0x01+0x04, iCol = 1;
    BYTE  x = 1;
    BYTE key;
    char szHeaderString[50] = "SELECT MERCHANT";
    char szMitMenu[1024];
    int inLoop = 0;
    unsigned char bstatus = 0; 
    memset(szMitMenu, 0x00, sizeof(szMitMenu));
		short shMinLen = 4;
		short shMaxLen = 6;
		BYTE Bret;
		unsigned char szOutput[30];

    
    vdDebug_LogPrintf("inCTOS_CheckAndSelectMutipleMID=[%d]",strHDT.inHostIndex);
    inMMTReadNumofRecords(strHDT.inHostIndex,&inNumOfRecords);
    CTOS_KBDBufFlush();//cleare key buffer
    //if(srTransRec.fDebit == TRUE && (srTransRec.byTransType == BAL_INQ || srTransRec.byTransType == LOG_ON))
        //inNumOfRecords=1;
    
    if(inNumOfRecords > 1)
    {
        for (inLoop = 0; inLoop < inNumOfRecords; inLoop++)
        {
            strcat((char *)szMitMenu, strMMT[inLoop].szMerchantName);
            if(inLoop + 1 != inNumOfRecords)
            strcat((char *)szMitMenu, (char *)" \n");
        }
        
        key = MenuDisplay(szHeaderString, strlen(szHeaderString), bHeaderAttr, iCol, x, szMitMenu, TRUE);
        
        if (key == 0xFF) 
        {
            CTOS_LCDTClearDisplay();
            setLCDPrint(1, DISPLAY_POSITION_CENTER, "WRONG INPUT!!!");
            vduiWarningSound();
            return -1;  
        }
        
        if(key > 0)
        {
            if(d_KBD_CANCEL == key)
                return -1;
        
            vdDebug_LogPrintf("key[%d]-------", key);		
            memcpy(&strMMT[0],&strMMT[key-1],sizeof(STRUCT_MMT));
        }
    }
#if 0
    shCurrentPageNum = 1;
    CTOS_KBDBufFlush();//cleare key buffer
    if(inNumOfRecords > 1)
    {
        if (inNumOfRecords > ITEMS_PER_PAGE)
            isDOWN = TRUE;
        
        shTotalPageNum = (inNumOfRecords/ITEMS_PER_PAGE == 0) ? (inNumOfRecords/ITEMS_PER_PAGE) :(inNumOfRecords/ITEMS_PER_PAGE + 1); 
        shLastPageItems = (inNumOfRecords/ITEMS_PER_PAGE == 0) ? (ITEMS_PER_PAGE) : (inNumOfRecords%ITEMS_PER_PAGE);
        
        do
        {
                //display items perpage
                if(shTotalPageNum == 0)//the total item is amaller than ITEMS_PER_PAGE
                {
                    shPageItems = inNumOfRecords;
                }
                else if(shCurrentPageNum == shTotalPageNum)//Last page
                    shPageItems = shLastPageItems;
                else
                    shPageItems = ITEMS_PER_PAGE;


                if(shFalshMenu)
                {
                    CTOS_LCDTClearDisplay();
                    vdDispTitleString("SELECT MERCHANT");
                    CTOS_LCDTPrintXY(2,8,"PLS SELECT");
                    for(shLoop=0 ; shLoop < shPageItems/*ITEMS_PER_PAGE*/ ; shLoop++)
                    {
                    
                        memset(szDisplay,0,sizeof(szDisplay));
                        sprintf(szDisplay,"%d: %s",shLoop+1,strMMT[shLoop + (shCurrentPageNum -1)*ITEMS_PER_PAGE].szMerchantName);
                        CTOS_LCDTPrintXY(2,shLoop + 3,szDisplay);

                    }
					
					//#issue#=000137
					if (shCurrentPageNum > 1)
						isUP = TRUE;
					else
						isUP = FALSE;
					
					//000137
                    vdCTOS_LCDGShowUpDown(isUP,isDOWN);
                }
                
                
                key=WaitKey(60);
                
                switch(key)
                {
                    case d_KBD_DOWN:
					case d_KBD_DOT:

                        shFalshMenu = 1;
                        
                        shCurrentPageNum ++;
                        if(shCurrentPageNum > shTotalPageNum)
                            shCurrentPageNum = 1;
                        bstatus = 2;
                        break;
                        
                    //issue#-000137
                    case d_KBD_UP:

                        shCurrentPageNum --;
                        if(shCurrentPageNum < 1)
                            shCurrentPageNum = shTotalPageNum;
                        bstatus = 2;        
                        break;          
                    //000137
                    case d_KBD_CANCEL:                          
                        return FAIL;
                    case d_KBD_1:
                        //set the unique MMT num
                                            
                        memcpy(&strMMT[0],&strMMT[0 + (shCurrentPageNum -1)*ITEMS_PER_PAGE],sizeof(STRUCT_MMT));
                        bstatus = 0;
                        break;
                    case d_KBD_2:
                        if(shPageItems < 2)
                        {
                            bstatus = -1;
                        }
                        else
                        {
                            memcpy(&strMMT[0],&strMMT[1 + (shCurrentPageNum -1)*ITEMS_PER_PAGE],sizeof(STRUCT_MMT));
                            bstatus = 0;
                        }
                        break;
                    case d_KBD_3:   
                        if(shPageItems < 3)
                        {
                            bstatus = -1;
                        }
                        else
                        {
                            memcpy(&strMMT[0],&strMMT[2 + (shCurrentPageNum -1)*ITEMS_PER_PAGE],sizeof(STRUCT_MMT));
                            bstatus = 0;
                        }
                        break;
                                            
                    case d_KBD_4:
                        if(shPageItems < 4)
                        {
                            bstatus = -1;
                        }
                        else
                        {
                            memcpy(&strMMT[0],&strMMT[3 + (shCurrentPageNum -1)*ITEMS_PER_PAGE],sizeof(STRUCT_MMT));
                            bstatus = 0;
                        }
                        break;
                    case d_KBD_5:
                        if(ITEMS_PER_PAGE < 5)
                        {
                            bstatus = -1 ;
                            break;
                        }
                        else
                        {
                            if(shPageItems < 5)
                            {
                                bstatus = -1;
                            }
                            else
                            {
                                memcpy(&strMMT[0],&strMMT[4 + (shCurrentPageNum -1)*ITEMS_PER_PAGE],sizeof(STRUCT_MMT));
                                bstatus = 0;
                            }
                            break;

                        }
                    case d_KBD_6:
                        if(ITEMS_PER_PAGE < 6)
                        {
                            bstatus = -1 ;
                            break;
                        }
                        else
                        {
                            if(shPageItems < 6)
                            {
                                bstatus = -1;
                            }
                            else
                            {
                                memcpy(&strMMT[0],&strMMT[5 + (shCurrentPageNum -1)*ITEMS_PER_PAGE],sizeof(STRUCT_MMT));
                                bstatus = 0;
                            }
                            break;

                        }
                    case d_KBD_7:
                        if(ITEMS_PER_PAGE < 7)
                        {
                            bstatus = -1 ;
                            break;
                        }
                        else
                        {
                            if(shPageItems < 7)
                            {
                                bstatus = -1;
                            }
                            else
                            {
                                memcpy(&strMMT[0],&strMMT[6 + (shCurrentPageNum -1)*ITEMS_PER_PAGE],sizeof(STRUCT_MMT));
                                bstatus = 0;
                            }
                            break;

                        }
                    case d_KBD_8:   //Max 8 items for one page
                        if(ITEMS_PER_PAGE < 8)
                        {
                            bstatus = -1 ;
                            break;
                        }
                        else
                        {
                            if(shPageItems < 8)
                            {
                                bstatus = -1;
                            }
                            else
                            {
                                memcpy(&strMMT[0],&strMMT[7 + (shCurrentPageNum -1)*ITEMS_PER_PAGE],sizeof(STRUCT_MMT));
                                bstatus = 0;
                            }
                            break;

                        }
                    default:
                        shFalshMenu = 0;
                        bstatus = -1 ;
                        break;

                }
                
                if((-1) == bstatus)
                {
                    vdSetErrorMessage("LOAD MMT ERR");
                    return FAIL;
                    
                }
                else if(0 == bstatus)
                {
                    break;
                }
                
            }while(1);

    }
    else
    {
        //One merchant only     
        //vduiDisplayStringCenter(1,strMMT[0].szMID);
        
    }
#endif
		//vdDebug_LogPrintf("key[%d]--fEnablePSWD[%d]-----", key,strMMT[key-1].fEnablePSWD);
		if (strMMT[0].fEnablePSWD == 1)
		{
				CTOS_LCDTClearDisplay();

				/* BDO CLG: Fleet card support - start -- jzg */
				//if(srTransRec.fFleetCard == TRUE)
				//	vdDispTransTitle(FLEET_SALE);
				//else
				/* BDO CLG: Fleet card support - end -- jzg */	
					vdDispTransTitle(srTransRec.byTransType);
				
				CTOS_LCDTPrintXY(1, 3,"ENTER PASSWORD:");
				
        while (1)
        {
            memset(szOutput,0x00,sizeof(szOutput)); 																		 
            shMinLen = strlen(strMMT[0].szPassWord);
            shMaxLen = 6;
            Bret = InputString(1, 4, 0x01, 0x02,szOutput, &shMaxLen, shMinLen, d_INPUT_TIMEOUT);
            #if 0
            if(strncmp(szOutput,strMMT[0].szPassWord,shMinLen) == 0)
            //if(strcmp(szOutput,strMMT[0].szPassWord) == 0)
            { 		 
            break;								
            }
            #endif
            if((Bret == d_KBD_CANCEL) || (Bret == 255) || (Bret == 0))
                return Bret;
            else if(Bret >= 1)
            {
                if(strcmp(szOutput,strMMT[0].szPassWord) == 0)
                {
                    break;
                }
                else
                {
                    vdDisplayErrorMsg(1, 8, "WRONG PASSWORD");
                    CTOS_LCDTClearDisplay();
                    
                    /* BDO CLG: Fleet card support - start -- jzg */
                    //if(srTransRec.fFleetCard == TRUE)
                    //    vdDispTransTitle(FLEET_SALE);
                    //else
                    /* BDO CLG: Fleet card support - end -- jzg */	
                        vdDispTransTitle(srTransRec.byTransType);
                    
                    CTOS_LCDTPrintXY(1, 3,"ENTER PASSWORD:");
                }
            }
        }
		}


    srTransRec.MITid = strMMT[0].MITid;
    strcpy(srTransRec.szTID, strMMT[0].szTID);
    strcpy(srTransRec.szMID, strMMT[0].szMID);
    memcpy(srTransRec.szBatchNo, strMMT[0].szBatchNo, 4);
    strcpy(srTransRec.szHostLabel, strHDT.szHostLabel);

    vdDebug_LogPrintf("szATCMD1=[%s] [%s] [%s] [%s] [%s]",strMMT[0].szATCMD1,strMMT[0].szATCMD2,strMMT[0].szATCMD3,strMMT[0].szATCMD4,strMMT[0].szATCMD5);

		
    return SUCCESS;
    

}



int inCTOS_CheckAndSelectMID(void)
{
#define ITEMS_PER_PAGE          4

    char szMMT[50];
    char szDisplay[50];
    int inNumOfRecords = 0;
    short shCount = 0;
    short shTotalPageNum;
    short shCurrentPageNum;
    short shLastPageItems = 0;
    short shPageItems = 0;
    short shLoop;
    
    unsigned char key;
    unsigned char bstatus = 0; 

    DebugAddSTR("inCTOS_CheckAndSelectMutipleMID","Processing...",20);
    
    //get the index , then get all MID from the MMT list and prompt to user to select
    inMMTReadNumofRecords(srTransRec.HDTid,&inNumOfRecords);
    shCurrentPageNum = 1;
    CTOS_KBDBufFlush();//cleare key buffer
    if(inNumOfRecords > 1)
    {
        shTotalPageNum = (inNumOfRecords/ITEMS_PER_PAGE == 0) ? (inNumOfRecords/ITEMS_PER_PAGE) :(inNumOfRecords/ITEMS_PER_PAGE + 1); 
        shLastPageItems = (inNumOfRecords/ITEMS_PER_PAGE == 0) ? (ITEMS_PER_PAGE) : (inNumOfRecords%ITEMS_PER_PAGE);
        
        do
        {
                //display items perpage
                if(shTotalPageNum == 0)//the total item is amaller than ITEMS_PER_PAGE
                {
                    shPageItems = inNumOfRecords;
                }
                else if(shCurrentPageNum == shTotalPageNum)//Last page
                    shPageItems = shLastPageItems;
                else
                    shPageItems = ITEMS_PER_PAGE;
                
                CTOS_LCDTClearDisplay();
                for(shLoop=0 ; shLoop < shPageItems/*ITEMS_PER_PAGE*/ ; shLoop++)
                {
                
                    memset(szDisplay,0,sizeof(szDisplay));
                    sprintf(szDisplay,"%d: %s",shLoop+1,strMMT[shLoop + (shCurrentPageNum -1)*ITEMS_PER_PAGE].szMerchantName);
                    CTOS_LCDTPrintXY(2,shLoop + 2,szDisplay);

                }
                
                key=WaitKey(60);
                
                switch(key)
                {
                    case d_KBD_DOWN:
                        
                        shCurrentPageNum ++;
                        if(shCurrentPageNum > shTotalPageNum)
                            shCurrentPageNum = 1;
                        bstatus = 2;
                        break;
                        
                        
                    case d_KBD_UP:

                        shCurrentPageNum --;
                        if(shCurrentPageNum < 1)
                            shCurrentPageNum = shTotalPageNum;
                        bstatus = 2;        
                        break;          
                        
                    case d_KBD_CANCEL:                          
                        return FAIL;
                    case d_KBD_1:
                        //set the unique MMT num
                                            
                        memcpy(&strMMT[0],&strMMT[0 + (shCurrentPageNum -1)*ITEMS_PER_PAGE],sizeof(STRUCT_MMT));
                        //vduiDisplayStringCenter(2,strMMT[0].szMID);
                        bstatus = 0;
                        break;
                    case d_KBD_2:
                        if(shPageItems < 2)
                        {
                            bstatus = -1;
                        }
                        else
                        {
                            memcpy(&strMMT[0],&strMMT[1 + (shCurrentPageNum -1)*ITEMS_PER_PAGE],sizeof(STRUCT_MMT));
                            bstatus = 0;
                        }
                        break;
                    case d_KBD_3:   
                        if(shPageItems < 3)
                        {
                            bstatus = -1;
                        }
                        else
                        {
                            memcpy(&strMMT[0],&strMMT[2 + (shCurrentPageNum -1)*ITEMS_PER_PAGE],sizeof(STRUCT_MMT));
                            bstatus = 0;
                        }
                        break;
                                            
                    case d_KBD_4:
                        if(shPageItems < 4)
                        {
                            bstatus = -1;
                        }
                        else
                        {
                            memcpy(&strMMT[0],&strMMT[3 + (shCurrentPageNum -1)*ITEMS_PER_PAGE],sizeof(STRUCT_MMT));
                            bstatus = 0;
                        }
                        break;
                    case d_KBD_5:
                        if(ITEMS_PER_PAGE < 5)
                        {
                            bstatus = -1 ;
                            break;
                        }
                        else
                        {
                            if(shPageItems < 5)
                            {
                                bstatus = -1;
                            }
                            else
                            {
                                memcpy(&strMMT[0],&strMMT[4 + (shCurrentPageNum -1)*ITEMS_PER_PAGE],sizeof(STRUCT_MMT));
                                bstatus = 0;
                            }
                            break;

                        }
                    case d_KBD_6:
                        if(ITEMS_PER_PAGE < 6)
                        {
                            bstatus = -1 ;
                            break;
                        }
                        else
                        {
                            if(shPageItems < 6)
                            {
                                bstatus = -1;
                            }
                            else
                            {
                                memcpy(&strMMT[0],&strMMT[5 + (shCurrentPageNum -1)*ITEMS_PER_PAGE],sizeof(STRUCT_MMT));
                                bstatus = 0;
                            }
                            break;

                        }
                    case d_KBD_7:
                        if(ITEMS_PER_PAGE < 7)
                        {
                            bstatus = -1 ;
                            break;
                        }
                        else
                        {
                            if(shPageItems < 7)
                            {
                                bstatus = -1;
                            }
                            else
                            {
                                memcpy(&strMMT[0],&strMMT[6 + (shCurrentPageNum -1)*ITEMS_PER_PAGE],sizeof(STRUCT_MMT));
                                bstatus = 0;
                            }
                            break;

                        }
                    case d_KBD_8:   //Max 8 items for one page
                        if(ITEMS_PER_PAGE < 8)
                        {
                            bstatus = -1 ;
                            break;
                        }
                        else
                        {
                            if(shPageItems < 8)
                            {
                                bstatus = -1;
                            }
                            else
                            {
                                memcpy(&strMMT[0],&strMMT[7 + (shCurrentPageNum -1)*ITEMS_PER_PAGE],sizeof(STRUCT_MMT));
                                bstatus = 0;
                            }
                            break;

                        }
                    default:
                        bstatus = -1 ;
                        break;

                }
                
                if((-1) == bstatus)
                {
                    return FAIL;
                    
                }
                else if(0 == bstatus)
                {
                    break;
                }
                
            }while(1);

    }
    else
    {
        //One merchant only     
        //vduiDisplayStringCenter(1,strMMT[0].szMID);
        
    }

    srTransRec.MITid = strMMT[0].MITid;
    return SUCCESS;
    

}


int inCTOS_GetTxnPassword(void)
{
#define NO_PW           0
#define SUPER_PW            1
#define SYSTERM_PW          2
#define ENGINEERPW         3

    DebugAddSTR("inCTOS_GetTxnPassword","Processing...",20);


    unsigned char szOutput[30],szDisplay[30];
    int  inTxnTypeID;
    short ret = 0;
    short shMinLen = 4;
	//issue 00441
    //short shMaxLen = 12;
	short shMaxLen = 6;
    BYTE key;
    BYTE Bret;
    short shCount =0;
    short shRsesult = d_OK;
    
    if (inMultiAP_CheckSubAPStatus() == d_OK)
        return d_OK;


    
    memset(szOutput,0,sizeof(szOutput));
    memset(szDisplay,0,sizeof(szDisplay));
    inTxnTypeID = srTransRec.byTransType;

    vduiLightOn();
    
    inPITRead(inTxnTypeID);

	
	//enhanced ecr - check if ecr is enable and If transaction is ecr triggered (should not propmt for passwrod)
		if ((strTCT.fECR) &&  (fECRTxnFlg == 1))
			return d_OK;
	//end
	
    if (NO_PW== strPIT.inPasswordLevel)
    {
        return d_OK;
    }
    
    CTOS_KBDHit(&key);//clear key buffer
    while(shCount < 3)
    {
				vduiClearBelow(3); /* BDOCLG-V3-00005: Overlapping "WRONG PASSWORD" message -- jzg */
        switch(srTransRec.byTransType)
        {
            case SALE:
						case FLEET_SALE: //BDO CLG: Fleet card support -- jzg
            case PRE_AUTH:
            case REFUND:
            case SALE_OFFLINE:
            case EPP_SALE:
            case VOID:
            case SALE_TIP:
            case SALE_ADJUST:
            case SETTLE:
            case BATCH_REVIEW:
            case BATCH_TOTAL:
						case SETUP: /*sidumili: Issue#:000087 [prompt password]*/
						//gcitra-012015
						case BIN_VER:
						//gcitra-012015
            //smac
			      case SMAC_ACTIVATION:
            //samc
            case MANUAL_SETTLE: //aaronnino for BDOCLG ver 9.0 fix on issue #00114 Incorrect user password for manual settlement, if settlements fails for online transaction 7 of 9
				    shMaxLen=6; /*aaronnino for BDOCLG ver 9.0 fix on issue #0075 Can't Input 6 chars password after a failed 4 chars inputted password
				                           Issue #00441 - Max length should only be 6*/
                
                if(SUPER_PW== strPIT.inPasswordLevel)
                {
                    //CTOS_LCDTClearDisplay();
                    if (strlen(szFuncTitleName) <= 0)
                   	{
   										/* BDO CLG: Fleet card support - start -- jzg */
   										//if(srTransRec.fFleetCard == TRUE)
                       					//	vdDispTransTitle(FLEET_SALE);
   										//else
   										/* BDO CLG: Fleet card support - end -- jzg */
                       						vdDispTransTitle(srTransRec.byTransType);
                   	}
    							  else
    							 	    vdDispTitleString(szFuncTitleName); //aaronnino for BDOCLG ver 9.0 fix on issue #0093 Have a function title for function keys shorcut 4 of 6 

									  CTOS_LCDTPrintXY(1, 3,"ENTER PASSWORD:");
                    
                    //Bret = InputString(1, 4, 0x01, 0x02, szOutput, &shMaxLen, shMinLen, d_INPUT_TIMEOUT);
                    Bret = InputString(1, 4, 0x01, 0x02, szOutput, &shMaxLen, shMinLen, inGetIdleTimeOut(FALSE)); /*BDO: Parameterized idle timeout --sidumili*/

										//issue:285
										if (Bret == 255) //timeout
											{
											     memset(szFuncTitleName,0,sizeof(szFuncTitleName));
													 CTOS_LCDTPrintXY(1, 3,"                 ");
										       return Bret;
											}
										//issue:285

										//#issue:231
										if(d_KBD_CANCEL == Bret)
											{
											     memset(szFuncTitleName,0,sizeof(szFuncTitleName));
													 CTOS_LCDTPrintXY(1, 3,"                 ");
                    	     return Bret;
											}
										else
										//#issue:231
                    /*if((strcmp(szOutput,strTCT.szSuperPW) == 0) ||(strcmp(szOutput,strTCT.szSystemPW) == 0)||  (strcmp(szOutput,strTCT.szEngineerPW) == 0))*/
										if (strcmp(szOutput,strTCT.szSuperPW) == 0)//aaronnino for BDOCLG ver 9.0 fix on issue #00114 Incorrect user password for manual settlement, if settlements fails for online transaction 8 of 9
                    {   
                        memset(szFuncTitleName,0,sizeof(szFuncTitleName));
                        return d_OK;
                    }
										//#issue:23
                    /*else if(d_KBD_CANCEL == Bret)
                        			return Bret;*/
										//#issue:23
                    else 
                    {
                        CTOS_LCDTClearDisplay();    
                        vdDisplayErrorMsg(1, 8, "WRONG PASSWORD");
                        shRsesult = FAIL;
                        break;
                    }
                }
                else if(SYSTERM_PW== strPIT.inPasswordLevel)
                {
										if (strlen(szFuncTitleName) <= 0)
                   	{
    										/* BDO CLG: Fleet card support - start -- jzg */
    										//if(srTransRec.fFleetCard == TRUE)
                        					//	vdDispTransTitle(FLEET_SALE);
    										//else
    										/* BDO CLG: Fleet card support - end -- jzg */
                        						vdDispTransTitle(srTransRec.byTransType);
                   	}
									 else
									 	   vdDispTitleString(szFuncTitleName); //aaronnino for BDOCLG ver 9.0 fix on issue #0093 Have a function title for function keys shorcut 5 of 6
										
                    CTOS_LCDTPrintXY(1, 3,"SYSTEM PASSWORD:");

                    //Bret = InputString(1, 4, 0x01, 0x02,szOutput, &shMaxLen, shMinLen, d_INPUT_TIMEOUT);
                    Bret = InputString(1, 4, 0x01, 0x02,szOutput, &shMaxLen, shMinLen, inGetIdleTimeOut(FALSE)); /*BDO: Parameterized idle timeout --sidumili*/

										//issue:285
										if (Bret == 255) //timeout
										  {
											  memset(szFuncTitleName,0,sizeof(szFuncTitleName));
												CTOS_LCDTPrintXY(1, 3,"                 ");
										    return Bret;
											}
									  //issue:285

										//#issue:231
										if(d_KBD_CANCEL == Bret)
                    	{
											  memset(szFuncTitleName,0,sizeof(szFuncTitleName));
												CTOS_LCDTPrintXY(1, 3,"                 ");
										    return Bret;
											}
										else
										//#issue:231

                   /* if( (strcmp(szOutput,strTCT.szSystemPW) == 0) ||(strcmp(szOutput,strTCT.szEngineerPW) == 0))*/
										if (strcmp(szOutput,strTCT.szSystemPW)==0) //aaronnino for BDOCLG ver 9.0 fix on issue #00114 Incorrect user password for manual settlement, if settlements fails for online transaction 9 of 9
                    {    
                        memset(szFuncTitleName,0,sizeof(szFuncTitleName));
                        return d_OK;
                    }
										//#issue:23
                    /*else if(d_KBD_CANCEL == Bret)
                        			return Bret;*/
										//#issue:23
                    else 
                    {
                        CTOS_LCDTClearDisplay();    
                        vdDisplayErrorMsg(1, 8, "WRONG PASSWORD");
                        shRsesult = FAIL;                       
                        break;
                    }
                }   
                else if(ENGINEERPW== strPIT.inPasswordLevel)            
                {
                   if (strlen(szFuncTitleName) <= 0)
                   {
                      /* BDO CLG: Fleet card support - start -- jzg */
                      //if(srTransRec.fFleetCard == TRUE)
                      //	vdDispTransTitle(FLEET_SALE);
                      //else
                      /* BDO CLG: Fleet card support - end -- jzg */
                      vdDispTransTitle(srTransRec.byTransType);
                   }
                   else
                      vdDispTitleString(szFuncTitleName); //aaronnino for BDOCLG ver 9.0 fix on issue #0093 Have a function title for function keys shorcut 6 of 6

					          CTOS_LCDTPrintXY(1, 3,"PASSWORD:");

                    //Bret = InputString(1, 4, 0x01, 0x02,szOutput, &shMaxLen, shMinLen, d_INPUT_TIMEOUT);
                    Bret = InputString(1, 4, 0x01, 0x02,szOutput, &shMaxLen, shMinLen, inGetIdleTimeOut(FALSE)); /*BDO: Parameterized idle timeout --sidumili*/

										//issue:285
										if (Bret == 255) //timeout
										  {
											  memset(szFuncTitleName,0,sizeof(szFuncTitleName));
												CTOS_LCDTPrintXY(1, 3,"                 ");
										    return Bret;
											}
									  //issue:285
										
										//#issue:231
										if(d_KBD_CANCEL == Bret)
                    	{
											  memset(szFuncTitleName,0,sizeof(szFuncTitleName));
												CTOS_LCDTPrintXY(1, 3,"                 ");
										    return Bret;
											}
										else
										//#issue:231

                    if(strcmp(szOutput,strTCT.szEngineerPW) == 0)
                    {       
                        memset(szFuncTitleName,0,sizeof(szFuncTitleName));
                        return d_OK;
                    }
										//#issue:23
                    /*else if(d_KBD_CANCEL == Bret)
                        			return Bret;*/
										//#issue:23
                    {
                        CTOS_LCDTClearDisplay();    
                        vdDisplayErrorMsg(1, 8, "WRONG PASSWORD");
                        shRsesult = FAIL;                       
                        break;
                    }

                }
                else
                {    
                    memset(szFuncTitleName,0,sizeof(szFuncTitleName));
                    return d_OK;
                }
                

            default:
                memset(szFuncTitleName,0,sizeof(szFuncTitleName));
                return d_OK;        

        }
        if(FAIL == shRsesult)
            shCount ++ ;
    }

    return shRsesult;

}



int inCTOS_SelectHost(void) 
{
    short shGroupId ;
    int inHostIndex;
    short shCommLink;
    int inCurrencyIdx=0;
	char szAscBuf[4 + 1], szBcdBuf[2 + 1];

	/* BDO: Make sure we use the BDO Credit host details first - start -- jzg */
	if(srTransRec.byTransType == BIN_VER)
		inHostIndex = inGetCreditHostIndex();
	else
		inHostIndex = (short)strCDT.HDTid;
	/* BDO: Make sure we use the BDO Credit host details first - end -- jzg */

	vdDebug_LogPrintf("inCTOS_SelectHost::Txn Type = [%d]", srTransRec.byTransType);
	vdDebug_LogPrintf("inCTOS_SelectHost = [%d]", inHostIndex);

	if(inMultiAP_CheckSubAPStatus() == d_OK)
		return d_OK;

	if(inHDTRead(inHostIndex) != d_OK)
	{
		vdSetErrorMessage("HOST SELECTION ERR");
		return(d_NO);
	} 
	else 
	{
		srTransRec.HDTid = inHostIndex;

		inCurrencyIdx = strHDT.inCurrencyIdx;

		if(inCSTRead(inCurrencyIdx) != d_OK) 
		{
			vdSetErrorMessage("LOAD CST ERR");
			return(d_NO);
		}

		if(inCPTRead(inHostIndex) != d_OK)
		{
			vdSetErrorMessage("LOAD CPT ERR");
			return(d_NO);
		}

		if (srTransRec.byEntryMode == CARD_ENTRY_WAVE)
		if (strCST.inCurrencyIndex > 1)
		{
			memset(szAscBuf, 0x00, sizeof(szAscBuf));	
			memset(szBcdBuf, 0x00, sizeof(szBcdBuf));
		
			sprintf(szAscBuf,"%4s",strCST.szCurCode);	
			
			wub_str_2_hex(szAscBuf, szBcdBuf, 4);
			memcpy((char *)srTransRec.stEMVinfo.T5F2A, &szBcdBuf[0], 2);
			DebugAddHEX("T5F2A..",srTransRec.stEMVinfo.T5F2A,2);
		}
		return (d_OK);
	}
}



int inCTOS_SelectHostEx(void) 
{
    short shGroupId ;
    int inHostIndex;
    short shCommLink;
    int inCurrencyIdx=0;
	char szAscBuf[4 + 1], szBcdBuf[2 + 1];

	/* BDO: Make sure the ATP BIN Routing must use the first HDT- start -- jzg */
	inHostIndex = 1;
	/* BDO: Make sure the ATP BIN Routing must use the first HDT - end -- jzg */

	vdDebug_LogPrintf("inCTOS_SelectHost::Txn Type = [%d]", srTransRec.byTransType);
	vdDebug_LogPrintf("inCTOS_SelectHost = [%d]", inHostIndex);

	if(inMultiAP_CheckSubAPStatus() == d_OK)
		return d_OK;

	if(inHDTRead(inHostIndex) != d_OK)
	{
		vdSetErrorMessage("HOST SELECTION ERR");
		return(d_NO);
	} 
	else 
	{
		srTransRec.HDTid = inHostIndex;

		inCurrencyIdx = strHDT.inCurrencyIdx;

		if(inCSTRead(inCurrencyIdx) != d_OK) 
		{
			vdSetErrorMessage("LOAD CST ERR");
			return(d_NO);
		}

		if(inCPTRead(inHostIndex) != d_OK)
		{
			vdSetErrorMessage("LOAD CPT ERR");
			return(d_NO);
		}

		if (srTransRec.byEntryMode == CARD_ENTRY_WAVE)
		if (strCST.inCurrencyIndex > 1)
		{
			memset(szAscBuf, 0x00, sizeof(szAscBuf));	
			memset(szBcdBuf, 0x00, sizeof(szBcdBuf));
		
			sprintf(szAscBuf,"%4s",strCST.szCurCode);	
			
			wub_str_2_hex(szAscBuf, szBcdBuf, 4);
			memcpy((char *)srTransRec.stEMVinfo.T5F2A, &szBcdBuf[0], 2);
			DebugAddHEX("T5F2A..",srTransRec.stEMVinfo.T5F2A,2);
		}
		return (d_OK);
	}
}


int inCTOS_getCardCVV2(BYTE *baBuf)
{
    USHORT usRet;
    USHORT usInputLen;
    USHORT usLens;
    USHORT usMinLen = 3;
    USHORT usMaxLen = 4;
    BYTE bBuf[4+1];
    BYTE bDisplayStr[MAX_CHAR_PER_LINE+1];

    CTOS_LCDTClearDisplay();
    vdDispTransTitle(srTransRec.byTransType);

    if(CARD_ENTRY_MANUAL == srTransRec.byEntryMode)
    {
        setLCDPrint(2, DISPLAY_POSITION_LEFT, "CARD NO: ");
        memset(bDisplayStr, 0x00, sizeof(bDisplayStr));
        strcpy(bDisplayStr, srTransRec.szPAN);
        CTOS_LCDTPrintXY(MAX_CHAR_PER_LINE-strlen(bDisplayStr)*2, 3, bDisplayStr);
        setLCDPrint(5, DISPLAY_POSITION_LEFT, "EXPIRY DATE(MM/YY):");

        memset(bDisplayStr, 0x00, sizeof(bDisplayStr));
        memset(bBuf, 0x00, sizeof(bBuf));
        wub_hex_2_str(&srTransRec.szExpireDate[1], &bBuf[0], 1);
        memcpy(bDisplayStr, bBuf, 2);
        bDisplayStr[2] = '/';
        memset(bBuf, 0x00, sizeof(bBuf));
        wub_hex_2_str(&srTransRec.szExpireDate[0], &bBuf[0], 1);
        memcpy(bDisplayStr+3, bBuf, 2);
        CTOS_LCDTPrintXY(MAX_CHAR_PER_LINE-strlen(bDisplayStr)*2, 6, bDisplayStr);
        
        usInputLen = 7;
    }
//gcitra
/*
    else
    {
		inCTOS_DisplayCardTitle(6, 7); //Display Issuer logo: re-aligned Issuer label and PAN lines -- jzg
        usInputLen = 7;
    }
*/
//gcitra
    
    setLCDPrint(usInputLen, DISPLAY_POSITION_LEFT, "CVV2: ");
    
    while(1)
    {
        //usRet = shCTOS_GetNum(usInputLen+1, 0x01, baBuf, &usLens, usMinLen, usMaxLen, 1, d_INPUT_TIMEOUT);
        usRet = shCTOS_GetNum(usInputLen+1, 0x01, baBuf, &usLens, usMinLen, usMaxLen, 1, inGetIdleTimeOut(FALSE)); /*BDO: Parameterized idle timeout --sidumili*/
        if (usRet == d_KBD_CANCEL )
            return (d_EDM_USER_CANCEL);
        if (usRet >= usMinLen && usRet <= usMaxLen)
        {
            return (d_OK);   
        }
        else if(0 == usRet)
        {
            return (d_OK);   
        }

        baBuf[0] = 0x00;
    }
}

int inCTOS_GetCVV2()
{
    BYTE szCVV2Code[CVV2_SIZE + 1];
    int inResult = FAIL;
    BYTE key;
    short shCount = 0;
    DebugAddSTR("inCTOS_GetCVV2","Processing...",20);

    memset(srTransRec.szCVV2 , 0x00, sizeof(srTransRec.szCVV2));
    memset(szCVV2Code , 0x00, sizeof(szCVV2Code));

    if(CVV2_NONE == strCDT.inCVV_II)
    {
        return d_OK;
    }

		/*sidumili: Issue#:000051 [REMOVE CVV2 ENTRY ON MANUAL ENTRY]*/
		if (srTransRec.byEntryMode == CARD_ENTRY_MANUAL){
			return d_OK;
		}

    while(shCount < 3)
    {
        
        if(((CVV2_MANUAL == strCDT.inCVV_II) &&( CARD_ENTRY_MANUAL == srTransRec.byEntryMode))
        || ((CVV2_MSR == strCDT.inCVV_II) &&(( CARD_ENTRY_MSR == srTransRec.byEntryMode) ||( CARD_ENTRY_FALLBACK == srTransRec.byEntryMode)))
        || ((CVV2_MANUAL_MSR == strCDT.inCVV_II) &&(( CARD_ENTRY_MANUAL == srTransRec.byEntryMode) ||( CARD_ENTRY_MSR == srTransRec.byEntryMode) ||( CARD_ENTRY_FALLBACK == srTransRec.byEntryMode)))
        || ((CVV2_MANUAL_MSR_CHIP == strCDT.inCVV_II) &&(( CARD_ENTRY_MANUAL == srTransRec.byEntryMode) ||( CARD_ENTRY_MSR == srTransRec.byEntryMode) ||( CARD_ENTRY_FALLBACK == srTransRec.byEntryMode) || ( CARD_ENTRY_ICC == srTransRec.byEntryMode))))
        {
            CTOS_KBDBufFlush();

            inResult = inCTOS_getCardCVV2(szCVV2Code);
            if(d_OK == inResult)
            {
                strcpy(srTransRec.szCVV2,szCVV2Code);
                return d_OK;
            }
            else
            {
                if(d_EDM_USER_CANCEL == inResult)
                {
                    vdSetErrorMessage("USER CANCEL");
                    return inResult;
                }
                
                memset(szCVV2Code , 0x00, sizeof(szCVV2Code));
                vdDisplayErrorMsg(1, 8, "INVALID CVV");

                break;  
            }   
        }
        else
        {
            return d_OK;
        }

        shCount ++ ;
    }
    vdSetErrorMessage("Get CVV ERR");
    return FAIL;
    
}

void vdCTOSS_EMV_SetAmount(void)
{
	BYTE szBaseAmount[20];
	BYTE szTipAmount[20];
	BYTE szTotalAmount[20];
	BYTE   EMVtagVal[64];
	BYTE   szStr[64];
	BYTE  byDataTmp1[32];
	BYTE  byDataTmp2[32];
	BYTE  bPackSendBuf[256];
	USHORT usPackSendLen = 0;
	USHORT ushEMVtagLen;
	ULONG lnTmp;
		
  memset(byDataTmp1, 0x00, sizeof(byDataTmp1));
  memset(byDataTmp2, 0x00, sizeof(byDataTmp2));
  wub_hex_2_str(srTransRec.szTotalAmount, byDataTmp1, 6);

  inCTOSS_PutEnvDB ("BDOAMOUT", byDataTmp1);
  inCTOSS_PutEnvDB ("BDOCURS", strCST.szCurSymbol);

}


int inCTOS_EMVProcessing()
{
    int inRet;
    BYTE   EMVtagVal[64];
		BYTE bySC_status; //Issue# 000065 -- jzg


	//gcitra-0728
	CTOS_LCDTClearDisplay();
	//gcitra-0728

    if( CARD_ENTRY_ICC == srTransRec.byEntryMode)
    {
	    inCTOS_EMVSetTransType(srTransRec.byTransType);
   		inCTOSS_CheckNSR(0);
		
        vdCTOSS_EMV_SetAmount();
		
        inRet = usCTOSS_EMV_TxnPerform();
		
		//inCTOS_EMVSetTransType(srTransRec.byTransType);

        inCTOS_FirstGenACGetAndSaveEMVData();
        
		inCTOSS_CheckNSR(1);
		
        EMVtagVal[0] = srTransRec.stEMVinfo.T9F27;

            
        switch( EMVtagVal[0] & 0xC0)
        {
            case 0: //Declined --- AAC  
                strcpy(srTransRec.szAuthCode,"Z1");

							/* Issue# 000065 - start -- jzg */
							CTOS_SCStatus(d_SC_USER, &bySC_status);
							if (!(bySC_status & d_MK_SC_PRESENT))
								vdSetErrorMessage("CHIP MALFUNCTION");
							else
							vdSetErrorMessage("EMV Decline");
							/* Issue# 000065 - end -- jzg */
								
                vdDebug_LogPrintf("1st ACs, card dec");
               
                return EMV_CRITICAL_ERROR;
        
            case 0x40: //Approval --- TC
                strcpy(srTransRec.szAuthCode,"Y1");
                srTransRec.shTransResult = TRANS_AUTHORIZED;

								srTransRec.fVoidOffline = CN_TRUE;
								
                vdDebug_LogPrintf("1nd AC app");
                break;
                
            case 0x80: //ARQC
                vdDebug_LogPrintf("go online");
                break; 
                
            default:
                strcpy(srTransRec.szAuthCode,"Z1");
                
								/* Issue# 000065 - start -- jzg */
								CTOS_SCStatus(d_SC_USER, &bySC_status);
								if (!(bySC_status & d_MK_SC_PRESENT))
											vdSetErrorMessage("CHIP MALFUNCTION");
								else
											vdSetErrorMessage("EMV Decline");
								/* Issue# 000065 - end -- jzg */
                
                return EMV_CRITICAL_ERROR;
        
        }

        vdDebug_LogPrintf("usCTOSS_EMV_TxnPerform return[%d]", inRet);
        if (inRet != d_OK)
            vdSetErrorMessage("First GenAC ERR");
        return inRet;

    }
    
    return d_OK;
}

int inCTOS_CheckTipAllowd()
{   

    if(SALE_TIP == srTransRec.byTransType)
    {
        if (inMultiAP_CheckSubAPStatus() == d_OK)
            return d_OK;
    }

    if (TRUE !=strTCT.fTipAllowFlag)
    {
        if (SALE_TIP == srTransRec.byTransType)
            vdSetErrorMessage("TIP NOT ALLWD");
        
        return d_NO;
    }

//1010
	if(srTransRec.byVoided == TRUE)
	{
		vdSetErrorMessage("TIP NOT ALLWD");
		return d_NO;
	}
//1010

    return d_OK;
}



SHORT shCTOS_EMVAppSelectedProcess(void)
{
    short shResult;
    BYTE SelectedAID[16]; 
    USHORT SelectedAIDLen = 0;
    BYTE label[32];
    USHORT label_len = 0;
    BYTE PreferAID[128];
    CTOS_RTC SetRTC;
    
    //vdDebug_LogPrintf("-------EMV_TxnAppSelect-----"); 
    memset(PreferAID,0,sizeof(PreferAID));
    memset(label,0,sizeof(label));
    
    shResult = usCTOSS_EMV_TxnAppSelect(PreferAID, 0, SelectedAID, &SelectedAIDLen, label, &label_len);
    vdDebug_LogPrintf("-EMV_TxnAppSelect=[%d] SelectedAIDLen[%d] label[%s]fback[%d]",shResult, SelectedAIDLen, label,strEMVT.inEMVFallbackAllowed);
    if(d_OK == shResult)
        DebugAddHEX("SelectedAIDLen", SelectedAID, SelectedAIDLen);
    
    if((shResult != PP_OK) && (shResult != EMV_USER_ABORT))
    {
		//EMV: should display "CHIP NOT DETECTED" instead of doing fallback - start -- jzg
		if (shResult == EMV_CHIP_NOT_DETECTED)
		{
			vdDisplayErrorMsg(1, 8, "CHIP NOT DETECTED");
			return EMV_CHIP_FAILED;
		}
		//EMV: should display "CHIP NOT DETECTED" instead of doing fallback - end -- jzg

		//EMV: If AID not found display "TRANS NOT ALLOWED" - start -- jzg
		if (shResult == EMV_TRANS_NOT_ALLOWED)
		{
		  //0424
			//vdDisplayErrorMsg(1, 8, "TRANS NOT ALLOWED");
			vduiClearBelow(2);
			vdDisplayErrorMsg(1, 8, "PLEASE SWIPE CARD");
			return EMV_TRANS_NOT_ALLOWED;
			//0424
		}
		//EMV: If AID not found display "TRANS NOT ALLOWED" - end -- jzg

		//VISA: Testcase 29 - should display "CARD BLOCKED" instead of doing fallback - start -- jzg
		if (shResult == EMV_CARD_BLOCKED)
		{
			inFallbackToMSR = FAIL;
			vdDisplayErrorMsg(1, 8, "CARD BLOCKED");
			return EMV_CHIP_FAILED;
		}
		//VISA: Testcase 29 - should display "CARD BLOCKED" instead of doing fallback - end -- jzg
        if(EMV_FALLBACK == shResult)
        {
            //0826
            //vdDisplayErrorMsg(1, 8, "PLS SWIPE CARD");
            vdDisplayErrorMsg(1, 8, "CHIP NOT DETECTED");
			//0826
            
            CTOS_RTCGet(&SetRTC);
            inFallbackToMSR = SUCCESS;
            sprintf(strTCT.szFallbackTime,"%02d%02d%02d",SetRTC.bHour,SetRTC.bMinute,SetRTC.bSecond);
        }
        else
        {
            vdDisplayErrorMsg(1, 8, "READ CARD FAILED");
        }
        
        return EMV_CHIP_FAILED;
    }
    
    if(shResult == EMV_USER_ABORT)
    {
        

        if(strEMVT.inEMVFallbackAllowed)
        {
            //0826
            //vdDisplayErrorMsg(1, 8, "PLS SWIPE CARD");
            vdDisplayErrorMsg(1, 8, "CHIP NOT DETECTED");
			//0826
            
            CTOS_RTCGet(&SetRTC);
            inFallbackToMSR = SUCCESS;
            sprintf(strTCT.szFallbackTime,"%02d%02d%02d",SetRTC.bHour,SetRTC.bMinute,SetRTC.bSecond);
        }
        else
        {
            vdDisplayErrorMsg(1, 8, "READ CARD FAILED");
        }

        
        return EMV_USER_ABORT;
    }

    return d_OK;
        
}

short shCTOS_EMVSecondGenAC(BYTE *szIssuerScript, UINT inIssuerScriptlen)
{
#define ACT_ONL_APPR 1
#define ACT_ONL_DENY 2
#define ACT_UNAB_ONL 3
#define ACT_ONL_ISSUER_REFERRAL 4           //From Host
#define ACT_ONL_ISSUER_REFERRAL_APPR 4
#define ACT_ONL_ISSUER_REFERRAL_DENY 5

    USHORT usResult;
    EMV_ONLINE_RESPONSE_DATA st2ACResponseData;
    BYTE   EMVtagVal[64];
		BYTE bySC_status; //Issue# 000065 -- jzg

    memset(&st2ACResponseData,0,sizeof(st2ACResponseData));

    //st2ACData.iAction will decide trans approve or not
    if(srTransRec.shTransResult == TRANS_COMM_ERROR)
        st2ACResponseData.bAction = ACT_UNAB_ONL;
    else if(srTransRec.shTransResult == TRANS_REJECTED)
        st2ACResponseData.bAction = ACT_ONL_DENY;
    else if(srTransRec.shTransResult == TRANS_CALL_BANK)
        st2ACResponseData.bAction = ACT_ONL_ISSUER_REFERRAL;
    else if(srTransRec.shTransResult == TRANS_AUTHORIZED)
        st2ACResponseData.bAction = ACT_ONL_APPR;
    
    //memset(szIssuerScript,0,sizeof(szIssuerScript));
    st2ACResponseData.pAuthorizationCode = srTransRec.szRespCode;  
    st2ACResponseData.pIssuerAuthenticationData = srTransRec.stEMVinfo.T91;
    st2ACResponseData.IssuerAuthenticationDataLen = srTransRec.stEMVinfo.T91Len;
    st2ACResponseData.pIssuerScript = szIssuerScript;
    st2ACResponseData.IssuerScriptLen = inIssuerScriptlen;

    usResult = TRANS_AUTHORIZED;

    usResult = usCTOSS_EMV_TxnCompletion(&st2ACResponseData);

    vdDebug_LogPrintf("PP_iCompletion:%d ", usResult);

    inCTOS_SecondGenACGetAndSaveEMVData();
    
    if(VS_TRUE == strTCT.fDemo)
    {
        usResult = PP_OK;
        EMVtagVal[0] = 0x40;
    }
    if(usResult != PP_OK)
    {
        if(strcmp((char *)srTransRec.szRespCode, "00") ==  0)
            vdSetErrorMessage("EMV Decline");
        
        return EMV_CRITICAL_ERROR;
    }

    EMVtagVal[0] = srTransRec.stEMVinfo.T9F27;
        
    switch( EMVtagVal[0] & 0xC0)
    {
        case 0: //Declined --- AAC
            if(strcmp((char *)srTransRec.szRespCode, "00") ==  0)  //approve by host, but not by card
            {
                
								/* Issue# 000065 - start -- jzg */
										CTOS_SCStatus(d_SC_USER, &bySC_status);
								if (!(bySC_status & d_MK_SC_PRESENT))
										vdSetErrorMessage("CHIP MALFUNCTION");
								else
										vdSetErrorMessage("EMV Decline");
								/* Issue# 000065 - end -- jzg */
                
                vdDebug_LogPrintf("Host app, card dec");
            }
            else
            {
                vdDebug_LogPrintf("Host reject");
            }
            return EMV_CRITICAL_ERROR;

        case 0x40: //Approval --- TC
			vdDebug_LogPrintf("2nd AC app");
			if (srTransRec.shTransResult != TRANS_AUTHORIZED)  //not approve by host, but approve by card
			{
				
				/* Issue# 000065 - start -- jzg */
					CTOS_SCStatus(d_SC_USER, &bySC_status);
					if (!(bySC_status & d_MK_SC_PRESENT))
							vdSetErrorMessage("CHIP MALFUNCTION");
					else
							vdSetErrorMessage("EMV Decline");
					/* Issue# 000065 - end -- jzg */
				
				vdDebug_LogPrintf("Host decline, card approve");
				return EMV_CRITICAL_ERROR;								
				}
			break;
        
        default:
            
						/* Issue# 000065 - start -- jzg */
						CTOS_SCStatus(d_SC_USER, &bySC_status);
						if (!(bySC_status & d_MK_SC_PRESENT))
									vdSetErrorMessage("CHIP MALFUNCTION");
						else
									vdSetErrorMessage("EMV Decline");
						/* Issue# 000065 - end -- jzg */
            
            return EMV_CRITICAL_ERROR;

    }
    
    vdDebug_LogPrintf("End 2nd GenAC shTransResult=%d iAction=%d",srTransRec.shTransResult, st2ACResponseData.bAction);
    return PP_OK;
    
}

int inCTOS_EMVTCUpload(void)
{
    int inRet;


//1010
	if ((strTCT.fTrickleFeedEMVUpload == VS_FALSE) && (srTransRec.byTransType != SETTLE))		
    	return d_OK;
//1010

//0929
    //if( CARD_ENTRY_ICC == srTransRec.byEntryMode) 
    if((CARD_ENTRY_ICC == srTransRec.byEntryMode)|| 

	((CARD_ENTRY_WAVE == srTransRec.byEntryMode) &&
	((srTransRec.bWaveSID == d_VW_SID_JCB_WAVE_QVSDC) ||
	(srTransRec.bWaveSID == d_VW_SID_AE_EMV) ||
	(srTransRec.bWaveSID == d_VW_SID_CUP_EMV) ||
	(srTransRec.bWaveSID == d_VW_SID_PAYPASS_MCHIP) ||
	(srTransRec.bWaveSID == d_VW_SID_JCB_WAVE_2) ||
	(srTransRec.bWaveSID == d_VW_SID_VISA_WAVE_QVSDC))))
//0929
    {
        inCTLOS_Updatepowrfail(PFR_IDLE_STATE);
        inRet = inProcessEMVTCUpload(&srTransRec, -1);// TC upload

            vdDebug_LogPrintf("szFileName, %s%02d%02d.rev"
                                , strHDT.szHostLabel
                                , strHDT.inHostIndex
                                , srTransRec.MITid);
//        inCTOS_inDisconnect();
    }
    
    return d_OK;
}


int inCTOS_GetPubKey(const char *filename, unsigned char *modulus, int *mod_len, unsigned char *exponent, int *exp_len)
{
    unsigned char tmp[1024];
    int iRead;
    int iMod;
    int iExp;
    FILE  *fPubKey;                   
    UINT uintRet ;             

    fPubKey = fopen( (char*)filename, "rb" );
    if (fPubKey == NULL)
        return CTOS_RET_PARAM;

    uintRet = fread( tmp, 1, sizeof(tmp), fPubKey );
    fclose(fPubKey);  
    vdDebug_LogPrintf("CAPK=Len[%d]==[%s]",uintRet,tmp);
    
    if(uintRet >0)
    {
        iMod=(int)(tmp[0]-0x30)*100+(tmp[1]-0x30)*10+(tmp[2]-0x30);     
        vdDebug_LogPrintf("iMod===[%d]",iMod);
        if(iMod%8 != 0)
            return(CTOS_RET_PARAM);

        if(iMod > CTOS_PED_RSA_MAX)
            return(CTOS_RET_PARAM);

        *mod_len=iMod;      
        wub_str_2_hex((tmp+3), (modulus), iMod*2);
        
        vdDebug_LogPrintf("*mod_len===[%d]",*mod_len);
        DebugAddHEX("Module HEX string===", modulus, iMod);

        
        iExp=(int)tmp[iMod*2+4] - 0x30;
        wub_str_2_hex((&tmp[5+(iMod*2)]), (exponent), iExp*2);

        vdDebug_LogPrintf("iExp===[%d]",iExp);      
        DebugAddHEX("Exponent HEX string===", exponent, iExp);

        *exp_len = iExp;        
    }
    else
        return(CTOS_RET_CALC_FAILED);

    return(CTOS_RET_OK);
}

USHORT ushCTOS_EMV_NewDataGet(IN USHORT usTag, INOUT USHORT *pLen, OUT BYTE *pValue)
{
    USHORT usResult;
    USHORT usTagLen;
    static USHORT usGetEMVTimes = 0;
    
    usResult = usCTOSS_EMV_DataGet(usTag, &usTagLen, pValue);
    *pLen = usTagLen;

    usGetEMVTimes ++;
    vdDebug_LogPrintf("ushCTOS_EMV_NewDataGet Times[%d] usTagLen[%d]",usGetEMVTimes, usTagLen);
    return usResult;

}

USHORT ushCTOS_EMV_NewTxnDataSet(IN USHORT usTag, IN USHORT usLen, IN BYTE *pValue)
{
    USHORT usResult;
    static USHORT usSetEMVTimes = 0;

    usResult = usCTOSS_EMV_DataSet(usTag, usLen, pValue);
    usSetEMVTimes ++;
    vdDebug_LogPrintf("ushCTOS_EMV_NewTxnDataSet Times[%d] usResult[%d]",usSetEMVTimes, usResult);

    return usResult;
}

short shCTOS_EMVGetChipDataReady(void)
{
    short       shResult;
    BYTE        byDataTmp1[64];
    BYTE        byVal[64];
    USHORT      usLen;
    USHORT      inIndex ;
    BYTE        szDataTmp[5];
    BYTE szGetEMVData[128];
    BYTE szOutEMVData[2048];
    
    USHORT inTagLen = 0;
    


 
    memset(szGetEMVData,0,sizeof(szGetEMVData));
    memset(szOutEMVData,0,sizeof(szOutEMVData));

    shResult = usCTOSS_EMV_MultiDataGet(GET_EMV_TAG_AFTER_SELECT_APP, &inTagLen, szOutEMVData);
    DebugAddHEX("GET_EMV_TAG_AFTER_SELECT_APP",szOutEMVData,inTagLen);
        
    shResult = usCTOSS_FindTagFromDataPackage(TAG_57, byVal, &usLen, szOutEMVData, inTagLen);
    vdDebug_LogPrintf("-------TAG_57[%d] usLen[%d] [%02X %02X %02X]--", shResult, usLen, byVal[0], byVal[1], byVal[2]);

    memset(byDataTmp1, 0x00, sizeof(byDataTmp1));
    wub_hex_2_str(byVal, byDataTmp1, usLen);
    memcpy(srTransRec.szTrack2Data, byDataTmp1, (usLen*2));
    for(inIndex = 0; inIndex < (usLen*2); inIndex++)
    {
        if(byDataTmp1[inIndex] == 'F')
            srTransRec.szTrack2Data[inIndex]=0;
    }
    vdDebug_LogPrintf("szTrack2Data: %s %d", srTransRec.szTrack2Data, inIndex);

		srTransRec.usTrack2Len = inIndex - 1; //BDOCLG-00110: CUP EMV contact has no DE35 -- jzg
    
    for(inIndex = 0; inIndex < (usLen*2); inIndex++)
    {
        if(byDataTmp1[inIndex] != 'D')
            srTransRec.szPAN[inIndex] = byDataTmp1[inIndex];
        else
            break;
    }
    srTransRec.byPanLen = inIndex;
    vdDebug_LogPrintf("PAN: %s %d", srTransRec.szPAN, inIndex);
    inIndex++;
    memset(szDataTmp, 0x00, sizeof(szDataTmp));
    wub_str_2_hex(&byDataTmp1[inIndex], szDataTmp, 4);
    srTransRec.szExpireDate[0] = szDataTmp[0];
    srTransRec.szExpireDate[1] = szDataTmp[1];
    vdMyEZLib_LogPrintf("EMV functions Expiry Date [%02x%02x]",srTransRec.szExpireDate[0],srTransRec.szExpireDate[1]);
    inIndex = inIndex + 4;
    memcpy(srTransRec.szServiceCode, &byDataTmp1[inIndex], 3);

    shResult = usCTOSS_FindTagFromDataPackage(TAG_5A_PAN, srTransRec.stEMVinfo.T5A, &usLen, szOutEMVData, inTagLen);
    vdDebug_LogPrintf("-------TAG_5A_PAN[%d] usLen[%d] [%02X %02X %02X]--", shResult, usLen, srTransRec.stEMVinfo.T5A[0], srTransRec.stEMVinfo.T5A[1], srTransRec.stEMVinfo.T5A[2]);

    srTransRec.stEMVinfo.T5A_len = (BYTE)usLen;
    shResult = usCTOSS_FindTagFromDataPackage(TAG_5F30_SERVICE_CODE, srTransRec.stEMVinfo.T5F30, &usLen, szOutEMVData, inTagLen);
    
    memset(byVal, 0x00, sizeof(byVal));
    shResult = usCTOSS_FindTagFromDataPackage(TAG_5F34_PAN_IDENTFY_NO, byVal, &usLen, szOutEMVData, inTagLen);
    vdMyEZLib_LogPrintf("5F34: %02x %d", byVal[0], usLen);
    srTransRec.stEMVinfo.T5F34_len = usLen;
    srTransRec.stEMVinfo.T5F34 = byVal[0];

    shResult = usCTOSS_FindTagFromDataPackage(TAG_82_AIP, srTransRec.stEMVinfo.T82, &usLen, szOutEMVData, inTagLen);
    vdDebug_LogPrintf("-------TAG_82_AIP-[%02x][%02x]-", srTransRec.stEMVinfo.T82[0], srTransRec.stEMVinfo.T82[1]); 

    shResult = usCTOSS_FindTagFromDataPackage(TAG_84_DF_NAME, srTransRec.stEMVinfo.T84, &usLen, szOutEMVData, inTagLen);
    srTransRec.stEMVinfo.T84_len = (BYTE)usLen;

    shResult = usCTOSS_FindTagFromDataPackage(TAG_5F24_EXPIRE_DATE, srTransRec.stEMVinfo.T5F24, &usLen, szOutEMVData, inTagLen);

    shResult = usCTOSS_FindTagFromDataPackage(TAG_9F08_IC_VER_NUMBER, szDataTmp, &usLen, szOutEMVData, inTagLen);
    vdDebug_LogPrintf("-------TAG_9F08_IC_VER_NUMBER-[%02x][%02x]-",szDataTmp[0],szDataTmp[1]);

    shResult = usCTOSS_FindTagFromDataPackage(TAG_9F09_TERM_VER_NUMBER, srTransRec.stEMVinfo.T9F09, &usLen, szOutEMVData, inTagLen);
    vdDebug_LogPrintf("-------TAG_9F09_TERM_VER_NUMBER-[%02x][%02x]-",srTransRec.stEMVinfo.T9F09[0],srTransRec.stEMVinfo.T9F09[1]); 
    if(usLen == 0)
        memcpy(srTransRec.stEMVinfo.T9F09, "\x00\x4C", 2);// can not get value from api like verifone,so i hardcode a value from EMV level 2 cert document
    vdDebug_LogPrintf("9F09: %02x%02x %d", srTransRec.stEMVinfo.T9F09[0],srTransRec.stEMVinfo.T9F09[1], usLen);

    shResult = usCTOSS_FindTagFromDataPackage(TAG_5F20, srTransRec.szCardholderName, &usLen, szOutEMVData, inTagLen);
    vdDebug_LogPrintf("5F20,szCardholderName: %s", srTransRec.szCardholderName);    
        
}

int inCTOS_FirstGenACGetAndSaveEMVData(void)
{
    USHORT usLen = 64;
    BYTE szGetEMVData[128];
    BYTE szOutEMVData[2048];
    USHORT inTagLen = 0;    
    int ret = 0;
    unsigned char szTransSeqCounter[6+1];
	unsigned char szHEXTransSeqCounter[3+1];

	BYTE bAppLabel[64] = {0}; // EMV: Get Application Label -- jzg 
	BYTE bAppPrefName[64] = {0}; // EMV: Get Application Preferred Name -- jzg

	//1026	
	char szAscBuf[4 + 1], szBcdBuf[2 + 1];
	//1026
	
    memset(szGetEMVData,0,sizeof(szGetEMVData));
    memset(szGetEMVData,0,sizeof(szGetEMVData));

    usCTOSS_EMV_MultiDataGet(GET_EMV_TAG_AFTER_1STAC, &inTagLen, szOutEMVData);
    DebugAddHEX("GET_EMV_TAG_AFTER_1STAC",szOutEMVData,inTagLen);

    vdDebug_LogPrintf("inCTOS_FirstGenACGetAndSaveEMVData");


	//1026
	if (strCST.inCurrencyIndex > 1){
		memset(szAscBuf, 0x00, sizeof(szAscBuf));	
		memset(szBcdBuf, 0x00, sizeof(szBcdBuf));
	
		sprintf(szAscBuf,"%4s",strCST.szCurCode);	
		
		wub_str_2_hex(szAscBuf, szBcdBuf, 4);
		memcpy((char *)srTransRec.stEMVinfo.T5F2A, &szBcdBuf[0], 2);

		/* BDO-00168: Make sure to populate EMV Tag 5F2A with the correct txn currency code -- jzg */
		ushCTOS_EMV_NewTxnDataSet(TAG_5F2A_TRANS_CURRENCY_CODE, 2, srTransRec.stEMVinfo.T5F2A); 
	}else
	//1026
    usCTOSS_FindTagFromDataPackage(TAG_5F2A_TRANS_CURRENCY_CODE, srTransRec.stEMVinfo.T5F2A, &usLen, szOutEMVData, inTagLen);



	/* EMV: Get Application Preferred Name - start -- jzg */
	usCTOSS_FindTagFromDataPackage(TAG_9F12, bAppPrefName, &usLen, szOutEMVData, inTagLen);
	vdDispAppLabel(bAppPrefName, usLen, srTransRec.stEMVinfo.szChipLabel);
	vdDebug_LogPrintf("TAG 9F12 = [%s]", srTransRec.stEMVinfo.szChipLabel);
	/* EMV: Get Application Preferred Name - end -- jzg */
	 
	vdDebug_LogPrintf("TAG 9F12 = [0x%02X]", srTransRec.stEMVinfo.szChipLabel[0]);
	 
	/* EMV: Get Application Label - start -- jzg */
	if ((!((srTransRec.stEMVinfo.szChipLabel[0] >= 'a') && (srTransRec.stEMVinfo.szChipLabel[0] <= 'z'))) ||
	(!((srTransRec.stEMVinfo.szChipLabel[0] >= 'A') && (srTransRec.stEMVinfo.szChipLabel[0] <= 'Z'))))
	{
		//memset(srTransRec.stEMVinfo.szChipLabel, 0, sizeof(srTransRec.stEMVinfo.szChipLabel));
		usCTOSS_FindTagFromDataPackage(TAG_50, bAppLabel, &usLen, szOutEMVData, inTagLen);

		if (strlen(bAppLabel) > 0){
			memset(srTransRec.stEMVinfo.szChipLabel, 0, sizeof(srTransRec.stEMVinfo.szChipLabel));
			vdDispAppLabel(bAppLabel, usLen, srTransRec.stEMVinfo.szChipLabel);
			vdDebug_LogPrintf("TAG 50 = [%s]", srTransRec.stEMVinfo.szChipLabel);
		}
	}

    usCTOSS_FindTagFromDataPackage(TAG_95, srTransRec.stEMVinfo.T95, &usLen, szOutEMVData, inTagLen);
    
    usCTOSS_FindTagFromDataPackage(TAG_9A_TRANS_DATE, srTransRec.stEMVinfo.T9A, &usLen, szOutEMVData, inTagLen);


	/* BDO: Quasi should be parametrized per issuer - start -- jzg */
	if((strIIT.fQuasiCash)  && ((srTransRec.byTransType == SALE) || (srTransRec.byTransType == SALE_OFFLINE)))
		srTransRec.stEMVinfo.T9C = 0x11;
	/* BDO: Quasi should be parametrized per issuer - end -- jzg */
	else
    	usCTOSS_FindTagFromDataPackage(TAG_9C_TRANS_TYPE, (BYTE *)&(srTransRec.stEMVinfo.T9C), &usLen, szOutEMVData, inTagLen);
	//Issue# 000141 - end -- jzg
        
    usCTOSS_FindTagFromDataPackage(TAG_9F06, srTransRec.stEMVinfo.T9F06, &usLen, szOutEMVData, inTagLen);
    
    usCTOSS_FindTagFromDataPackage(TAG_9F09_TERM_VER_NUMBER, srTransRec.stEMVinfo.T9F09, &usLen, szOutEMVData, inTagLen);
    
    usCTOSS_FindTagFromDataPackage(TAG_9F10_IAP, srTransRec.stEMVinfo.T9F10, &usLen, szOutEMVData, inTagLen);
    srTransRec.stEMVinfo.T9F10_len = usLen;


	//1026
	//if (strCST.inCurrencyIndex > 1){
	//	memset(szAscBuf, 0x00, sizeof(szAscBuf));	
	//	memset(szBcdBuf, 0x00, sizeof(szBcdBuf));
	
	//	sprintf(szAscBuf,"%4s",strCST.szCurCode);	
		
	//	wub_str_2_hex(szAscBuf, szBcdBuf, 4);
	//	memcpy((char *)srTransRec.stEMVinfo.T9F1A, &szBcdBuf[0], 2);
	//}else
	//1026
    usCTOSS_FindTagFromDataPackage(TAG_9F1A_TERM_COUNTRY_CODE, srTransRec.stEMVinfo.T9F1A, &usLen, szOutEMVData, inTagLen);
    
    usCTOSS_FindTagFromDataPackage(TAG_9F1E, srTransRec.stEMVinfo.T9F1E, &usLen, szOutEMVData, inTagLen);
    
    usCTOSS_FindTagFromDataPackage(TAG_9F26_EMV_AC, srTransRec.stEMVinfo.T9F26, &usLen, szOutEMVData, inTagLen);
    
    usCTOSS_FindTagFromDataPackage(TAG_9F27, (BYTE *)&(srTransRec.stEMVinfo.T9F27), &usLen, szOutEMVData, inTagLen);
    
    usCTOSS_FindTagFromDataPackage(TAG_9F33_TERM_CAB, srTransRec.stEMVinfo.T9F33, &usLen, szOutEMVData, inTagLen);
    
    usCTOSS_FindTagFromDataPackage(TAG_9F34_CVM, srTransRec.stEMVinfo.T9F34, &usLen, szOutEMVData, inTagLen);
    
    usCTOSS_FindTagFromDataPackage(TAG_9F35_TERM_TYPE, (BYTE *)&(srTransRec.stEMVinfo.T9F35), &usLen, szOutEMVData, inTagLen);
    
    usCTOSS_FindTagFromDataPackage(TAG_9F36_ATC, srTransRec.stEMVinfo.T9F36, &usLen, szOutEMVData, inTagLen);
    srTransRec.stEMVinfo.T9F36_len = usLen;
    
    usCTOSS_FindTagFromDataPackage(TAG_9F37_UNPREDICT_NUM, srTransRec.stEMVinfo.T9F37, &usLen, szOutEMVData, inTagLen);

    
    ret = inIITRead(srTransRec.IITid);
    vdDebug_LogPrintf("inIITRead[%d]",ret);
    sprintf(szTransSeqCounter, "%06ld", strIIT.ulTransSeqCounter);
    wub_str_2_hex(szTransSeqCounter, (char *)szHEXTransSeqCounter, 6);
    memcpy(srTransRec.stEMVinfo.T9F41,szHEXTransSeqCounter,3);
    strIIT.ulTransSeqCounter++;
    ret = inIITSave(srTransRec.IITid);    
    vdDebug_LogPrintf(" ret[%d] srTransRec.IITid[%d]strIIT.ulTransSeqCounter[%ld]",ret, srTransRec.IITid,strIIT.ulTransSeqCounter);
    //usCTOSS_FindTagFromDataPackage(TAG_9F41, srTransRec.stEMVinfo.T9F41, &usLen, szOutEMVData, inTagLen);
    
    usCTOSS_FindTagFromDataPackage(TAG_9F53, (BYTE *)&(srTransRec.stEMVinfo.T9F53), &usLen, szOutEMVData, inTagLen);

    return d_OK;
}

int inCTOS_SecondGenACGetAndSaveEMVData(void)
{

    USHORT usLen = 64;
    BYTE szGetEMVData[128];
    BYTE szOutEMVData[2048];
    USHORT inTagLen = 0;
    
    memset(szGetEMVData,0,sizeof(szGetEMVData));
    memset(szGetEMVData,0,sizeof(szGetEMVData));

    usCTOSS_EMV_MultiDataGet(GET_EMV_TAG_AFTER_2NDAC, &inTagLen, szOutEMVData);
    DebugAddHEX("GET_EMV_TAG_AFTER_1STAC",szOutEMVData,inTagLen);

    vdDebug_LogPrintf("inCTOS_SecondGenACGetAndSaveEMVData");
                
    usCTOSS_FindTagFromDataPackage(TAG_95, srTransRec.stEMVinfo.T95, &usLen, szOutEMVData, inTagLen);
                    
    usCTOSS_FindTagFromDataPackage(TAG_9F10_IAP, srTransRec.stEMVinfo.T9F10, &usLen, szOutEMVData, inTagLen);
    srTransRec.stEMVinfo.T9F10_len = usLen;
            
    usCTOSS_FindTagFromDataPackage(TAG_9F26_EMV_AC, srTransRec.stEMVinfo.T9F26, &usLen, szOutEMVData, inTagLen);
    
    usCTOSS_FindTagFromDataPackage(TAG_9F27, (BYTE *)&(srTransRec.stEMVinfo.T9F27), &usLen, szOutEMVData, inTagLen);
        
    usCTOSS_FindTagFromDataPackage(TAG_9F34_CVM, srTransRec.stEMVinfo.T9F34, &usLen, szOutEMVData, inTagLen);
                    
    return d_OK;
}

int inCTOS_showEMV_TagLog (void)
{
    #define TOTAL_TAGS  24
    int i;
    unsigned short tagLen;
    char outp[40];
    
    typedef struct
    {
            unsigned short Tags;
            char description[20];
    }print_tag;
    
    print_tag EMVTag[TOTAL_TAGS] = 
    { 
        {   TAG_95,                     "TVR"},         
        {   TAG_9B,                     "TSI"},
        {   TAG_9F26_EMV_AC,            "ARQC"},
        {   TAG_9F27,                   "Crypt Info Data"},
        {   TAG_9F10_IAP,               "Issuer Appl Data"},
        {   TAG_9F37_UNPREDICT_NUM,     "Unpredicte number"},
        {   TAG_9F36_ATC,               "Appl Trans Counter"},
        {   TAG_9A_TRANS_DATE,          "Trans Date"},
        {   TAG_9C_TRANS_TYPE,          "Trans Type"},
        {   TAG_5A_PAN,                 "PAN"},
        {   TAG_5F34_PAN_IDENTFY_NO,    "Sequence Num"},
        {   TAG_9F02_AUTH_AMOUNT,       "Amount Authorized"},
        {   TAG_9F03_OTHER_AMOUNT,      "Add Amount"},
        {   TAG_5F2A_TRANS_CURRENCY_CODE, "Trans Currency Code"},
        {   TAG_82_AIP,                 "AIP"},
        {   TAG_9F1A_TERM_COUNTRY_CODE, "Term Country Code"},
        {   TAG_9F34_CVM,               "CVR"},
        {   TAG_9F10_IAP,               "Issuer auth Data"},
        {   TAG_9F06,                   "AID"},
        {   TAG_50,                     "Appl Lable Name"},
        {   TAG_8F,                     "CA Public Key Index"},
        {   TAG_9F0D,                   "IAC Default"},
        {   TAG_9F0E,                   "IAC Denial"},
        {   TAG_9F0F,                   "IAC Online"}

    };


    for(i = 0; i<TOTAL_TAGS; i++)
    {
        memset(outp,0x00,sizeof(outp));
        ushCTOS_EMV_NewDataGet(EMVTag[i].Tags, &tagLen, outp);
        vdDebug_LogPrintf("----TAG[%s][%x]=====Len[%d]----",EMVTag[i].description,EMVTag[i].Tags,tagLen); 
        DebugAddHEX("Value===",outp,tagLen);
    }
    return d_OK;
}

void vdCTOSS_GetAmt(void)
{
	memcpy(srTransRec.szBaseAmount, szBaseAmount, 6);	
}

void vdCTOSS_SetAmt(BYTE *baAmount)
{
	BYTE szTemp[20];

	memset(szTemp, 0x00, sizeof(szTemp));
	// patrick add code 20141216
	sprintf(szTemp, "%012.0f", atof(baAmount));
	wub_str_2_hex(szTemp, szBaseAmount,12);	
}


//Installment - Promo selection function -- jzg
int inCTOS_SelectInstallmentPromo(void)
{
	int inNumRecs = 0,
		key = 0,
		i,
		bHeaderAttr = 0x01+0x04; 
	char szHeaderString[21];
	char szPromoLabelList[100] = {0};


	if (inMultiAP_CheckSubAPStatus() == d_OK)
	   return d_OK;


  /*  if (strCDT.fInstallmentEnable == 0){
		CTOS_LCDTPrintXY(1, 8, "INST NOT ALLWD");
		CTOS_Delay(3000);
		return d_NO;
    }*/

    //Select Instalment Promo type

    memset(szHeaderString, 0x00,sizeof(szHeaderString));
    memset(szPromoLabelList, 0x00,sizeof(szPromoLabelList));
	strcpy(szHeaderString,"SELECT PROMO");

	inPRMReadbyinInstGroup(strCDT.inInstGroup, &inNumRecs);
	
	for (i=0; i<inNumRecs; i++)
	{
		if (strMultiPRM[i].szPromoLabel[0] != 0)
		{
			strcat((char *)szPromoLabelList, strMultiPRM[i].szPromoLabel);
			if (strMultiPRM[i+1].szPromoLabel[0] != 0)
				strcat((char *)szPromoLabelList, (char *)" \n");			
		}
	}

  inSetColorMenuMode();
	//key = MenuDisplay(szHeaderString,strlen(szHeaderString), bHeaderAttr, 1, 1, szPromoLabelList, TRUE);
	key = MenuDisplayEx(szHeaderString, strlen(szHeaderString), bHeaderAttr, 1, 1, szPromoLabelList, TRUE, inGetIdleTimeOut(TRUE)); /*Menu with timeout parameter*/
  inSetTextMode();
	
	if (key > 0)
	{
		if (key == 0xFF) //TimeOut
		{
			CTOS_LCDTClearDisplay();
			//setLCDPrint(1, DISPLAY_POSITION_CENTER, "WRONG INPUT!!!");
			vdSetErrorMessage("TIME OUT");
			vduiWarningSound();
			return -1;
		}
		if (key == d_KBD_CANCEL)
			return -1;

		strCDT.HDTid = strMultiPRM[key-1].HDTid;
		//strcpy(srTransRec.szPromo, strMultiPRM[key-1].szPromoCode);		
		srTransRec.PRMid=strMultiPRM[key-1].PRMid;
		key = d_OK;
	}

	return(key);	
}


//gcitra

int inCLearTablesStructure(void){

	memset(&strCDT,0x00, sizeof(STRUCT_CDT));
	memset(&strIIT,0x00, sizeof(STRUCT_IIT));
	memset(&strEMVT,0x00, sizeof(STRUCT_EMVT));
	memset(&strHDT,0x00, sizeof(STRUCT_HDT));
	memset(srTransRec.szBaseAmount, 0x00, sizeof(srTransRec.szBaseAmount));
	memset(srTransRec.szPAN, 0x00, sizeof(srTransRec.szPAN));
	memset(&srTransRec,0x00, sizeof(TRANS_DATA_TABLE));
    return d_OK;
}



int inConfirmPAN(void){

    unsigned char key;
		int inRet;


	//gcitra-0806
		if (inMultiAP_CheckSubAPStatus() == d_OK)
		   return d_OK;
	//gcitra-0806	


	if (strTCT.fConfirmPAN){
		while(1){
			key=WaitKey(15);

			if (key == d_KBD_CANCEL){
				inRet = d_NO;
				break;

			}
				
			if(key == d_KBD_ENTER){
				inRet =  d_OK;	
				break;
			}

		}
	}

	//smac	
#if 1
    
	if (srTransRec.HDTid == SMAC_HDT_INDEX){
		if (fSMACTRAN == FALSE) {
			
			CTOS_LCDTClearDisplay();
			//vdDisplayErrorMsg(1, 8, "TRANS NOT ALLWD");
			//vduiWarningSound();
			//CTOS_Delay(2000);
			vdSetErrorMessage("TRANS NOT ALLWD");
			inRet = d_NO;
		}
	}
#endif
	//smac		

    vdDebug_LogPrintf("inConfirmPAN");

	return inRet;
}

int inCTOS_SelectAccountType(void)
{
	BYTE key = 0;
	int inRet = 0;
	char szDebug[40+1] = {0};

	vdDebug_LogPrintf("inCTOS_SelectAccountType[START]");
	
	CTOS_LCDTClearDisplay();
	vdDispTransTitle(srTransRec.byTransType);

	do
	{
		setLCDPrint27(3,DISPLAY_POSITION_LEFT, "SELECT ACCOUNT:"); 	
		CTOS_LCDTPrintXY(1, 4, "[F1]SAVINGS");
		CTOS_LCDTPrintXY(1, 5, "[F2]CURRENT");

		key = WaitKey(60);
		if (key == d_KBD_F1)
		{
			inRet = d_OK;
			inAccountType = SAVINGS_ACCOUNT;
			srTransRec.inAccountType =SAVINGS_ACCOUNT;
			break;
		}
		else if (key == d_KBD_F4)
		{
			inRet = d_OK;	
			inAccountType = CURRENT_ACCOUNT;
			srTransRec.inAccountType =CURRENT_ACCOUNT;
			break;
		}
		else if (key == d_KBD_CANCEL)
		{
			inRet = d_NO;
			break;
		}
		else
			vduiWarningSound();

	}
	while(1);

	// display selected account
	if (inRet != d_NO)
	{
		CTOS_LCDTClearDisplay();
		vdDispTransTitle(srTransRec.byTransType);

		switch (inAccountType)
		{
			case CURRENT_ACCOUNT:
				setLCDPrint27(7,DISPLAY_POSITION_CENTER, "CURRENT ACCOUNT");
				break;
			case SAVINGS_ACCOUNT:
				setLCDPrint27(7,DISPLAY_POSITION_CENTER, "SAVINGS ACCOUNT");
				break;
			default:
				break;
		}
		WaitKey(1);
	}

	vdDebug_LogPrintf("inCTOS_SelectAccountType[END]");

	return inRet;
}




int inCTOS_SelectCurrency(void)
{
    BYTE key = 0;
    int inRet = 0;
    char szDebug[41] = {0},
    szAscBuf[5] = {0}, 
    szBcdBuf[3] = {0};
    
    char szChoiceMsg[30 + 1];
    char szHeaderString[24+1];
    int bHeaderAttr = 0x01+0x04;
	BYTE Menukey = 0;
	
		if (inMultiAP_CheckSubAPStatus() == d_OK)
		   return d_OK;

    vdDebug_LogPrintf("inCTOS_SelectCurrency[START]");
    
    if (strTCT.fDualCurrency == VS_FALSE)
        return d_OK;
    
    if (strCDT.fDualCurrencyEnable == VS_FALSE)
        return d_OK;

    CTOS_LCDTClearDisplay();
#if 0
    memset(szHeaderString, 0x00, sizeof(szHeaderString));
    memset(szChoiceMsg, 0x00, sizeof(szChoiceMsg));
    
    strcpy(szHeaderString, "Select Currency");
    strcat(szChoiceMsg,"PHP \n");
    strcat(szChoiceMsg,"USD");
		inSetColorMenuMode();
    //Menukey = MenuDisplay(szHeaderString,strlen(szHeaderString), bHeaderAttr, 1, 1, szChoiceMsg, TRUE);
	Menukey = MenuDisplayEx(szHeaderString, strlen(szHeaderString), bHeaderAttr, 1, 1, szChoiceMsg, TRUE, inGetIdleTimeOut(TRUE)); /*Menu with timeout parameter*/
	vdDebug_LogPrintf("::inCTOS_SelectCurrency::MenuDisplayEx::Menukey[%d]", Menukey);
    inSetTextMode();
 #endif   

    
 	vdDispTransTitle(srTransRec.byTransType);
 	CTOS_LCDTPrintAligned(3, "SELECT CURRENCY", d_LCD_ALIGNLEFT);
 	CTOS_LCDTPrintAligned(4, "1.PHP", d_LCD_ALIGNLEFT);
 	CTOS_LCDTPrintAligned(5, "2.USD", d_LCD_ALIGNLEFT);
 

	while(1){
		
		Menukey=WaitKey(inGetIdleTimeOut(TRUE));

       if(Menukey == d_KBD_1)
        {
            Menukey = 1;
			break;
        }
        else if(Menukey == d_KBD_2)
        {
            Menukey = 2;
			break;
        }
        else if(Menukey == d_KBD_CANCEL)
        {
            Menukey = d_KBD_CANCEL;
			break;
        } 
		else if (Menukey == 0xFF) /*BDO: For timeout occured -- sidumili*/
		{
			fTimeOutFlag = TRUE;	/*BDO: Flag for timeout --sidumili*/
			Menukey = 0xFF;
			break;
		}

	}
        if(Menukey == 1)
        {
            CTOS_LCDTClearDisplay();
            vdDispTransTitle(srTransRec.byTransType);
            CTOS_LCDTPrintXY(5, 4, "PHP SELECTED?");
            inRet = d_OK;
        }
        else if(Menukey == 2)
        {
            CTOS_LCDTClearDisplay();
            vdDispTransTitle(srTransRec.byTransType);
            CTOS_LCDTPrintXY(5, 4, "USD SELECTED?");
            inRet = d_OK; 
            
            strCDT.HDTid = strCDT.inDualCurrencyHost;
            
            inCSTRead(strCDT.HDTid);
            memset(szAscBuf, 0x00, sizeof(szAscBuf)); 
            memset(szBcdBuf, 0x00, sizeof(szBcdBuf));
            sprintf(szAscBuf,"%4s",strCST.szCurCode); 	
            wub_str_2_hex(szAscBuf, szBcdBuf, 4);
            memcpy((char *)srTransRec.stEMVinfo.T5F2A, &szBcdBuf[0], 2);
			DebugAddHEX("T5F2A..",srTransRec.stEMVinfo.T5F2A,2);
        }
	else if (Menukey == 0xFF) /*BDO: For timeout occured -- sidumili*/
	{
		fTimeOutFlag = TRUE;	/*BDO: Flag for timeout --sidumili*/ 
		return(d_NO);
	}
        else if(Menukey == d_KBD_CANCEL)
        {
            return -1;
        }
    }
		else
        return -1;			

	do
	{
		CTOS_LCDTPrintXY(1, 8,  "ENTER TO CONFIRM");

		key=WaitKey(60);
		if (key ==d_KBD_ENTER)
		{			
			inRet = d_OK;	
			break;
		}
		else if (key == d_KBD_CANCEL)
		{
			inRet = d_NO;	
			break;
		}
		else
			vduiWarningSound();
	}
	while(1);

	return inRet;
}


/* EMV: Get Application Label - start -- jzg */
void vdDispAppLabel(unsigned char *ucHex, int inLen, char *szOutStr)
{
	int i;
	char szBuf[80] = {0};

	for (i = 0; i < inLen; i++)
		szBuf[i] = ucHex[i];
	szBuf[i] = 0x00;

	memcpy(szOutStr, szBuf, inLen);
}
/* EMV: Get Application Label - end -- jzg */


int inCTOS_EMVSetTransType(BYTE byTransType)
{
	switch(byTransType)
	{
		/* BDOCLG-00161/00162: Enable quasi cash support for CUP cards - start -- jzg */
		case SALE:
			if(strIIT.fQuasiCash == TRUE)
				ushCTOS_EMV_NewTxnDataSet(TAG_9C_TRANS_TYPE,1,"\x11");
			break;
		/* BDOCLG-00161/00162: Enable quasi cash support for CUP cards - end -- jzg */
		case REFUND:
			ushCTOS_EMV_NewTxnDataSet(TAG_9C_TRANS_TYPE,1,"\x20");
			break;
		case PRE_AUTH:
			ushCTOS_EMV_NewTxnDataSet(TAG_9C_TRANS_TYPE,1,"\x00");
			break;
		case CASH_ADVANCE:
			ushCTOS_EMV_NewTxnDataSet(TAG_9C_TRANS_TYPE,1,"\x01");
			break;
	}
}

//gcitra


//sidumili: pad string
void vdCTOS_Pad_String(char* str,int padlen,char padval,int padtype) {
    int padno;

    if ((padno = padlen - strlen(str)) > 0) {
        if (padtype == POSITION_LEFT)
            memmove(str + padno, str, strlen(str) + 1);
        else
            str += strlen(str);
        memset(str, padval, padno);
        if (padtype == POSITION_RIGHT)
            *(str + padno) = '\0';
    } else if (padno < 0) {
        // Truncate string if too long!!
        memmove(str, str + abs(padno), padlen + 1);
    }
}
//sidumili: pad string

/*********************************************************/
/*sidumili: Issue#000136 [code by albert]*/
/*********************************************************/


BYTE InputAmount2(USHORT usX, USHORT usY, BYTE *szCurSymbol, BYTE exponent, BYTE first_key, BYTE *baAmount, ULONG *ulAmount, USHORT usTimeOutMS, BYTE bIgnoreEnter)
{
	char szTemp[24+1];
	USHORT inRet;
	int inCtr=0;
	char szAmount[24+1];
	char chAmount=0x00;
	char szDisplay[24+1];
	unsigned char c;
	BOOL isKey;;
	memset(szAmount, 0x00, sizeof(szAmount));

	// patrick fix code 20141211
	if (first_key != 0x00)
	{
		szAmount[0] = first_key;
		inCtr = 1;
	}

	while(1)
	{
		memset(szTemp, 0x00, sizeof(szTemp));         
		if(strlen(szAmount) > 0)
		{
			vdCTOS_FormatAmount("NN,NNN,NNN,NNn.nn", szAmount, szTemp);
		}
		else
		{
			vdCTOS_FormatAmount("NN,NNN,NNN,NNn.nn", "0", szTemp);
		}

		clearLine(usY);
		CTOS_LCDTPrintXY(usX, usY, szCurSymbol);
		int x=0;
		int len, index;
		len=strlen(szTemp);
		for(index=0; index < len; index++)
		{
			if(szTemp[index] == '.')
				x+=1;
			else
				x+=2;
		}

		CTOS_LCDTPrintXY(36-x, usY, szTemp);
		CTOS_TimeOutSet(TIMER_ID_3,usTimeOutMS);
		while(1)//loop for time out
		{
			CTOS_KBDInKey(&isKey);
			if (isKey)
			{ //If isKey is TRUE, represent key be pressed //
				vduiLightOn();
				//Get a key from keyboard //
				CTOS_KBDGet(&c);
				inRet=c;
				break;
			}
			else if (CTOS_TimeOutCheck(TIMER_ID_3) == d_YES)
			{
				return 0xFF;
			}
		}

		if(inRet >= 48 && inRet <= 57)
		{
			if(inCtr < 10)
			{
				memset(szTemp, 0x00, sizeof(szTemp));
				sprintf(szTemp, "%c", inRet);
				strcat(szAmount, szTemp);
				inCtr++; 

				if(inCtr == 1 && szAmount[0] == 48)
				{
					memset(szAmount, 0x00, sizeof(szAmount));
					inCtr=0;
				}
			}
		}
		else if(inRet == 67) /*cancel key*/
		{
			return d_USER_CANCEL;
		}
		else if(inRet == 65) /*entery key*/
		{
			if(strlen(szAmount) > 0)
			{
				memcpy(baAmount, szAmount, strlen(szAmount));
				return d_OK;
			}
			else
			{
				if(bIgnoreEnter == 1)
					return d_OK;			
			}
		}
		else if(inRet == 82) /*clear key*/
		{
			if(inCtr > 0)
				inCtr--;
			szAmount[inCtr]=0x00;
		}
	}
}


//copied from LibInput ctosapi.c
USHORT shCTOS_InputGetNum(IN  USHORT usY, IN  USHORT usLeftRight, OUT BYTE *baBuf, OUT  USHORT *usStrLen, USHORT usMinLen, USHORT usMaxLen, USHORT usByPassAllow, USHORT usTimeOutMS)
{
    
    BYTE    bDisplayStr[MAX_CHAR_PER_LINE+1];
    BYTE    bKey = 0x00;
    BYTE    bInputStrData[128];
    USHORT  usInputStrLen;

    usInputStrLen = 0;
    memset(bInputStrData, 0x00, sizeof(bInputStrData));
    
    if(usTimeOutMS > 0)
        CTOS_TimeOutSet (TIMER_ID_1 , usTimeOutMS);

    //vdInputDebug_LogPrintf("start [%d] data[%s]", strlen(baBuf), baBuf);
    if(strlen(baBuf) > 0 )
    {
        memset(bDisplayStr, 0x00, sizeof(bDisplayStr));
        memset(bDisplayStr, 0x20, usMaxLen*2);
        usInputStrLen = strlen(baBuf);
        strcpy(bInputStrData, baBuf);
        if(0x01 == usLeftRight)
        {
            strcpy(&bDisplayStr[(usMaxLen-strlen(bInputStrData))*2], bInputStrData);
            CTOS_LCDTPrintXY(MAX_CHAR_PER_LINE - usMaxLen*2, usY, bDisplayStr);
        }
        else
        {
            memcpy(bDisplayStr, bInputStrData, strlen(bInputStrData));
            CTOS_LCDTPrintXY(1, usY, bDisplayStr);
        }
    }
    
    while(1)
    {
//        vduiLightOn(); // patrick remark for flash light always
        if(CTOS_TimeOutCheck(TIMER_ID_1 )  == d_YES)
        {
            *usStrLen = 0;
            baBuf[0] = 0x00;
            //return d_KBD_CANCEL ;
            return 0xFF;
        }
        
        CTOS_KBDHit(&bKey);

        switch(bKey)
        {
        case d_KBD_DOT:
            break;
        case d_KBD_CLEAR:
            if (usInputStrLen)
            {
                usInputStrLen--;
                bInputStrData[usInputStrLen] = 0x00;
                
                memset(bDisplayStr, 0x00, sizeof(bDisplayStr));
                memset(bDisplayStr, 0x20, usMaxLen*2);
                if(0x01 == usLeftRight)
                {
                    strcpy(&bDisplayStr[(usMaxLen-strlen(bInputStrData))*2], bInputStrData);
                    CTOS_LCDTPrintXY(MAX_CHAR_PER_LINE - usMaxLen*2, usY, bDisplayStr);
                }
                else
                {
                    memcpy(bDisplayStr, bInputStrData, strlen(bInputStrData));
                    CTOS_LCDTPrintXY(1, usY, bDisplayStr);
                }

				//if(1 == fGetCardNO && usInputStrLen == 0)
				//{
				//	*usStrLen = 0;
	            //	baBuf[0] = 0x00;
	            //	return d_KBD_CANCEL ;
				//}
            }
            break;
        case d_KBD_CANCEL:
            *usStrLen = 0;
            baBuf[0] = 0x00;
            return d_KBD_CANCEL ;
        case '1':
        case '2':
        case '3':
        case '4':
        case '5':
        case '6':
        case '7':
        case '8':
        case '9':
        case '0':
            if (usInputStrLen < usMaxLen )
            {
                bInputStrData[usInputStrLen++] = bKey;

                memset(bDisplayStr, 0x00, sizeof(bDisplayStr));
                memset(bDisplayStr, 0x20, usMaxLen*2);
                if(0x01 == usLeftRight)
                {
                    strcpy(&bDisplayStr[(usMaxLen-strlen(bInputStrData))*2], bInputStrData);
                    CTOS_LCDTPrintXY(MAX_CHAR_PER_LINE - usMaxLen*2, usY, bDisplayStr);
                }
                else
                {
                    memcpy(bDisplayStr, bInputStrData, strlen(bInputStrData));
                    CTOS_LCDTPrintXY(1, usY, bDisplayStr);
                }
            }
            break;
        case d_KBD_ENTER:
            if(usInputStrLen >= usMinLen && usInputStrLen <= usMaxLen)
            {   
                *usStrLen = usInputStrLen;
                strcpy(baBuf, bInputStrData);
                return *usStrLen;
            }
            else if(usByPassAllow && 0 == usInputStrLen)
            {   
                *usStrLen = usInputStrLen;
                baBuf[0] = 0x00;
                return *usStrLen;
            }
            break;
        default :
            break;
        }
    }

    return 0;
}

/* BDO: Last 4 PAN digit checking - start -- jzg */
int inBDOEnterLast4Digits(BOOL fInstallment)
{
	int inRet = 0,
		inPANLen = 0;
	BYTE strOut[5] = {0};
	short shMaxLen = 4, 
		shMinLen = 4;
    USHORT usLen;

	int inRetryCount;
	int inMaxRetrycount = 3;
	/* BDOCLG: Last 4 digit checking not applicable for debit cards - start -- jzg */
	if(strCDT.inType == DEBIT_CARD)
		return d_OK;
	/* BDOCLG: Last 4 digit checking not applicable for debit cards - end -- jzg */

	if(strIIT.fLast4Digits != TRUE)
		return d_OK;	  	

	if((srTransRec.byEntryMode != CARD_ENTRY_MSR) && 
		(srTransRec.byEntryMode != CARD_ENTRY_FALLBACK))
		return d_OK;		

	CTOS_LCDTClearDisplay();
	vduiLightOn();
	if (fInstallment == TRUE)
		vdDispTitleString("INSTALLMENT");
	else
	vdDispTransTitle(srTransRec.byTransType);
	//displayAppbmpDataEx(75, 45, strIIT.szIssuerLogo);
	inPANLen = (strlen(srTransRec.szPAN) - 4);
	inRetryCount = 0;

	while(1)
	{	
		vduiClearBelow(8);
		//CTOS_LCDTPrintXY(1, 6, "PLEASE ENTER PAN");
		//CTOS_LCDTPrintXY(1, 7, "LAST 4 DIGITS:");
		CTOS_LCDTPrintXY(1, 4, "PAN LAST FOUR DIGITS:");
		memset(strOut,0x00, sizeof(strOut));
		//inRet = InputString(1, 8, 0x00, 0x02, strOut, &shMaxLen, shMinLen, d_INPUT_TIMEOUT);
		//inRet = shCTOS_InputGetNum(8, 0x01,  strOut, &usLen, shMinLen, shMaxLen, 0, d_INPUT_TIMEOUT);
		//inRet = shCTOS_InputLAST4Digit(5, 0x01,  strOut, &usLen, shMinLen, shMaxLen, 0, d_INPUT_TIMEOUT);
		inRet = shCTOS_InputLAST4Digit(5, 0x01,  strOut, &usLen, shMinLen, shMaxLen, 0, inGetIdleTimeOut(FALSE)); /*BDO: Parameterized idle timeout --sidumili*/
		inRetryCount++;
		if (inRet == d_KBD_CANCEL )
		{
			vdSetErrorMessage("USER CANCEL");
			return d_NO;
		}
		else if(inRet == 0)
			return d_NO;
		else if(inRet == 0xFF)
		{
			//vdSetErrorMessage("TIME OUT");
			fTimeOutFlag = TRUE; /*BDO: Flag for timeout --sidumili*/
			return d_NO;
		}
		else if(inRet >= 1)
		{
			if(memcmp(strOut, srTransRec.szPAN+inPANLen, 4) == 0) 	
				break;
			else{
					vduiClearBelow(4);
					vdDisplayErrorMsgResp(1, 1, 1, 3, 4, 5, " ", "INCORRECT LAST 4", "DIGITS");	
					
					if (inRetryCount >= inMaxRetrycount)
						return d_NO;
				
				   vduiClearBelow(5);
			}
		}	
	}	

	return d_OK;
}
/* BDO: Last 4 PAN digit checking - end -- jzg */



int inCTOS_TEMPCheckAndSelectMutipleMID(void)
{
#define ITEMS_PER_PAGE          4

    char szMMT[50];
    char szDisplay[50];
    int inNumOfRecords = 0;
    short shCount = 0;
    short shTotalPageNum;
    short shCurrentPageNum;
    short shLastPageItems = 0;
    short shPageItems = 0;
    short shLoop;
    short shFalshMenu = 1;
     BYTE isUP = FALSE, isDOWN = FALSE;
    
    unsigned char key;
    unsigned char bstatus = 0; 

//1217
		short shMinLen = 4;
		short shMaxLen = 6;
		BYTE Bret;
		unsigned char szOutput[30];
//1217

    BYTE bHeaderAttr = 0x01+0x04, iCol = 1;
    BYTE  x = 1;
    char szHeaderString[50] = "SELECT MERCHANT";
    char szMitMenu[1024];
    int inLoop = 0;

    if(inMultiAP_CheckSubAPStatus() == d_OK)
        return d_OK;

	inNMTReadNumofRecords(&inNumOfRecords);
    CTOS_KBDBufFlush();//cleare key buffer

    if(inNumOfRecords > 1)
    {
        
        //issue-00378 - remove trailing key entry for amount if multi merchant setup
        //SIT
        //vdSetFirstIdleKey(0x00);

        //issue-00436: clear the buffer first to avoid garbage display
		memset(szMitMenu, 0x00, sizeof(szMitMenu));
		
        for (inLoop = 0; inLoop < inNumOfRecords; inLoop++)
        {
            strcat((char *)szMitMenu, strNMT[inLoop].szMerchName);
            if(inLoop + 1 != inNumOfRecords)
                strcat((char *)szMitMenu, (char *)" \n");
        }

				if((strTCT.byTerminalType % 2) == 0)
				{
					CTOS_LCDForeGndColor(RGB(13, 43, 112));
					CTOS_LCDBackGndColor(RGB(255, 255, 255));
				}
			
        key = MenuDisplay(szHeaderString, strlen(szHeaderString), bHeaderAttr, iCol, x, szMitMenu, TRUE);

        inSetTextMode(); 
        if(key > 0)
        {
            if(key == 0xFF) 
            {
                CTOS_LCDTClearDisplay();
                setLCDPrint(1, DISPLAY_POSITION_CENTER, "WRONG INPUT!!!");
                vduiWarningSound();
                return -1;	
            }
            else if(d_KBD_CANCEL == key)
                return -1;
						else
						{
							vdDebug_LogPrintf("key[%d]-------", key); 	
							memcpy(&strNMT[0],&strNMT[key-1],sizeof(STRUCT_MMT));
						}
        }
        else
            return -1;
    }


    if (strNMT[0].fMerchEnablePassword == 1)
    {
        CTOS_LCDTClearDisplay();
        
        vdDispTitleString("MULTI MERCHANT");
        CTOS_LCDTPrintXY(1, 3,strNMT[0].szMerchName);
        CTOS_LCDTPrintXY(1, 4,"ENTER PASSWORD:");
        
        while (1)
        {
            memset(szOutput,0x00,sizeof(szOutput)); 																		 
            shMinLen = strlen(strNMT[0].szMercPassword);
            
            //Bret = InputString(1, 5, 0x01, 0x02,szOutput, &shMaxLen, shMinLen, d_INPUT_TIMEOUT);
            Bret = InputString(1, 5, 0x01, 0x02,szOutput, &shMaxLen, shMinLen, inGetIdleTimeOut(FALSE)); /*BDO: Parameterized idle timeout --sidumili*/
            if (Bret == d_KBD_CANCEL)
                return -1;
						
						if(Bret == 0xFF){
							fTimeOutFlag = TRUE;
                			return -1;				
						}
            
            if(strcmp(szOutput,strNMT[0].szMercPassword) == 0)
                break;
						else
            {
                vdDisplayErrorMsg(1, 8, "WRONG PASSWORD");
                vduiClearBelow(5);
            }
        }
    }

    srTransRec.MITid = strNMT[0].NMTID;

    return d_OK;
}

/* BDO: PAN Format requirements -- sidumili */
void vdFormatPANForECR(char* szInPAN, char* szOutPAN){
int inLen1, inLen2;
char szTemp1[6 + 1] = {0};
char szTemp2[4 + 1] = {0};
char szTemp3[10 + 1] = {0};

inLen1 = strlen(szInPAN);

memset(szTemp1, 0x00, sizeof(szTemp1));
memset(szTemp2, 0x00, sizeof(szTemp2));
memset(szTemp3, 0x00, sizeof(szTemp3));

memcpy(szTemp1, &szInPAN[0], 6);
memcpy(szTemp2, &szInPAN[inLen1 - 4], 4);

inLen2 = inLen1 - 10;

vdCTOS_Pad_String(szTemp3, inLen2, '*', POSITION_LEFT);

sprintf(szOutPAN, "%s%s%s", szTemp1, szTemp3, szTemp2);

vdDebug_LogPrintf("szTemp1[%s]|szTemp2[%s]|szTemp3[%s]", szTemp1, szTemp2, szTemp3);
vdDebug_LogPrintf("inLen1[%d]|inLen2[%d]", inLen1, inLen2);
vdDebug_LogPrintf("szOutPAN[%s]", szOutPAN);

}
/* BDO: PAN Format requirements -- sidumili */

//aaronnino for BDOCLG ver 9.0 fix on issue#00146 Debit is accepting on CASH ADVANCE start 2 of 3
int inCTOS_CardNotSuppoted(int inHDTCardType)
{

	 if (inHDTCardType == srTransRec.HDTid)
	 	{
       vdSetErrorMessage("CARD NOT SUPPORTED");
  		 return ST_ERROR;
	 	}
	 else
       return ST_SUCCESS;
	 
}
//aaronnino for BDOCLG ver 9.0 fix on issue#00146 Debit is accepting on CASH ADVANCE end 2 of 3

/*BDO: Flag for selection of transaction via ecr -- sidumili*/
int inCTOS_SelectECRTranType(void)
{
	BYTE key = 0;
	int inRet = 0;
	char szDebug[41] = {0},
		szAscBuf[5] = {0}, 
		szBcdBuf[3] = {0};
	int inMenuNumRecs = 0,
		inCtr = 0,
		//inKey = 0,
		inHeaderAttr = 0x01+0x04;

	char szMenuItems[9000] = {0},
		szHeader[30] = {0};
	BYTE inKey = 0;

	CTOS_LCDTClearDisplay();
	vdDispTransTitle(srTransRec.byTransType);
	srTransRec.inECRTxnType = 0;

	fECRBuildSendOK = FALSE;
	fTimeOutFlag = FALSE; /*BDO: Flag for timeout --sidumili*/
	
	do
	{
#if 0	
		setLCDPrint27(4,DISPLAY_POSITION_LEFT, "SELECT TRANSACTION:"); 	
		CTOS_LCDTPrintXY(1, 5, "1. BINVER");
		CTOS_LCDTPrintXY(1, 6, "2. SALE");

		key=WaitKey(60);
#endif

		strcpy(szHeader, "SELECT TRANSACTION");
		memset(szMenuItems, 0, sizeof(szMenuItems));
		strcat(szMenuItems, "BINVER");
		strcat(szMenuItems, "\n");
		strcat(szMenuItems, "SALE");
		strcat(szMenuItems, "\n");
		strcat(szMenuItems, "INSTALLMENT");
		strcat(szMenuItems, "\n");
		inCtr = strlen(szMenuItems) - 1;
		szMenuItems[inCtr] = 0x00;
		inSetColorMenuMode();
		inKey = MenuDisplayEx(szHeader, strlen(szHeader), inHeaderAttr, 1, 1, szMenuItems, TRUE, inGetIdleTimeOut(TRUE)); /*Menu with timeout parameter*/
		vdDebug_LogPrintf("::inCTOS_SelectECRTranType::MenuDisplayEx::inKey[%d]", inKey);
		inSetTextMode();
		if(inKey == 1)
		{	
			//CTOS_LCDTClearDisplay();
			//vdDispTransTitle(BIN_VER);
			//CTOS_LCDTPrintXY(5, 4, "BINVER SELECTED");
			//setLCDPrint27(5, DISPLAY_POSITION_CENTER, "BINVER SELECTED");
			srTransRec.inECRTxnType = ECR_BINVER;
			inRet = d_OK;
			//CTOS_Delay(1000);
			break;
		}
		else if(inKey == 2)
		{
			//CTOS_LCDTClearDisplay();
			//vdDispTransTitle(SALE);
			//CTOS_LCDTPrintXY(5, 4, "SALE SELECTED");
			//setLCDPrint27(5, DISPLAY_POSITION_CENTER, "SALE SELECTED");
			srTransRec.inECRTxnType = ECR_SALE;
			inRet = d_OK;	
			//CTOS_Delay(1000);
			break;
		}
		else if (inKey == 0xFF) /*TimeOut -- sidumili*/
		{
			fTimeOutFlag = TRUE; /*BDO: Flag for timeout --sidumili*/
			inRet = d_NO;
			vdDisplayErrorMsg(1, 8, "TIMEOUT");;
			break;
		}
		else if (inKey == d_KBD_CANCEL)
		{
			inRet = d_NO;
			break;
		}
		else
			vduiWarningSound();

	}
	while(1);

	vdDebug_LogPrintf("inCTOS_SelectECRTranType::inRet[%d]|inECRTxnType[%d]", inRet, srTransRec.inECRTxnType);
	
	if (inRet == d_NO){

	/* Send response to ECR -- sidumili */
	fECRBuildSendOK = FALSE;
	if (!fECRBuildSendOK){	
		inMultiAP_ECRSendSuccessResponse();
	}	
	fECRBuildSendOK = FALSE;
	/* Send response to ECR -- sidumili */
	
		return d_NO;
	}

	return inRet;
}
/*BDO: Flag for selection of transaction via ecr -- sidumili*/

int inCTOS_MerchantCheckBatchAllOperation(void)
{
  	int inRet = d_NO;
  	int inNumOfHost = 0,inNum;
  	char szBcd[INVOICE_BCD_SIZE+1];
  	char szErrMsg[30+1];
  	char szAPName[25];
  	int inAPPID;

    CTOS_LCDTClearDisplay();
		
    if (inMultiAP_CheckMainAPStatus() == d_OK)
    {
        inCTOS_MerchantTagMustSettle();
        inCTOS_MultiAPALLAppEventID(d_IPC_CMD_MERCHANT_CHECK_BATCH_ALL);
    }
    else
        inCTOS_MerchantTagMustSettle();
    
    CTOS_LCDTClearDisplay();
    return ST_SUCCESS;
}

void inCTOS_MerchantTagMustSettle(void)
{
    unsigned char chkey;
    short shHostIndex;
    int inResult,i,inCount,inRet;
    //int inTranCardType;
    //int inReportType;
    int inBatchNumOfRecord;
    //int *pinTransDataid;

    STRUCT_FILE_SETTING strFile;
    ACCUM_REC srAccumRec;
		
    //BYTE baTemp[PAPER_X_SIZE * 64];
    //char szStr[d_LINE_SIZE + 1];
		//int inRet = d_NO;
		int inNumOfHost = 0, inNum = 0;
		char szBcd[INVOICE_BCD_SIZE+1] = {0};
		char szErrMsg[31] = {0};
		char szAPName[25] = {0};
		int inAPPID = 0;
    int inMerchantCount=0;
		int inBatchRecordNum = 0;
		int  *pinTransDataid = NULL;

		vdDebug_LogPrintf("inNumOfHost=[%d]-----",inNumOfHost);
		

		int inMMTTotalNumofMerchants=0;

  	CTOS_RTC SetRTC;
  	BYTE szCurrDate[8] = {0};


	memset(szCurrDate, 0x00, sizeof(szCurrDate));
	CTOS_RTCGet(&SetRTC);
	sprintf(szCurrDate,"%02d%02d%02d", SetRTC.bYear, SetRTC.bMonth, SetRTC.bDay);
		//inMMTTotalNumofMerchants=inMMTNumAlbertRecord();

		//pinTransDataid = (int*)malloc(inMMTTotalNumofMerchants * sizeof(int));

		//inBatchReviewByMerchandHostAlbert(pinTransDataid);

   	memset(szAPName,0x00,sizeof(szAPName));
   	inMultiAP_CurrentAPNamePID(szAPName, &inAPPID);

    inNumOfHost = inHDTNumRecord();
    vdDebug_LogPrintf("inNumOfHost=[%d]-----",inNumOfHost);

    vduiDisplayStringCenter(3 ,"CHECKING MERCHANT");
	vduiDisplayStringCenter(4 ,"SETTLE STATUS");
	vduiDisplayStringCenter(5 ,"PLEASE WAIT...");		

		
    for(inNum =1 ;inNum <= inNumOfHost; inNum++)
    {
        if(inHDTRead(inNum) == d_OK)
        {
            if(strHDT.fHostEnable != TRUE)
						     continue;
						
            vdDebug_LogPrintf("szAPName=[%s]-[%s]----",szAPName,strHDT.szAPName);
						
						
						
					
						
            if (strcmp(szAPName, strHDT.szAPName)!=0)
                continue;
						else
						{
							srTransRec.HDTid=strHDT.inHostIndex;
							inMMTTotalNumofMerchants=inMMTNumAlbertRecord(srTransRec.HDTid);
							pinTransDataid = (int*)malloc(inMMTTotalNumofMerchants * sizeof(int));
							inBatchReviewByMerchandHostAlbert(pinTransDataid,srTransRec.HDTid);
							vdDebug_LogPrintf("inMMTTotalNumofMerchants=[%d]----",inMMTTotalNumofMerchants);
							
							for (inMerchantCount = 1; inMerchantCount<=inMMTTotalNumofMerchants; inMerchantCount++)
							{
                  inMMTReadRecord(srTransRec.HDTid, pinTransDataid[inMerchantCount]);
									if(strMMT[0].fMustSettFlag == TRUE)
									    continue;
									
                   vdDebug_LogPrintf("srTransRec.HDTid %d", srTransRec.HDTid);   

                   vdDebug_LogPrintf("current date %s", szCurrDate);   
				   
                   vdDebug_LogPrintf("settle date %s", strMMT[0].szSettleDate);    
									
                  	if ((strMMT[0].fMMTEnable == TRUE) &&
						(wub_str_2_long(szCurrDate) >= wub_str_2_long(strMMT[0].szSettleDate)))
                  {										
                     srTransRec.MITid=strMMT[0].MITid; 								 
                     vdCTOS_GetAccumName(&strFile, &srAccumRec);
                     if ((inResult = inMyFile_CheckFileExist(strFile.szFileName)) > 0)
                     {
                         strMMT[0].fMustSettFlag = 1;
                         inMMTSave(strMMT[0].MMTid);
                     }
                  }
							}
							
							free(pinTransDataid);
						}
        }
    }

	
}

USHORT shCTOS_InputLAST4Digit(IN  USHORT usY, IN  USHORT usLeftRight, OUT BYTE *baBuf, OUT  USHORT *usStrLen, USHORT usMinLen, USHORT usMaxLen, USHORT usByPassAllow, USHORT usTimeOutMS)
{
    
    BYTE    bDisplayStr[20+1];
    BYTE    bKey = 0x00;
    BYTE    bInputStrData[128];
    USHORT  usInputStrLen;

    usInputStrLen = 0;
    memset(bInputStrData, 0x00, sizeof(bInputStrData));
    
    if(usTimeOutMS > 0)
        CTOS_TimeOutSet (TIMER_ID_1 , usTimeOutMS);

    //vdInputDebug_LogPrintf("start [%d] data[%s]", strlen(baBuf), baBuf);
    if(strlen(baBuf) > 0 )
    {
        memset(bDisplayStr, 0x00, sizeof(bDisplayStr));
        memset(bDisplayStr, 0x20, usMaxLen*2);
        usInputStrLen = strlen(baBuf);
        strcpy(bInputStrData, baBuf);
        if(0x01 == usLeftRight)
        {
            strcpy(&bDisplayStr[(usMaxLen-strlen(bInputStrData))*2], bInputStrData);
            CTOS_LCDTPrintXY(20 - usMaxLen*2, usY, bDisplayStr);
        }
        else
        {
            memcpy(bDisplayStr, bInputStrData, strlen(bInputStrData));
            CTOS_LCDTPrintXY(1, usY, bDisplayStr);
        }
    }
    
    while(1)
    {
//        vduiLightOn(); // patrick remark for flash light always
        if(CTOS_TimeOutCheck(TIMER_ID_1 )  == d_YES)
        {
            *usStrLen = 0;
            baBuf[0] = 0x00;
            //return d_KBD_CANCEL ;
            return 0xFF;
        }
        
        CTOS_KBDHit(&bKey);

        switch(bKey)
        {
        case d_KBD_DOT:
            break;
        case d_KBD_CLEAR:
            if (usInputStrLen)
            {
                usInputStrLen--;
                bInputStrData[usInputStrLen] = 0x00;
                
                memset(bDisplayStr, 0x00, sizeof(bDisplayStr));
                memset(bDisplayStr, 0x20, usMaxLen*2);
                if(0x01 == usLeftRight)
                {
                    clearLine(usY);
                    strcpy(&bDisplayStr[(usMaxLen-strlen(bInputStrData))*2], bInputStrData);
                    CTOS_LCDTPrintXY(23 - usMaxLen*2, usY, bDisplayStr);                
                }
                else
                {
                    memcpy(bDisplayStr, bInputStrData, strlen(bInputStrData));
                    CTOS_LCDTPrintXY(1, usY, bDisplayStr);
                }

				if ((strTCT.byTerminalType%2) == 0)
					clearLine(14);
				else
					clearLine(8);

				//if(1 == fGetCardNO && usInputStrLen == 0)
				//{
				//	*usStrLen = 0;
	            //	baBuf[0] = 0x00;
	            //	return d_KBD_CANCEL ;
				//}
            }
            break;
        case d_KBD_CANCEL:
            *usStrLen = 0;
            baBuf[0] = 0x00;
            return d_KBD_CANCEL ;
        case '1':
        case '2':
        case '3':
        case '4':
        case '5':
        case '6':
        case '7':
        case '8':
        case '9':
        case '0':
            if (usInputStrLen < usMaxLen )
            {
                bInputStrData[usInputStrLen++] = bKey;

                memset(bDisplayStr, 0x00, sizeof(bDisplayStr));
                memset(bDisplayStr, 0x20, usMaxLen*2);
                if(0x01 == usLeftRight)
                {
                    clearLine(usY);
                    strcpy(&bDisplayStr[(usMaxLen-strlen(bInputStrData))*2], bInputStrData);
                    CTOS_LCDTPrintXY(23 - usMaxLen*2, usY, bDisplayStr);
                }
                else
                {
                    memcpy(bDisplayStr, bInputStrData, strlen(bInputStrData));
                    CTOS_LCDTPrintXY(1, usY, bDisplayStr);
                }
            }

			if (usInputStrLen == 4){
				vdCTOS_DispStatusMessage("PRESS OK TO CONFIRM");
            //    *usStrLen = usInputStrLen;
            //    strcpy(baBuf, bInputStrData);
            //    return *usStrLen;
			}else{
				if ((strTCT.byTerminalType%2) == 0)
					clearLine(14);
				else
					clearLine(8);
            }
			
            break;
        case d_KBD_ENTER:
            if(usInputStrLen >= usMinLen && usInputStrLen <= usMaxLen)
            {   
                *usStrLen = usInputStrLen;
                strcpy(baBuf, bInputStrData);
                return *usStrLen;
            }
            else if(usByPassAllow && 0 == usInputStrLen)
            {   
                *usStrLen = usInputStrLen;
                baBuf[0] = 0x00;
                return *usStrLen;
            }
            break;
        default :
            break;
        }
    }

    return 0;
}

int szSetupMenuFunction(void){

	memcpy(szFuncTitleName,"SETUP",5);//aaronnino for BDOCLG ver 9.0 fix on issue #00114 Incorrect user password for manual settlement, if settlements fails for online transaction 4 of 9
	vdCTOS_SetTransType(SETUP);
	inCTOS_PromptPassword();

	inTCTRead(1);
	if((strTCT.byTerminalType % 2) == 0)
	{
		CTOS_LCDForeGndColor(RGB(13, 43, 112));
		CTOS_LCDBackGndColor(RGB(255, 255, 255));
	}

	vdDisplaySetup();
  	return SUCCESS;

}

int inCTOS_Settle_Selection(void){

    char szChoiceMsg[30 + 1];
    char szHeaderString[24+1];
    int bHeaderAttr = 0x01+0x04, Menukey=0;
	int inRet;
	int key;
	USHORT shRet = 0,
		shLen = 0,
		iInitX = 0,
		shMinLen = 4,
		shMaxLen = 6;
	BYTE szTitleDisplay[MAX_CHAR_PER_LINE + 1] = {0},
		szTitle[MAX_CHAR_PER_LINE + 1] = {0};

    CTOS_LCDTClearDisplay();


	memset(szTitle, 0x00, sizeof(szTitle));
	strcpy(szTitle, "SETTLEMENT");
	iInitX = (MAX_CHAR_PER_LINE - strlen(szTitle)*2) / 2;
	memset(szTitleDisplay, 0x00, sizeof(szTitleDisplay));
	memset(szTitleDisplay, 0x20, MAX_CHAR_PER_LINE);
	memcpy(&szTitleDisplay[iInitX], szTitle, strlen(szTitle));	
	CTOS_LCDTSetReverse(TRUE);
	CTOS_LCDTPrintXY(1, 1, szTitleDisplay);
	CTOS_LCDTSetReverse(FALSE);

	setLCDPrint(3, DISPLAY_POSITION_LEFT, "SETTLE ALL");
	setLCDPrint(4, DISPLAY_POSITION_LEFT,"CARD TYPES?");
	setLCDPrint(6, DISPLAY_POSITION_LEFT, "1.YES");
	setLCDPrint(7, DISPLAY_POSITION_LEFT,"2.NO");

	while (1){
		
		key = WaitKey(60);
		
	    if(key == d_KBD_1){
			inCTOS_SETTLE_ALL();	
			break;
	    }
	    else if(key == d_KBD_2){
			inCTOS_SETTLEMENT();
			break;	
	    }
		else if (key == d_KBD_CANCEL)
			return(d_NO);
		else 
			vduiWarningSound();

	}
	
  	return SUCCESS;


}

/*BDO: Get Idle TimeOut -- sidumili*/
int inGetIdleTimeOut(BOOL fSecond){
int inTimeOut;

inTimeOut = strTCT.inIdleTimeOut;

if (inTimeOut <= 0) inTimeOut = 30;

// MS
if (fSecond == FALSE)
	inTimeOut = (inTimeOut * 100);

vdDebug_LogPrintf("::inGetIdleTimeOut inTimeOut[%d]", inTimeOut);

return(inTimeOut);

}


#if 0
int inCheckSubAPPHost(void){


	if (inCheckHostEnable_Per_APPLICATION("V5S_BDODEBIT") <= 0)
	  	fIncludeDebit = FALSE;
	else
	  	fIncludeDebit = TRUE;

	if (inCheckHostEnable_Per_APPLICATION("V5S_BDOINST") <= 0)
	  	fIncludeInst = FALSE;
	else
	 	fIncludeInst = TRUE;

	if (inCheckHostEnable_Per_APPLICATION("V5S_BDOINST") <= 0)
		fIncludeCUP = FALSE;
	else
		fIncludeCUP = TRUE;

	return d_OK;

}
#endif



int inAnalyzeBinResponseCode(TRANS_DATA_TABLE *srTransPara){

	int inRespcode;
	int inResult = d_NO;

	inRespcode = atoi(srTransRec.szRespCode);

	switch(inRespcode){
		case 60: 
			     if (fnGlobalOrigHostEnable == 1){
				 	strCDT.HDTid = inHostOrigNumber;
			     }else{
					strCDT.HDTid = 1;//save in credit
			     }
		         strcpy(srTransRec.szRespCode,"00");
				 inResult = TRANS_AUTHORIZED;
				 break;
		case 69: strCDT.HDTid = 53;
				 strcpy(srTransRec.szRespCode,"00");
				 inResult = TRANS_AUTHORIZED;
				 break;
		case 70: strCDT.HDTid = 53;	         
		         strcpy(srTransRec.szRespCode,"00");
		         inResult = TRANS_AUTHORIZED;
				 break;
		//for DCC - not yet supported
		//case 71: strCDT.HDTid = 23;
		//         inResult = d_OK;
		//		 break;
		case 72: strCDT.HDTid = 59;
				 strcpy(srTransRec.szRespCode,"00");
		         inResult = TRANS_AUTHORIZED;
				 break;
		case 73: strCDT.HDTid = 56;
				 strcpy(srTransRec.szRespCode,"00");
		         inResult = TRANS_AUTHORIZED;
				 break;
		case 74: strCDT.HDTid = 36;
				 strcpy(srTransRec.szRespCode,"00");
		         inResult = TRANS_AUTHORIZED;
				 break;			
	}


   if (inResult == TRANS_AUTHORIZED){
	   	   fRouteToSpecificHost = 1 ;	   
   }else
   	   fRouteToSpecificHost = 0;

	vdDebug_LogPrintf("inAnalyzeBinResponseCode %d %d %d", inRespcode, fRouteToSpecificHost, srTransPara->shTransResult);

	return inResult;

}




